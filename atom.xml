<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yulingtianxia&#39;s blog</title>
  <subtitle>玉令天下的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yulingtianxia.com/"/>
  <updated>2017-01-16T05:43:09.000Z</updated>
  <id>http://yulingtianxia.com/</id>
  
  <author>
    <name>杨萧玉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DIY 双向滑动列表</title>
    <link href="http://yulingtianxia.com/blog/2017/01/16/DIY-a-simple-tow-way-list/"/>
    <id>http://yulingtianxia.com/blog/2017/01/16/DIY-a-simple-tow-way-list/</id>
    <published>2017-01-16T05:23:17.000Z</published>
    <updated>2017-01-16T05:43:09.000Z</updated>
    
    <content type="html">&lt;p&gt;公司项目中有个页面是双向滑动的列表，遂用 &lt;code&gt;UIScrollView&lt;/code&gt; 手撸了之，把一些 UI 和数据上的心得记录下来。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;需求简介&quot;&gt;&lt;a href=&quot;#需求简介&quot; class=&quot;headerlink&quot; title=&quot;需求简介&quot;&gt;&lt;/a&gt;需求简介&lt;/h2&gt;&lt;p&gt;UI 上的主要内容就是一个 &lt;code&gt;UITableView&lt;/code&gt;，其中一些 cell 内会嵌套一个横向滑动的 &lt;code&gt;ListView&lt;/code&gt;，&lt;code&gt;ListView&lt;/code&gt; 中包含一些尺寸相同可点击的 ItemView，ItemView 中的图片内容需要从网络加载。&lt;/p&gt;
&lt;p&gt;去掉一些跟本文内容无关的细枝末节，可以将原型抽象如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQStoryMemory/原型.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;蓝色的为 ItemView，白色为 &lt;code&gt;ListView&lt;/code&gt;，灰色为 TableView。&lt;/p&gt;
&lt;p&gt;竖向滑动会有分页加载和转菊花停顿，横向滑动无分页加载停顿，要求细腻丝滑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果只是单纯一个双向滑动列表，&lt;code&gt;UICollectionView&lt;/code&gt; 完全可以胜任。&lt;/strong&gt;但是真正的需求里还掺杂着很多其他 UI 元素，所以只能 DIY 了。&lt;/p&gt;
&lt;h2 id=&quot;数据请求&quot;&gt;&lt;a href=&quot;#数据请求&quot; class=&quot;headerlink&quot; title=&quot;数据请求&quot;&gt;&lt;/a&gt;数据请求&lt;/h2&gt;&lt;h3 id=&quot;格式设计&quot;&gt;&lt;a href=&quot;#格式设计&quot; class=&quot;headerlink&quot; title=&quot;格式设计&quot;&gt;&lt;/a&gt;格式设计&lt;/h3&gt;&lt;p&gt;因为主体 UI 为竖向列表嵌套横向列表，所以两个方向都需要有数据请求。&lt;/p&gt;
&lt;p&gt;为了方便叙述，这里简化下数据格式。&lt;/p&gt;
&lt;p&gt;ItemView 对应的数据 &lt;code&gt;ItemModel&lt;/code&gt; 包含唯一标识符 &lt;code&gt;itemID&lt;/code&gt; 和图片地址 &lt;code&gt;imageURL&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;ItemModel&lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSString *itemID; &lt;span class=&quot;comment&quot;&gt;// Item 唯一标识符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSString *imageURL; &lt;span class=&quot;comment&quot;&gt;// 封面图片 URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt; 对应的数据 &lt;code&gt;ListModel&lt;/code&gt; 包含分组唯一标识符 &lt;code&gt;listID&lt;/code&gt;，首屏需要展现的 Item 数据 &lt;code&gt;items&lt;/code&gt; 和列表所有 Item 的 ID &lt;code&gt;itemIDs&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;ListModel&lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSString *listID; &lt;span class=&quot;comment&quot;&gt;// List 唯一标识符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSArray&amp;lt;ItemModel *&amp;gt; *items; &lt;span class=&quot;comment&quot;&gt;// 包含首屏前几个 Item 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSArray&amp;lt;NSString *&amp;gt; *itemIDs; &lt;span class=&quot;comment&quot;&gt;// 包含整行 List 所有 Item 的 ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;竖向滑动时，TableView 会从后台分页获取 &lt;code&gt;ListModel&lt;/code&gt; 数组。&lt;code&gt;ListModel&lt;/code&gt; 中的 &lt;code&gt;items&lt;/code&gt; 填充了初始数据（此时不需要横向滑动拉取数据）。&lt;/p&gt;
&lt;p&gt;之所以不干脆在 &lt;code&gt;ListModel&lt;/code&gt; 装填所有 &lt;code&gt;ItemModel&lt;/code&gt;，是为了节省一次请求的数据流量，降低失败率。因为第一次展示页面时只需要填充前几个 ItemView 的数据，等用户横向滑动后再继续根据 &lt;code&gt;itemIDs&lt;/code&gt; 请求滑动到的 ItemView 对应数据。&lt;/p&gt;
&lt;h3 id=&quot;请求时机&quot;&gt;&lt;a href=&quot;#请求时机&quot; class=&quot;headerlink&quot; title=&quot;请求时机&quot;&gt;&lt;/a&gt;请求时机&lt;/h3&gt;&lt;p&gt;因为有了 &lt;code&gt;ListView&lt;/code&gt; 中所有 ItemView 对应的 ID，所以横向滑动没有分页逻辑，就没有转菊花的停顿时间用来请求网络数据和等待接受处理数据。虽然可以用 ID 请求到对应的 &lt;code&gt;ItemModel&lt;/code&gt;，但肯定不能在 &lt;code&gt;UITableView&lt;/code&gt; 的 datasource 回调中为每个 cell 去单独请求数据。所以 &lt;code&gt;ListView&lt;/code&gt; 即便直接使用 &lt;code&gt;UITableView&lt;/code&gt; 或 &lt;code&gt;UICollectionView&lt;/code&gt;，也无法享受到它带来的便捷，数据请求逻辑依然需要自己在 &lt;code&gt;UIScrollViewDelegate&lt;/code&gt; 中实现。&lt;strong&gt;所以 &lt;code&gt;ListView&lt;/code&gt; 是继承 &lt;code&gt;UIScrollView&lt;/code&gt; 自己 DIY 了一个横向滑动列表。如何合理控制数据请求次数成为了性能优化的重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;文中示例代码均经过简化，去除了无关信息，并使用 MRC。&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; `&lt;span class=&quot;title&quot;&gt;ListView&lt;/span&gt;` : &lt;span class=&quot;title&quot;&gt;UIScrollView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, retain) ListModel *model;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, retain) &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt;&amp;lt;ItemModel *&amp;gt; *itemModels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemWidth = &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ItemView 宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemHeight = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ItemView 高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemGap = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ItemView 间距&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemFirstToLeft = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 最左边的 ItemView 的 leftMargin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UIScrollViewDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidScroll:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scrollView.contentSize.width == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算滚动的区间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; indexLeft = floorf((scrollView.contentOffset.x - itemFirstToLeft) / (itemWidth + itemGap)) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexLeft = MAX(indexLeft, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexLeft = MIN(indexLeft, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.model.itemIDs.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; indexRight = ceilf((scrollView.contentOffset.x - itemFirstToLeft + scrollView.width) / (itemWidth + itemGap));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexRight = MAX(indexRight, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexRight = MIN(indexRight, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.model.itemIDs.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; length = indexRight - indexLeft + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length = MAX(length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length = MIN(length, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.model.itemIDs.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 加载区间内的 Item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; loadItems:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(indexLeft, length)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewWillBeginDragging:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; reloadItemModels];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidEndDecelerating:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; reloadItemModels];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 在指定范围内加载可重用 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 针对本地没有数据的 itemID 请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param range 加载的范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)loadItems:(&lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt;)range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 刷新页面数据，如果页面上有数据缺失，则再次请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)reloadItemModels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略一堆逻辑...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;ListView&lt;/code&gt; 中直接请求数据的位置有三处，但 &lt;code&gt;loadItems:&lt;/code&gt; 和 &lt;code&gt;reloadItemModels&lt;/code&gt; 这两个方法会被其他地方调用，所以可能间接请求数据的时机还是很多的。&lt;code&gt;reloadItemModels&lt;/code&gt; 方法也会在接收到网络数据时被调用。&lt;code&gt;loadItems:&lt;/code&gt; 计算滚动时屏幕上包含 &lt;code&gt;ItemView&lt;/code&gt; 的区间的方法完全是根据 frame 坐标来计算的，并且会预留出屏幕外左右各一个 &lt;code&gt;ItemView&lt;/code&gt;。&lt;code&gt;reloadItemModels&lt;/code&gt; 方法只是重新装载下数据，因为 &lt;code&gt;itemID&lt;/code&gt; 列表是完整的，但每个 &lt;code&gt;itemID&lt;/code&gt; 不一定都缓存到了对应的 &lt;code&gt;ItemModel&lt;/code&gt;，所以这个方法还对缺失数据进行请求，可以理解为『强刷』。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIScrollViewDelegate&lt;/code&gt; 中实现策略如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在列表滚动过程中计算当前显示在屏幕上的 ItemView 的区间，并调用 &lt;code&gt;loadItems:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在列表即将开始滚动和停止滚动的时刻，调用 &lt;code&gt;reloadItemModels&lt;/code&gt; 重新加载数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在计算需要加载的 &lt;code&gt;range&lt;/code&gt; 的时候需要注意一些边界数值的处理，擅用 &lt;code&gt;floorf&lt;/code&gt; 和 &lt;code&gt;ceilf&lt;/code&gt; 函数进行取舍，并用 &lt;code&gt;MAX()&lt;/code&gt; 和 &lt;code&gt;MIN()&lt;/code&gt; 来检查边界值合法性。&lt;/p&gt;
&lt;h2 id=&quot;可重用的-ItemView&quot;&gt;&lt;a href=&quot;#可重用的-ItemView&quot; class=&quot;headerlink&quot; title=&quot;可重用的 ItemView&quot;&gt;&lt;/a&gt;可重用的 &lt;code&gt;ItemView&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;需要自己实现一个类似 &lt;code&gt;UICollectionView&lt;/code&gt; 的 item 重用机制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQStoryMemory/reusableitem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在用户横向滑动列表时，需要更新此时某个区间的 UI 和数据。这个任务是在 &lt;code&gt;loadItems:&lt;/code&gt; 中实现的，原理是计算出需要被加载的 itemID 数组，并与已有的数据进行比较。将不再需要显示在屏幕上的 &lt;code&gt;ItemView&lt;/code&gt; 进行回收（enqueue），并从根据 itemID 添加 &lt;code&gt;ItemView&lt;/code&gt; 对象（dequeue）。因为一开始只加载了首屏的 &lt;code&gt;ItemModel&lt;/code&gt; 数组，所以还需要对本地缓存中缺失的数据进行请求。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 在指定范围内加载可重用 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 针对本地没有数据的 itemID 请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param range 加载的范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)loadItems:(NSRange)range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray&amp;lt;NSString *&amp;gt; *&lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad &lt;/span&gt;= [[&lt;span class=&quot;keyword&quot;&gt;self.model.itemIDs &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;subarrayWithRange:range] &lt;/span&gt;mutableCopy]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray&amp;lt;&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&amp;gt; *&lt;span class=&quot;keyword&quot;&gt;itemsToEnqueue &lt;/span&gt;= [NSMutableArray array]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 比较需要加载的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;数组和已经显示过的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;数组，计算出需要新添加的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;和不再需要显示而被回收的 &lt;span class=&quot;keyword&quot;&gt;Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    for (&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;self.visibleItems) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *&lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad &lt;/span&gt;= nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (NSString *&lt;span class=&quot;keyword&quot;&gt;itemIDToLoad &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;itemIDToLoad &lt;/span&gt;isEqualToString:&lt;span class=&quot;keyword&quot;&gt;item.itemID]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;itemIDToLoad;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;itemsToEnqueue &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad &lt;/span&gt;removeObject:&lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 回收不需要显示的 &lt;span class=&quot;keyword&quot;&gt;Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    for (&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;itemsToEnqueue) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;removeFromSuperview]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self.visibleItems &lt;/span&gt;removeObject:&lt;span class=&quot;keyword&quot;&gt;item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;enqueueReusableItem:&lt;span class=&quot;keyword&quot;&gt;item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 添加需要显示的 &lt;span class=&quot;keyword&quot;&gt;Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    NSMutableArray&amp;lt;NSString *&amp;gt; *&lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest &lt;/span&gt;= [NSMutableArray array]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (NSString *&lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addItemViewWithID:itemID]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:itemID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 针对本地没有数据的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest.count &lt;/span&gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 向后台请求 &lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest &lt;/span&gt;对应数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad &lt;/span&gt;release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;addItemViewWithID:&lt;/code&gt; 负责从 reusable items 获取 &lt;code&gt;ItemView&lt;/code&gt; 并设置 &lt;code&gt;frame&lt;/code&gt; 添加到 &lt;code&gt;ListView&lt;/code&gt; 中。因为 &lt;code&gt;ItemView&lt;/code&gt; 是重用的，所以如果 dequeue 出的对象正好是上一次刚刚 enqueue 的对象，那么就不用重新填充数据了；否则需要重置 &lt;code&gt;ItemView&lt;/code&gt; 的占位图，并填充新数据。&lt;code&gt;ItemView&lt;/code&gt; 被填充了数据后会对数据进行处理，比如异步拉取图片资源。&lt;/p&gt;
&lt;p&gt;当无法向 &lt;code&gt;ItemView&lt;/code&gt; 填充数据时，&lt;code&gt;addItemViewWithID:&lt;/code&gt; 会返回 &lt;code&gt;NO&lt;/code&gt;，暗示调用方需要用该 itemID 请求数据。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 添加 itemID 对应的 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param itemID @param itemID 视频 ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @return 是否成功向 Item 填充数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL)addItemViewWithID:(NSString &lt;/span&gt;*)&lt;span class=&quot;keyword&quot;&gt;itemID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;dequeueReusableItem]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSUInteger index = [&lt;span class=&quot;keyword&quot;&gt;self.model.itemIDs &lt;/span&gt;indexOfObject:&lt;span class=&quot;keyword&quot;&gt;itemID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat originX = &lt;span class=&quot;keyword&quot;&gt;itemFirstToLeft &lt;/span&gt;+ index * (&lt;span class=&quot;keyword&quot;&gt;itemWidth &lt;/span&gt;+ &lt;span class=&quot;keyword&quot;&gt;itemGap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;item.frame &lt;/span&gt;= CGRectMake(originX, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;itemWidth, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;itemHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addSubview:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.visibleItems &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;item.itemID &lt;/span&gt;isEqualToString:&lt;span class=&quot;keyword&quot;&gt;itemID]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;useDefaultCover]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;item.itemID &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;itemID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (&lt;span class=&quot;keyword&quot;&gt;ItemModel &lt;/span&gt;*model in &lt;span class=&quot;keyword&quot;&gt;self.itemModels)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; ([model.&lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;isEqualToString:&lt;span class=&quot;keyword&quot;&gt;itemID])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;item.model &lt;/span&gt;= model&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return NO&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可重用 Item 列表的 dequeue 和 enqueue 操作实现如下，dequeue 也负责在可重用列表不够用时创建新的 &lt;code&gt;ItemView&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 从可重用队列中回收 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param item  回收的 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)enqueueReusableItem:(&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*)&lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.reusableItems &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 从可重用队列中取出 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @return  取出的 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*)dequeueReusableItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;self.reusableItems.firstObject &lt;/span&gt;retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;item) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self.reusableItems &lt;/span&gt;removeObject:&lt;span class=&quot;keyword&quot;&gt;item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;autorelease]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;感受&quot;&gt;&lt;a href=&quot;#感受&quot; class=&quot;headerlink&quot; title=&quot;感受&quot;&gt;&lt;/a&gt;感受&lt;/h2&gt;&lt;p&gt;不得不承认一开始想 DIY 个列表还是有装逼嫌疑的，但后来发现还是 DIY 来的爽，好多事情都掌握在自己手里，批量请求数据也更方便（虽说直接用 &lt;code&gt;UICollectionView&lt;/code&gt; 也可以办到，只是有些绕，且依然得自己实现 &lt;code&gt;UIScrollViewDelegate&lt;/code&gt;）。最大的收获就是对 &lt;code&gt;UIScrollView&lt;/code&gt; 的理解更深刻，对 &lt;code&gt;UITableView&lt;/code&gt; 的实现机制有了掌握。&lt;/p&gt;
&lt;p&gt;还有就是在做之前把一些事情想的太简单了，然后开始动工后就会发现：卧槽还真就是这么简单！23333333&lt;/p&gt;
&lt;p&gt;其实还是遇到了一些项目中的 API 上的坑的，比如工程里的异步加载图片 ImageView 会忽略第二次相同的 url 请求，导致调试时花了些时间。&lt;/p&gt;
&lt;p&gt;曾经还设想把可重用的范围扩大到整个屏幕，也就是屏幕上所有横向滑动的 &lt;code&gt;ListView&lt;/code&gt; 全都共用一个可重用列表。但后来计算一下这样做收益不高，毕竟横向滑动的 &lt;code&gt;ListView&lt;/code&gt; 在正常滑动时可重用列表中会有一到两个 &lt;code&gt;ItemView&lt;/code&gt; 对象，而全屏最多同时存在 5 个 &lt;code&gt;ListView&lt;/code&gt;，节省的内存很有限。&lt;/p&gt;
&lt;p&gt;其实还有许多细节实现没有叙述，比如记录 &lt;code&gt;ListView&lt;/code&gt; 上次横向滑动位置，因为 &lt;code&gt;ListView&lt;/code&gt; 是加在全屏 TableView 的每个 cell 中，而 cell 也是重用的，所以上次滑动偏移是需要每次 cell 消失时记录和 cell 出现时刷新的。&lt;/p&gt;
&lt;p&gt;在公司项目用了快半年的 MRC，有时还要切换到 ARC 做做其他事情，或者来一发 Swift 玩票儿，真是一种奇(dan)妙(teng)的体验。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;公司项目中有个页面是双向滑动的列表，遂用 &lt;code&gt;UIScrollView&lt;/code&gt; 手撸了之，把一些 UI 和数据上的心得记录下来。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多媒体编辑模块架构设计</title>
    <link href="http://yulingtianxia.com/blog/2016/12/29/Multimedia-Edit-Module-Architecture-Design/"/>
    <id>http://yulingtianxia.com/blog/2016/12/29/Multimedia-Edit-Module-Architecture-Design/</id>
    <published>2016-12-29T01:37:04.000Z</published>
    <updated>2016-12-28T15:48:23.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要讲了下我在工作时对项目中多媒体编辑模块的架构设计心得，并剖析了一部分原理。目前框架主流程已经验证跑通，所以把一些关键的思想和概念记录下来。涉及到公司机密的已经略去，只说说思想，代码也就不公开了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;多媒体编辑模块重构概要&quot;&gt;&lt;a href=&quot;#多媒体编辑模块重构概要&quot; class=&quot;headerlink&quot; title=&quot;多媒体编辑模块重构概要&quot;&gt;&lt;/a&gt;多媒体编辑模块重构概要&lt;/h2&gt;&lt;p&gt;多媒体编辑包含了对图片和视频的编辑，比如在某个位置添加一些图片或者涂鸦等操作。这里讲的其实是一个跟移动端平台无关的架构，包含了操作面板组件化、手势引擎、业务解耦等内容。具体对图片和视频等内容的渲染等操作不做讨论。&lt;/p&gt;
&lt;p&gt;这里设想的场景是：用户录制好一段视频或拍照后进入编辑模块，编辑面板下方有几个按钮，点击后可以进入某种编辑模式，比如添加文字、表情、涂鸦、音乐等编辑功能。右下角会有个发表按钮，左上角有个重拍按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/原型.png&quot; alt=&quot;原型&quot;&gt;&lt;/p&gt;
&lt;p&gt;设计一个模块首先要明确它的职责，输入和输出都是什么。多媒体编辑简介如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/简介.png&quot; alt=&quot;简介&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件化总体设计&quot;&gt;&lt;a href=&quot;#组件化总体设计&quot; class=&quot;headerlink&quot; title=&quot;组件化总体设计&quot;&gt;&lt;/a&gt;组件化总体设计&lt;/h2&gt;&lt;p&gt;在明确了多媒体编辑模块的本质是 UI 操作面板后，首先要从视图层级入手，设计好整个模块各职责对应的层级，并兼顾触摸事件的传递。在视图层级交互策略设计好后，就可以进行 UML 的设计了。这次，要拒绝不规范的编程习惯，并对耦合几乎零容忍！将编辑组件与 EditView 解耦，把一些基础逻辑抽象出来，与具体业务剥离开。减少了多人改同一份代码带来的风险，并能更快定位bug来源。&lt;/p&gt;
&lt;h3 id=&quot;视图层级图&quot;&gt;&lt;a href=&quot;#视图层级图&quot; class=&quot;headerlink&quot; title=&quot;视图层级图&quot;&gt;&lt;/a&gt;视图层级图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/框架总体视图层级设计.png&quot; alt=&quot;框架总体视图层级设计&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;UML-架构图&quot;&gt;&lt;a href=&quot;#UML-架构图&quot; class=&quot;headerlink&quot; title=&quot;UML 架构图&quot;&gt;&lt;/a&gt;UML 架构图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/多媒体编辑重构UML.png&quot; alt=&quot;多媒体编辑重构UML&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;手势识别引擎&quot;&gt;&lt;a href=&quot;#手势识别引擎&quot; class=&quot;headerlink&quot; title=&quot;手势识别引擎&quot;&gt;&lt;/a&gt;手势识别引擎&lt;/h2&gt;&lt;p&gt;手势引擎既要『大一统』式地管理，又要与具体响应手势的元素视图进行解耦，做法就是统一接口，制定标准。所有想响应手势的视图都需要继承 &lt;code&gt;InteractionElementView&lt;/code&gt; 或者将其作为 &lt;code&gt;parentView&lt;/code&gt;。可以配置元素对象来实现对手势响应的规则，更加灵活自如，而且零耦合。有关手势命中区域的计算方法请阅读我之前发表的一篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2016/08/29/Some-Experience-of-Gesture/&quot;&gt;处理手势冲突和错乱的一点经验&lt;/a&gt;，我在这里详细阐述了各种情形下的手势命中计算方法。下图为手势识别引擎策略的流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/手势识别引擎.png&quot; alt=&quot;手势识别引擎&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件设计&quot;&gt;&lt;a href=&quot;#组件设计&quot; class=&quot;headerlink&quot; title=&quot;组件设计&quot;&gt;&lt;/a&gt;组件设计&lt;/h2&gt;&lt;h3 id=&quot;组件与元素&quot;&gt;&lt;a href=&quot;#组件与元素&quot; class=&quot;headerlink&quot; title=&quot;组件与元素&quot;&gt;&lt;/a&gt;组件与元素&lt;/h3&gt;&lt;p&gt;组件的 &lt;code&gt;baseZIndex&lt;/code&gt; 定义了组件所创建元素的 &lt;code&gt;zIndex&lt;/code&gt; 的基础值。元素容器会有一个计数器 &lt;code&gt;nextZIndexOfElement&lt;/code&gt;，每次获取时会自动加一。所以元素的 &lt;code&gt;zIndex&lt;/code&gt; 等于 &lt;code&gt;baseZIndex&lt;/code&gt; 与 &lt;code&gt;nextZIndexOfElement&lt;/code&gt; 之和。&lt;/p&gt;
&lt;p&gt;之所以要给元素定义 &lt;code&gt;zIndex&lt;/code&gt; 这个属性是考虑到某些元素可能会在元素容器与组件容器之间切换层级。比如文字元素就是这种例子。所以当某个元素重新添加到元素容器后，元素容器需要根据每个元素的 &lt;code&gt;zIndex&lt;/code&gt; 属性来重新排序层级顺序。&lt;/p&gt;
&lt;h3 id=&quot;组件与-EditView&quot;&gt;&lt;a href=&quot;#组件与-EditView&quot; class=&quot;headerlink&quot; title=&quot;组件与 EditView&quot;&gt;&lt;/a&gt;组件与 EditView&lt;/h3&gt;&lt;p&gt;组件不是必须要向 &lt;code&gt;MultimediaEditView&lt;/code&gt; 中的元素容器中添加元素的，它也可以不创建任何元素，而是直接操作多媒体资源（比如选择一些滤镜），也可以是做些其他事情，比如保存多媒体资源到本地。&lt;strong&gt;&lt;code&gt;MultimediaEditView&lt;/code&gt; 只是给组件提供了一个操作入口，而组件为 &lt;code&gt;MultimediaEditView&lt;/code&gt; 提供了很强的拓展性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;组件与数据&quot;&gt;&lt;a href=&quot;#组件与数据&quot; class=&quot;headerlink&quot; title=&quot;组件与数据&quot;&gt;&lt;/a&gt;组件与数据&lt;/h3&gt;&lt;p&gt;每个组件都有自己唯一的 ID，默认是类名。组件的按钮被点击后，会将自己设为 &lt;code&gt;currentEditComponent&lt;/code&gt;，&lt;code&gt;MultimediaEditView&lt;/code&gt; 会调用上一个组件的 &lt;code&gt;stop&lt;/code&gt; 方法，然后调用新组件的 &lt;code&gt;start&lt;/code&gt; 方法。组件在 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法中完成组件内容的装载和卸载。组件产生的用户数据可以存放在 &lt;code&gt;componentInfos&lt;/code&gt; 中，可用于之后的发表等流程。&lt;code&gt;reset&lt;/code&gt; 方法用于清除组件数据以及持有的状态和元素。继承于 &lt;code&gt;MultimediaEditComponent&lt;/code&gt; 的子类需要覆写这些主要的方法。组件也可以直接操作多媒体资源，所以也可能会跟其他模块有数据流动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/组件的数据流动.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;业务方&quot;&gt;&lt;a href=&quot;#业务方&quot; class=&quot;headerlink&quot; title=&quot;业务方&quot;&gt;&lt;/a&gt;业务方&lt;/h2&gt;&lt;p&gt;具体的业务一般是需要继承 &lt;code&gt;MultimediaEditView&lt;/code&gt; 加入一些自己特有的逻辑，并在自己的 ViewController 创建和注册组件。如果某个业务需要对具体的组件进行个性化修改，我建议具体的组件也需要再继承一下。如果以后所有业务统一组件的行为，那也可以再把之前子类的逻辑迁移回基类。这样做的好处是避免某个业务直接修改基类影响到所有业务的风险，之前就有过先例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/业务方的使用.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲了下我在工作时对项目中多媒体编辑模块的架构设计心得，并剖析了一部分原理。目前框架主流程已经验证跑通，所以把一些关键的思想和概念记录下来。涉及到公司机密的已经略去，只说说思想，代码也就不公开了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yulingtianxia.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>pbxprojHelper--Xcode工程文件助手</title>
    <link href="http://yulingtianxia.com/blog/2016/11/28/pbxprojHelper/"/>
    <id>http://yulingtianxia.com/blog/2016/11/28/pbxprojHelper/</id>
    <published>2016-11-27T16:03:08.000Z</published>
    <updated>2016-11-27T17:32:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt; 可以帮你快速配置 Xcode 工程文件，省去麻烦的人工手动操作。项目开源，使用 Swift 开发，详细介绍请见&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用说明&lt;/a&gt;。除了 Mac App 外还提供了命令行工具 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/releases/download/1.1.3/pbxproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;pbxproj&lt;/code&gt;&lt;/a&gt;，它集成了 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt; 的核心功能，同样简易实用。&lt;/p&gt;
&lt;p&gt;因为 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README_ZH&lt;/a&gt; 中对使用方法已经讲得很详细了，这里重点说的是产品方案和技术实现。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;产品方案&quot;&gt;&lt;a href=&quot;#产品方案&quot; class=&quot;headerlink&quot; title=&quot;产品方案&quot;&gt;&lt;/a&gt;产品方案&lt;/h2&gt;&lt;h3 id=&quot;为什么造这个工具？&quot;&gt;&lt;a href=&quot;#为什么造这个工具？&quot; class=&quot;headerlink&quot; title=&quot;为什么造这个工具？&quot;&gt;&lt;/a&gt;为什么造这个工具？&lt;/h3&gt;&lt;p&gt;在开发公司的项目时，check out 代码到本地后需要修改工程文件。比如更改证书和 Bundle Identifier、删除一些编译不过的 Target，修改 Build Settings 等配置。重复手动修改这些配置的场景很多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次 check out 新的分支，需要使用自己的配置。&lt;/li&gt;
&lt;li&gt;增删代码文件前会先 revert project.pbxproj 文件，修改完成后再 commit。此时本地工程文件需要重新配置。&lt;/li&gt;
&lt;li&gt;没有增删代码文件但 project.pbxproj 文件有冲突（conflict），需要先 revert 后重新配置工程文件。&lt;/li&gt;
&lt;li&gt;一些自动化流程（比如 CI）每次执行都需要特定的编译选项和证书来编包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而我本人最常遇到的场景是 1 和 2，因为不能用公司的证书配置来编译，一些跟苹果开发者账号相关的功能导致一些 target 编译不过，还有些 debug 模式下需要设置的编译选项。所以每次都需要手动修改 Xcode 工程配置，很是麻烦。&lt;/p&gt;
&lt;h3 id=&quot;需求！&quot;&gt;&lt;a href=&quot;#需求！&quot; class=&quot;headerlink&quot; title=&quot;需求！&quot;&gt;&lt;/a&gt;需求！&lt;/h3&gt;&lt;p&gt;可以说开发这个工具一开始完全就是为了解决我个人的痛点的，基本没考虑做成功能强大的通用工具。虽然做的事情比较小众，但也能满足一批苹果开发者的需求了。我把需求分为以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将程序员对工程文件做出的配置修改记录下来，并保存成 JSON 文件&lt;/li&gt;
&lt;li&gt;下次使用时直接导入 JSON 文件，将配置修改应用到当前的工程文件上&lt;/li&gt;
&lt;li&gt;支持回滚操作&lt;/li&gt;
&lt;li&gt;支持工程文件内容的预览、过滤&lt;/li&gt;
&lt;li&gt;快速切换最近使用的工程&lt;/li&gt;
&lt;li&gt;提供命令行工具&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以说 1 和 2 是刚需，也是常用功能。3、4 和 5 是辅助功能，6 是附加需求。我平时最常碰到的需求点就是 2 和 5 了。&lt;/p&gt;
&lt;h2 id=&quot;技术实现&quot;&gt;&lt;a href=&quot;#技术实现&quot; class=&quot;headerlink&quot; title=&quot;技术实现&quot;&gt;&lt;/a&gt;技术实现&lt;/h2&gt;&lt;p&gt;关于 Xcode 工程文件的介绍，请参考我之前写的 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/&quot;&gt;Let’s Talk About project.pbxproj&lt;/a&gt;。本篇文章可以算作是它的续集。&lt;/p&gt;
&lt;p&gt;我把工程文件相关的底层方法都封装在 &lt;code&gt;PropertyListHandler&lt;/code&gt; 类中，它们跟界面无关。还有一些工具类和方法写到 &lt;code&gt;Utils&lt;/code&gt; 文件中。&lt;/p&gt;
&lt;h3 id=&quot;对比工程文件&quot;&gt;&lt;a href=&quot;#对比工程文件&quot; class=&quot;headerlink&quot; title=&quot;对比工程文件&quot;&gt;&lt;/a&gt;对比工程文件&lt;/h3&gt;&lt;p&gt;想要记录工程文件的修改是很难的，所以只能是比较下两个工程文件的差异。这里不是对比文件那种简单的 &lt;code&gt;diff&lt;/code&gt; 操作，而是要记录具体针对哪个配置项做了『增删改』。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工程文件的内容可以比作一颗多叉树，的根节点是字典，其余中间节点都是字典的键。数组的元素肯定是字符串（叶子节点），字典的键值对则可能继续拓展出子树，也可能是叶子节点。&lt;/strong&gt;在拿到两个工程文件的数据后，就需要对两棵树的每个层级进行对比。对比两颗树的差异算法不难实现，核心思想是：&lt;strong&gt;在对比中间节点时，如果内容相同那就递归比较下一层，否则就记为『增』或『删』&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而比较同一层级中间节点的差异，直接用 &lt;code&gt;Set&lt;/code&gt; 是最方便的了。我将两棵树的差异保存在字典 &lt;code&gt;difference&lt;/code&gt; 中，在内嵌方法中又实现了个尾递归。递归过程中需要记录中间节点作为路径，因为生成的路径需要保存到对比结果中。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 将 project 与 other project 做比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter project1: 作为比较的 project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter project2: 被参照的 project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - returns: project1 相对于 project2 的变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project1&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;], &lt;span class=&quot;title&quot;&gt;withOtherProject&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project2&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;]) -&amp;gt; &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; difference = [&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;](), &lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;](), &lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;]()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// 将两个数据对象作递归比较，将最深层次节点的差异保存到 difference 中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// - Parameters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///   - data1: 第一个数据对象，数组或字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///   - data2: 第二个数据对象，数组或字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///   - parentKeyPath: 父路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data data1: Any?, withOtherData data2: Any?, parentKeyPath: String)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dictionary1 = data1 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;], &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dictionary2 = data2 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set1 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(dictionary1.keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set2 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(dictionary2.keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set1.subtracting(set2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = dictionary1[key], difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = [key: value]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = dictionary1[key], &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; insertDictionary = difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    insertDictionary[key] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = insertDictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set2.subtracting(set1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = [key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; removeArray = difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    removeArray.append(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = removeArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set1.intersection(set2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; keyPath = parentKeyPath == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ? key : &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(parentKeyPath)&lt;/span&gt;.&lt;span class=&quot;subst&quot;&gt;\(key)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// values are both String, leaf node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str1 = dictionary1[key] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str2 = dictionary2[key] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; str1 != str2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        difference[&lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt;]?[keyPath] = str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// continue compare subtrees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    compare(data: dictionary1[key], withOtherData: dictionary2[key], parentKeyPath: keyPath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array1 = data1 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;], &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array2 = data2 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set1 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(array1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set2 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(array2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set1.subtracting(set2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = [element]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; insertArray = difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    insertArray.append(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = insertArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set2.subtracting(set1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = [element]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; removeArray = difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    removeArray.append(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = removeArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compare(data: project1, withOtherData: project2, parentKeyPath: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; difference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段看似很长的代码其实逻辑超级简单，就是分别针对字典和数组两种情况进行比较而已，弱智的一逼。需要注意的是数组内容作为叶子节点，只存在『增』和『删』两种情况。&lt;/p&gt;
&lt;p&gt;每次递归都将 &lt;code&gt;parentKeyPath&lt;/code&gt; 与当前节点的值 &lt;code&gt;key&lt;/code&gt; 用 &lt;code&gt;.&lt;/code&gt; 拼接在一起。也就是说最后得到的路径是 &lt;code&gt;A.B.C&lt;/code&gt; 这种格式。&lt;/p&gt;
&lt;p&gt;可以看出生成的对比结果是个字典，包含三个键值对，键分别是 &lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;modify&lt;/code&gt;，值为字典。&lt;/p&gt;
&lt;h3 id=&quot;应用-JSON-配置&quot;&gt;&lt;a href=&quot;#应用-JSON-配置&quot; class=&quot;headerlink&quot; title=&quot;应用 JSON 配置&quot;&gt;&lt;/a&gt;应用 JSON 配置&lt;/h3&gt;&lt;p&gt;因为生成的 JSON 配置文件具有一定格式，所以必须按照格式规则来应用这些配置到工程文件中。最关键的是在上一步中生成的路径格式为 &lt;code&gt;A.B.C&lt;/code&gt;，且路径内容是未知的，需要实时处理。所以我写了个方法来解析路径，步入到路径最底层后提供闭包来对路径的值进行修改。假设 &lt;code&gt;keyPath&lt;/code&gt; 为路径字符串内容，方法实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt; = keyPath.components(separatedBy: &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 假如 &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; 为 &lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt; keyPath 为 &lt;span class=&quot;string&quot;&gt;&quot;A.B.C&quot;&lt;/span&gt;，目的是让 value[A][B][C] = data。需要沿着路径深入，使用闭包修改叶子节点的数据，递归过程中逐级向上返回修改后的结果，完成整个路径上数据的更新。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - parameter &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;:    路径深度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - parameter value:    当前路径对应的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - parameter &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;: 路径终点所要做的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; 当前路径层级修改后的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func walkIn(atIndex &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;: Int, withCurrentValue value: Any, &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;: (Any) -&amp;gt; Any?) -&amp;gt; Any? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt; &amp;lt; &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dicValue = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [Strin&lt;span class=&quot;variable&quot;&gt;g:&lt;/span&gt; Any],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextValue = dicValue[key] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var resultValue = dicValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resultValue[key] = walkIn(atIndex: &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, withCurrentValue: nextValue, &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resultValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Wrong KeyPath&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法会将当前层级（&lt;code&gt;index&lt;/code&gt;）路径的节点作为键（&lt;code&gt;key&lt;/code&gt;），并查找字典中该键对应的值（&lt;code&gt;nextValue&lt;/code&gt;）。然后递归遍历下一层，直至步入到路径（&lt;code&gt;keypath&lt;/code&gt;）最末端。此时会执行传入的 &lt;code&gt;complete&lt;/code&gt; 闭包，并将结果作为该方法的返回值。这样在对路径最末端的节点值做出修改后就可以逐层同步上去，最后完成对整条路径的修改。&lt;/p&gt;
&lt;p&gt;如果能直接给 &lt;code&gt;value[A][B][C]&lt;/code&gt; 赋值就好了，但是这是不可能的。因为路径内容是未知的，这样的代码不可能写死的，只能动态地递归进去，并在调用后将修改内容返回上层。&lt;/p&gt;
&lt;p&gt;之前提到过 JSON 文件格式中包含三种命令：&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;modify&lt;/code&gt;。所以在实现 &lt;code&gt;complete&lt;/code&gt; 方法的时候需要针对这三种命令分别处理，每种命令还要区分字典和数组两种数据类型。这里处理的逻辑基本是上一步的逆逻辑，很容易理解。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 这个方法可厉（dan）害（teng）咯，把 json 配置数据应用到工程文件数据上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter json:        配置文件数据，用于对工程文件的增删改操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter projectData: 工程文件数据，project.pbxproj 的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;json&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;]], &lt;span class=&quot;title&quot;&gt;onProjectData&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;projectData&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;]) -&amp;gt; [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appliedData = projectData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历 JSON 中的三个命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (command, arguments) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; json &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;comment&quot;&gt;// 遍历每个命令中的路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (keyPath, data) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arguments &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; keys = keyPath.components(separatedBy: &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;walkIn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(atIndex index: Int, withCurrentValue value: Any, complete: &lt;span class=&quot;params&quot;&gt;(Any)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;?) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ... 此处省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 调用 `walkIn` 方法，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = walkIn(atIndex: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, withCurrentValue: appliedData, complete: &amp;#123; (value) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;? &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// value 为路径叶子节点的数据。根据 command 的不同，处理的规则也不一样：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; command &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 添加数据时 data 和 value 类型要统一，要么都是数组，要么都是字典，否则不做变更&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dictionary = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dicData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (dataKey, dataValue) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; dicData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            dictionary[dataKey] = dataValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arrayData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        array.append(contentsOf: arrayData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 移除数据时被移除的 data 为包含数据或键的数组，否则不做变更&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dictionary = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arrayData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; removeData &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arrayData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeKey = removeData &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                dictionary[removeKey] = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arrayData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; removeData &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arrayData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeIndex = removeData &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ..&amp;lt; array.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;contains&lt;/span&gt;(removeIndex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    array.remove(at: removeIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeElement = removeData &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeIndex = array.index(of: removeElement) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                array.remove(at: removeIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 直接用 data 替换 value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                appliedData = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; appliedData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 JSON 文件内容层级较深，所以需要先遍历最外面的字典。一共有三个键值对，分别对应 &lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;modify&lt;/code&gt; 三个命令（&lt;code&gt;command&lt;/code&gt;）及其参数（&lt;code&gt;arguments&lt;/code&gt;）。每种命令的参数都是由『(路径:字典或数组)』这样格式的键值对组成。路径对应的值的类型需要与 JSON 文件中一样。&lt;/p&gt;
&lt;p&gt;在遍历的同时修改工程文件数据的内容，这里使用了 Swift 的嵌套方法和尾随闭包语法。这总语法虽然用着爽，但是对代码的可读性也有所降低。&lt;/p&gt;
&lt;h3 id=&quot;操作工程文件&quot;&gt;&lt;a href=&quot;#操作工程文件&quot; class=&quot;headerlink&quot; title=&quot;操作工程文件&quot;&gt;&lt;/a&gt;操作工程文件&lt;/h3&gt;&lt;p&gt;可以用 &lt;code&gt;PropertyListSerialization&lt;/code&gt; 来（反）序列化 project.pbxproj 文件的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fileData = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; Data(contentsOf: url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; plist = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; PropertyListSerialization.propertyList(from: fileData, option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; .mutableContainersAndLeaves, forma&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; PropertyListSerialization.data(fromPropertyLis&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;, forma&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; .xml, option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; data.&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;: url, option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; .atomic)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将工程文件数据写入磁盘表面上看起来是一件再简单不过的事情，但其实这里面包含编码问题和备份机制。&lt;/p&gt;
&lt;h4 id=&quot;编码问题&quot;&gt;&lt;a href=&quot;#编码问题&quot; class=&quot;headerlink&quot; title=&quot;编码问题&quot;&gt;&lt;/a&gt;编码问题&lt;/h4&gt;&lt;p&gt;直接把工程文件数据写入文件后，中文会有乱码。需要做的是把中文内容的 Unicode 的标量值提取出并转成 numeric character reference（NCR）。”&amp;amp;#dddd” 的一串字符是 HTML、XML 等 SGML 类语言的转义序列（escape sequence），它们不是『编码』。&lt;/p&gt;
&lt;p&gt;下面的方法可以将生成的工程文件中文内容替换成 NCR：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func handleEncode(fileURL: URL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func encodeString(_ str: String) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var result = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;scalar&lt;/span&gt; in &lt;span class=&quot;comment&quot;&gt;str.unicodeScalars &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if &lt;span class=&quot;comment&quot;&gt;scalar.value &amp;gt; 0x4e00 &amp;amp;&amp;amp; scalar.value &amp;lt; 0x9fff &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result &lt;span class=&quot;comment&quot;&gt;+= String(format:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;&amp;amp;#%04d;&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;, scalar.value)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result &lt;span class=&quot;comment&quot;&gt;+= scalar.description&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;comment&quot;&gt;result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var &lt;span class=&quot;comment&quot;&gt;txt = try String(contentsOf: fileURL, encoding: .utf8)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        txt &lt;span class=&quot;comment&quot;&gt;= encodeString(txt)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &lt;span class=&quot;comment&quot;&gt;txt.write(to: fileURL, atomically: true, encoding: .utf8)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch &lt;span class=&quot;comment&quot;&gt;let error &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;translate chinese characters to mathematical symbols error: \(error.localizedDescription)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;备份机制&quot;&gt;&lt;a href=&quot;#备份机制&quot; class=&quot;headerlink&quot; title=&quot;备份机制&quot;&gt;&lt;/a&gt;备份机制&lt;/h4&gt;&lt;p&gt;既然是要生成新的工程文件来替换原来的工程文件，备份机制肯定不能少。当前的备份机制仅仅备份上次修改的文件，这是考虑到备份历史文件会占用大量磁盘的问题。比如大一些的工程文件可能占用10M 甚至更多的空间，频繁操作产生的备份会很多。&lt;/p&gt;
&lt;p&gt;在生成备份文件和使用备份文件还原时，都需要获取到当前工程文件对应的备份文件 URL。真正的主角 project.pbxproj 被包含在工程文件（夹）内部，所以要根据文件后缀名来决定如何处理。下面的私有方法会将传入的 URL 引用参数修改为真正的 project.pbxproj 文件 URL，并返回备份文件的 URL：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 返回指定文件对应的备份文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter url: 文件 URL，如果是工程文件，会被修改为 project.pbxproj 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - returns: 备份文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fileprivate class func backupURLOf(projectURL url: inout URL) -&amp;gt; URL &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; backupURL = URL(fileURLWithPath: NSHomeDirectory()).appendingPathComponent(&lt;span class=&quot;string&quot;&gt;&quot;Documents&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; url&lt;span class=&quot;selector-class&quot;&gt;.pathExtension&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;xcodeproj&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backupURL.appendPathComponent(url.lastPathComponent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backupURL.appendPathExtension(&lt;span class=&quot;string&quot;&gt;&quot;project.pbxproj&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url.appendPathComponent(&lt;span class=&quot;string&quot;&gt;&quot;project.pbxproj&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let count = url&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; count &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            backupURL.appendPathComponent(url&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;[count-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            backupURL.appendPathExtension(url&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;[count-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backupURL.appendPathExtension(&lt;span class=&quot;string&quot;&gt;&quot;backup&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return backupURL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个方法只干一件事，这个方法设计的很不好，干了两件事，别学我这么做。我这么做是为了省代码量。（狡辩，逃）&lt;/p&gt;
&lt;h3 id=&quot;预览和过滤工程文件内容&quot;&gt;&lt;a href=&quot;#预览和过滤工程文件内容&quot; class=&quot;headerlink&quot; title=&quot;预览和过滤工程文件内容&quot;&gt;&lt;/a&gt;预览和过滤工程文件内容&lt;/h3&gt;&lt;p&gt;主界面如下，在展示所有数据的同时，可以在 Filter 文本框中输入关键词来过滤数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/pbxprojHelper/master/images/MainWindow%402x.png&quot; alt=&quot;MainWindow&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h4&gt;&lt;p&gt;关于如何使用 &lt;code&gt;NSOutlineView&lt;/code&gt; 展示数据，不想多说，查文档写 UI 谁都会。&lt;/p&gt;
&lt;p&gt;我定义了一个数据结构 &lt;code&gt;Item&lt;/code&gt; 来表示 &lt;code&gt;NSOutlineView&lt;/code&gt; 中每行节点的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typealias &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt; = (key: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, value: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;, parent: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;?)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为有了 &lt;code&gt;parent&lt;/code&gt; 指向父节点，可以递归搜寻到某个 &lt;code&gt;Item&lt;/code&gt; 对象所处的路径（&lt;code&gt;keypath&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forItem item: Any?)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; key: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; parent: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tupleItem = item &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        key = tupleItem.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = tupleItem.parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        key = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; parentItem = parent &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(keyPath(forItem: parentItem)&lt;/span&gt;).&lt;span class=&quot;subst&quot;&gt;\(key)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(key)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以实现双击某行数据时，自动将当前数据的路径写入 Pasteboard 中。&lt;/p&gt;
&lt;h4 id=&quot;过滤&quot;&gt;&lt;a href=&quot;#过滤&quot; class=&quot;headerlink&quot; title=&quot;过滤&quot;&gt;&lt;/a&gt;过滤&lt;/h4&gt;&lt;p&gt;过滤关键字的重点就是判断一个 &lt;code&gt;Item&lt;/code&gt; 及其子节点中是否包含此关键字，此时需要依然是需要 DFS 递归查找关键字。&lt;/p&gt;
&lt;p&gt;查找关键字需要忽略大小写：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;func &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: Any, containsString &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;: String&lt;/span&gt;) -&amp;gt; Bool &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; String) &amp;amp;&amp;amp; (&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! String).lowercased().contains(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.lowercased()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;递归查找很容易实现，只不过区分下数组和字典罢了：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;func &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;propertyList list: Any&lt;/span&gt;) -&amp;gt; Bool &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dictionary = list &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [String: Any] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; dictionary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: key, containsString: word&lt;/span&gt;) || &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, containsString: word&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;propertyList: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array = list &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [Any] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, containsString: word&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;propertyList: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后经过方法嵌套拼装成如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; item: Any, containsKeyWord word: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tupleItem = item &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; checkAny(value: tupleItem.key, containsString: word) || checkAny(value: tupleItem.value, containsString: word) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(propertyList list: Any)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;comment&quot;&gt;/// 此处省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dfs(propertyList: tupleItem.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;快速切换工程文件&quot;&gt;&lt;a href=&quot;#快速切换工程文件&quot; class=&quot;headerlink&quot; title=&quot;快速切换工程文件&quot;&gt;&lt;/a&gt;快速切换工程文件&lt;/h3&gt;&lt;p&gt;下拉列表的 UI 实现很简单，就是一个 &lt;code&gt;NSView&lt;/code&gt; 里面放几个 &lt;code&gt;NSTextField&lt;/code&gt;。维护常用工程文件列表需要在每次用户选择工程文件后将其加入列表，实现 LRU 算法。&lt;/p&gt;
&lt;p&gt;这里对 LRU 缓存的需求跟 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/02/27/TFSHelper/#缓存常用链接&quot;&gt;自制一款 Mac 平台 URL 辅助工具&lt;/a&gt; 这篇文章中的 TFSHelper 的是一样的。我直接把代码搬过来了。我将其放到 Github Gist 上了，可能需要科学上网：&lt;a href=&quot;https://gist.github.com/yulingtianxia/5d61afdb241dcd5562b211cb485883fa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LRUCache&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下拉列表的点击操作交由 &lt;code&gt;NSClickGestureRecognizer&lt;/code&gt; 捕获处理。&lt;/p&gt;
&lt;h3 id=&quot;构造命令行工具&quot;&gt;&lt;a href=&quot;#构造命令行工具&quot; class=&quot;headerlink&quot; title=&quot;构造命令行工具&quot;&gt;&lt;/a&gt;构造命令行工具&lt;/h3&gt;&lt;p&gt;为了尽可能精简命令行的使用复杂度，我只把最核心的功能封装进去，一共只有这几个命令：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: pbxproj [command_option] &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command options are (-convert &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-compare modified_file -o path          compare modified &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; generate a json &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;given&lt;/span&gt; path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-apply json_file                        apply a json &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-revert                                 revert &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; latest backup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-convert                                rewrite &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xml format&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入的这些参数都需要自己去处理，由此会产生大量条件判断，好在我的不算复杂。需要注意的是参数列表第一个是程序名称（路径）。&lt;/p&gt;
&lt;p&gt;在 terminal 中执行 Swift 文件时获取参数内容的方式变了好多次，一开始是 &lt;code&gt;C_ARGC&lt;/code&gt; 和 &lt;code&gt;C_ARGV&lt;/code&gt;，到了 Swift 1.2 只能使用 &lt;code&gt;Process.arguments&lt;/code&gt;，到了 Swift 3 又变了，必须用 &lt;code&gt;CommandLine.arguments&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拿到了参数后，我所做的事情只是调用 &lt;code&gt;PropertyListHandler&lt;/code&gt; 中已经封装好的工具方法罢了。&lt;/p&gt;
&lt;p&gt;不是所有的人都会把 Swift 文件当做脚本去执行，所以还需要创建个 target，打包成可执行程序，这样就不依赖 Swift 命令了。&lt;/p&gt;
&lt;h2 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h2&gt;&lt;p&gt;我使用 pbxprojHelper 的频率十分高，因为开发同一项目的人很多，svn 的分支也多。第一次生成好我的 JSON 配置文件后以后就几乎不用再生成了，不同分支的工程都可以共用这一个 JSON 配置。每次因为种种原因 revert 了 project.pbxproj 文件后，我都可以用它一键配置好我的工程文件，&lt;strong&gt;节省了至少 90% 的时间！&lt;/strong&gt;即便换了个其他分支的工程，也可以在常用列表中迅速切换，不用再次 select 文件。&lt;/p&gt;
&lt;p&gt;也正是在一次次的使用中发现了若干 bug 和体验问题，然后不断改进和完善。&lt;/p&gt;
&lt;h2 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; title=&quot;感悟&quot;&gt;&lt;/a&gt;感悟&lt;/h2&gt;&lt;p&gt;这个项目从开始构思需求到完成基本功能花费了我大概一周的业余时间。&lt;/p&gt;
&lt;p&gt;前期调研做了些准备工作后觉得还是有可行性的，并对部分功能需求做了妥协。比如记录工程文件修改内容需要对比新旧两个文件，这就要求使用者先把工程文件保存一份，然后再修改，最后使用 pbxprojHelper 对比两个工程文件的差异。最后生成工程文件的环节也做了妥协，因为无法将数据以 OpenStep 格式写入文件，除非调用 Xcode 私有框架 &lt;code&gt;touch&lt;/code&gt; 下工程文件。所以需要用户用 Xcode 打开工程后随意修改下工程再复原即可。就是在这样一次次对功能的妥协下，使得方案的看似不可行变得可行。&lt;/p&gt;
&lt;p&gt;这个项目的需求一开始并不明确，是在摸索中一点点确立的。比如一开始根本没有想到过要把修改保存成 JSON 文件，之后想的是让用户手动创建和编写 JSON 配置文件，再之后想的是自动生成 JSON 配置文件。在制定 JSON 配置的内容规则上也是调整了一阵子，几经修改最后定稿。所以说，产品经理下次改需求的时候可以适当理解下，毕竟产品成型的确需要个过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摸着石头过河的感觉虽然忐忑，但是我更享受攻城略地般的快感。&lt;/strong&gt;当时在开发的过程中遇到了一个个难题，当时连自己也不知道能否搞定，很有可能半途而废。但最终还是通过制定策略和实现算法实现了，虽然算法都挺简单并不难，但是能有针对性地给出一些解决方案还是比较有成就感的。&lt;/p&gt;
&lt;p&gt;作为一款给自己量身打造的玩票工具，使用 Swift 来开发看起来是当今标配，理所当然。也是趁着玩票的机会温（chong）习（xue）下 Swift，毕竟平时一直用 OC 写 MRC 代码，生怕落后于这个时代。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot;&gt;pbxprojHelper&lt;/a&gt; 可以帮你快速配置 Xcode 工程文件，省去麻烦的人工手动操作。项目开源，使用 Swift 开发，详细介绍请见&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot;&gt;使用说明&lt;/a&gt;。除了 Mac App 外还提供了命令行工具 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/releases/download/1.1.3/pbxproj&quot;&gt;&lt;code&gt;pbxproj&lt;/code&gt;&lt;/a&gt;，它集成了 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot;&gt;pbxprojHelper&lt;/a&gt; 的核心功能，同样简易实用。&lt;/p&gt;
&lt;p&gt;因为 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot;&gt;README_ZH&lt;/a&gt; 中对使用方法已经讲得很详细了，这里重点说的是产品方案和技术实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Xcode" scheme="http://yulingtianxia.com/tags/Xcode/"/>
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>优化 App 的启动时间</title>
    <link href="http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/"/>
    <id>http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/</id>
    <published>2016-10-30T05:11:10.000Z</published>
    <updated>2016-10-31T15:19:52.000Z</updated>
    
    <content type="html">&lt;p&gt;这是一篇 WWDC 2016 Session 406 的学习笔记，从原理到实践讲述了如何优化 App 的启动时间。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;App-运行理论&quot;&gt;&lt;a href=&quot;#App-运行理论&quot; class=&quot;headerlink&quot; title=&quot;App 运行理论&quot;&gt;&lt;/a&gt;App 运行理论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt; 执行前发生的事&lt;/li&gt;
&lt;li&gt;Mach-O 格式&lt;/li&gt;
&lt;li&gt;虚拟内存基础&lt;/li&gt;
&lt;li&gt;Mach-O 二进制的加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;理论速成&quot;&gt;&lt;a href=&quot;#理论速成&quot; class=&quot;headerlink&quot; title=&quot;理论速成&quot;&gt;&lt;/a&gt;理论速成&lt;/h3&gt;&lt;h4 id=&quot;Mach-O-术语&quot;&gt;&lt;a href=&quot;#Mach-O-术语&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 术语&quot;&gt;&lt;/a&gt;Mach-O 术语&lt;/h4&gt;&lt;p&gt;Mach-O 是针对不同运行时可执行文件的文件类型。 &lt;/p&gt;
&lt;p&gt;文件类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executable： 应用的主要二进制&lt;/li&gt;
&lt;li&gt;Dylib： 动态链接库（又称 DSO 或 DLL）&lt;/li&gt;
&lt;li&gt;Bundle： 不能被链接的 Dylib，只能在运行时使用 &lt;code&gt;dlopen()&lt;/code&gt; 加载，可当做 macOS 的插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Image： executable，dylib 或 bundle&lt;br&gt;Framework： 包含 Dylib 以及资源文件和头文件的文件夹&lt;/p&gt;
&lt;h4 id=&quot;Mach-O-镜像文件&quot;&gt;&lt;a href=&quot;#Mach-O-镜像文件&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 镜像文件&quot;&gt;&lt;/a&gt;Mach-O 镜像文件&lt;/h4&gt;&lt;p&gt;Mach-O 被划分成一些 segement，每个 segement 又被划分成一些 section。&lt;/p&gt;
&lt;p&gt;segment 的名字都是大写的，且空间大小为页的整数。页的大小跟硬件有关，在 arm64 架构一页是 16KB，其余为 4KB。&lt;/p&gt;
&lt;p&gt;section 虽然没有整数倍页大小的限制，但是 section 之间不会有重叠。&lt;/p&gt;
&lt;p&gt;几乎所有 Mach-O 都包含这三个段（segment）： &lt;code&gt;__TEXT&lt;/code&gt;,&lt;code&gt;__DATA&lt;/code&gt; 和 &lt;code&gt;__LINKEDIT&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__TEXT&lt;/code&gt; 包含 Mach header，被执行的代码和只读常量（如C 字符串）。只读可执行（r-x）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__DATA&lt;/code&gt; 包含全局变量，静态变量等。可读写（rw-）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__LINKEDIT&lt;/code&gt; 包含了加载程序的『元数据』，比如函数的名称和地址。只读（r–）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Mach-O-Universal-文件&quot;&gt;&lt;a href=&quot;#Mach-O-Universal-文件&quot; class=&quot;headerlink&quot; title=&quot;Mach-O Universal 文件&quot;&gt;&lt;/a&gt;Mach-O Universal 文件&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fat_binary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FAT 二进制&lt;/a&gt;文件，将多种架构的 Mach-O 文件合并而成。它通过 Fat Header 来记录不同架构在文件中的偏移量，Fat Header 占一页的空间。&lt;/p&gt;
&lt;p&gt;按分页来存储这些 segement 和 header 会浪费空间，但这有利于虚拟内存的实现。&lt;/p&gt;
&lt;h4 id=&quot;虚拟内存&quot;&gt;&lt;a href=&quot;#虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;虚拟内存&quot;&gt;&lt;/a&gt;虚拟内存&lt;/h4&gt;&lt;p&gt;虚拟内存就是一层间接寻址（indirection）。软件工程中有句格言就是任何问题都能通过添加一个间接层来解决。虚拟内存解决的是管理所有进程使用物理 RAM 的问题。通过添加间接层来让每个进程使用逻辑地址空间，它可以映射到 RAM 上的某个物理页上。这种映射不是一对一的，逻辑地址可能映射不到 RAM 上，也可能有多个逻辑地址映射到同一个物理 RAM 上。针对第一种情况，当进程要存储逻辑地址内容时会触发 page fault；第二种情况就是多进程共享内存。&lt;/p&gt;
&lt;p&gt;对于文件可以不用一次性读入整个文件，可以使用分页映射（&lt;code&gt;mmap()&lt;/code&gt;）的方式读取。也就是把文件某个片段映射到进程逻辑内存的某个页上。当某个想要读取的页没有在内存中，就会触发 page fault，内核只会读入那一页，实现文件的懒加载。&lt;/p&gt;
&lt;p&gt;也就是说 Mach-O 文件中的 &lt;code&gt;__TEXT&lt;/code&gt; 段可以映射到多个进程，并可以懒加载，且进程之间共享内存。&lt;code&gt;__DATA&lt;/code&gt; 段是可读写的。这里使用到了 Copy-On-Write 技术，简称 COW。也就是多个进程共享一页内存空间时，一旦有进程要做写操作，它会先将这页内存内容复制一份出来，然后重新映射逻辑地址到新的 RAM 页上。也就是这个进程自己拥有了那页内存的拷贝。这就涉及到了 clean/dirty page 的概念。dirty page 含有进程自己的信息，而 clean page 可以被内核重新生成（重新读磁盘）。所以 dirty page 的代价大于 clean page。&lt;/p&gt;
&lt;h4 id=&quot;Mach-O-镜像-加载&quot;&gt;&lt;a href=&quot;#Mach-O-镜像-加载&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 镜像 加载&quot;&gt;&lt;/a&gt;Mach-O 镜像 加载&lt;/h4&gt;&lt;p&gt;所以在多个进程加载 Mach-O 镜像时 &lt;code&gt;__TEXT&lt;/code&gt; 和  &lt;code&gt;__LINKEDIT&lt;/code&gt; 因为只读，都是可以共享内存的。而 &lt;code&gt;__DATA&lt;/code&gt; 因为可读写，就会产生 dirty page。当 dyld 执行结束后，&lt;code&gt;__LINKEDIT&lt;/code&gt; 就没用了，对应的内存页会被回收。&lt;/p&gt;
&lt;h4 id=&quot;安全&quot;&gt;&lt;a href=&quot;#安全&quot; class=&quot;headerlink&quot; title=&quot;安全&quot;&gt;&lt;/a&gt;安全&lt;/h4&gt;&lt;p&gt;ASLR（Address Space Layout Randomization）：地址空间布局随机化，镜像会在随机的地址上加载。这其实是一二十年前的旧技术了。&lt;/p&gt;
&lt;p&gt;代码签名：可能我们认为 Xcode 会把整个文件都做加密 hash 并用做数字签名。其实为了在运行时验证 Mach-O 文件的签名，并不是每次重复读入整个文件，而是把每页内容都生成一个单独的加密散列值，并存储在 &lt;code&gt;__LINKEDIT&lt;/code&gt; 中。这使得文件每页的内容都能及时被校验确并保不被篡改。&lt;/p&gt;
&lt;h3 id=&quot;从-exec-到-main&quot;&gt;&lt;a href=&quot;#从-exec-到-main&quot; class=&quot;headerlink&quot; title=&quot;从 exec() 到 main()&quot;&gt;&lt;/a&gt;从 &lt;code&gt;exec()&lt;/code&gt; 到 &lt;code&gt;main()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;exec()&lt;/code&gt; 是一个系统调用。系统内核把应用映射到新的地址空间，且每次起始位置都是随机的（因为使用 ASLR）。并将起始位置到 &lt;code&gt;0x000000&lt;/code&gt; 这段范围的进程权限都标记为不可读写不可执行。如果是 32 位进程，这个范围&lt;strong&gt;至少&lt;/strong&gt;是 4KB；对于 64 位进程则&lt;strong&gt;至少&lt;/strong&gt;是 4GB。NULL 指针引用和指针截断误差都是会被它捕获。&lt;/p&gt;
&lt;h3 id=&quot;dyld-加载-dylib-文件&quot;&gt;&lt;a href=&quot;#dyld-加载-dylib-文件&quot; class=&quot;headerlink&quot; title=&quot;dyld 加载 dylib 文件&quot;&gt;&lt;/a&gt;&lt;code&gt;dyld&lt;/code&gt; 加载 dylib 文件&lt;/h3&gt;&lt;p&gt;Unix 的前二十年很安逸，因为那时还没有发明动态链接库。有了动态链接库后，一个用于加载链接库的帮助程序被创建。在苹果的平台里是 &lt;code&gt;dyld&lt;/code&gt;，其他 Unix 系统也有 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Ld.so&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ld.so&lt;/code&gt;&lt;/a&gt;。 当内核完成映射进程的工作后会将名字为 &lt;code&gt;dyld&lt;/code&gt; 的Mach-O 文件映射到进程中的随机地址，它将 PC 寄存器设为 &lt;code&gt;dyld&lt;/code&gt; 的地址并运行。&lt;code&gt;dyld&lt;/code&gt; 在应用进程中运行的工作是加载应用依赖的所有动态链接库，准备好运行所需的一切，它拥有的权限跟应用一样。&lt;/p&gt;
&lt;p&gt;下面的步骤构成了 &lt;code&gt;dyld&lt;/code&gt; 的时间线：&lt;/p&gt;
&lt;p&gt;Load dylibs -&amp;gt; Rebase -&amp;gt; Bind -&amp;gt; ObjC -&amp;gt; Initializers&lt;/p&gt;
&lt;h4 id=&quot;加载-Dylib&quot;&gt;&lt;a href=&quot;#加载-Dylib&quot; class=&quot;headerlink&quot; title=&quot;加载 Dylib&quot;&gt;&lt;/a&gt;加载 Dylib&lt;/h4&gt;&lt;p&gt;从主执行文件的 header 获取到需要加载的所依赖动态库列表，而 header 早就被内核映射过。然后它需要找到每个 dylib，然后打开文件读取文件起始位置，确保它是 Mach-O 文件。接着会找到代码签名并将其注册到内核。然后在 dylib 文件的每个 segment 上调用 &lt;code&gt;mmap()&lt;/code&gt;。应用所依赖的 dylib 文件可能会再依赖其他 dylib，所以 &lt;code&gt;dyld&lt;/code&gt; 所需要加载的是动态库列表一个递归依赖的集合。一般应用会加载 100 到 400 个 dylib 文件，但大部分都是系统 dylib，它们会被预先计算和缓存起来，加载速度很快。&lt;/p&gt;
&lt;h4 id=&quot;Fix-ups&quot;&gt;&lt;a href=&quot;#Fix-ups&quot; class=&quot;headerlink&quot; title=&quot;Fix-ups&quot;&gt;&lt;/a&gt;Fix-ups&lt;/h4&gt;&lt;p&gt;在加载所有的动态链接库之后，它们只是处在相互独立的状态，需要将它们绑定起来，这就是 Fix-ups。代码签名使得我们不能修改指令，那样就不能让一个 dylib 的调用另一个 dylib。这时需要加很多间接层。&lt;/p&gt;
&lt;p&gt;现代 code-gen 被叫做动态 PIC（Position Independent Code），意味着代码可以被加载到间接的地址上。当调用发生时，code-gen 实际上会在 &lt;code&gt;__DATA&lt;/code&gt; 段中创建一个指向被调用者的指针，然后加载指针并跳转过去。&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;dyld&lt;/code&gt; 做的事情就是修正（fix-up）指针和数据。Fix-up 有两种类型，rebasing 和 binding。&lt;/p&gt;
&lt;h4 id=&quot;Rebasing-和-Binding&quot;&gt;&lt;a href=&quot;#Rebasing-和-Binding&quot; class=&quot;headerlink&quot; title=&quot;Rebasing 和 Binding&quot;&gt;&lt;/a&gt;Rebasing 和 Binding&lt;/h4&gt;&lt;p&gt;Rebasing：在镜像内部调整指针的指向&lt;br&gt;Binding：将指针指向镜像外部的内容&lt;/p&gt;
&lt;p&gt;可以通过命令行查看 rebase 和 bind 等信息：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;xcrun&lt;/span&gt; dyldinfo -rebase -&lt;span class=&quot;keyword&quot;&gt;bind &lt;/span&gt;-lazy_bind myapp.app/myapp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这个命令可以查看所有的 Fix-up。rebase，bind，weak_bind，lazy_bind 都存储在 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段中，并可通过 &lt;code&gt;LC_DYLD_INFO_ONLY&lt;/code&gt; 查看各种信息的偏移量和大小。&lt;/p&gt;
&lt;p&gt;建议用 MachOView 查看更加方便直观。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;dyld&lt;/code&gt; 源码层面简要介绍下 Rebasing 和 Binding 的流程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImageLoader&lt;/code&gt; 是一个用于加载可执行文件的基类，它负责链接镜像，但不关心具体文件格式，因为这些都交给子类去实现。每个可执行文件都会对应一个 &lt;code&gt;ImageLoader&lt;/code&gt; 实例。&lt;code&gt;ImageLoaderMachO&lt;/code&gt; 是用于加载 Mach-O 格式文件的 &lt;code&gt;ImageLoader&lt;/code&gt; 子类，而 &lt;code&gt;ImageLoaderMachOClassic&lt;/code&gt; 和 &lt;code&gt;ImageLoaderMachOCompressed&lt;/code&gt; 都继承于 &lt;code&gt;ImageLoaderMachO&lt;/code&gt;，分别用于加载那些 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段为传统格式和压缩格式的 Mach-O 文件。&lt;/p&gt;
&lt;p&gt;因为 dylib 之间有依赖关系，所以 &lt;code&gt;ImageLoader&lt;/code&gt; 中的好多操作都是沿着依赖链递归操作的，Rebasing 和 Binding 也不例外，分别对应着 &lt;code&gt;recursiveRebase()&lt;/code&gt; 和 &lt;code&gt;recursiveBind()&lt;/code&gt; 这两个方法。因为是递归，所以会自底向上地分别调用 &lt;code&gt;doRebase()&lt;/code&gt; 和 &lt;code&gt;doBind()&lt;/code&gt; 方法，这样被依赖的 dylib 总是先于依赖它的 dylib 执行 Rebasing 和 Binding。传入 &lt;code&gt;doRebase()&lt;/code&gt; 和 &lt;code&gt;doBind()&lt;/code&gt; 的参数包含一个 &lt;code&gt;LinkContext&lt;/code&gt; 上下文，存储了可执行文件的一堆状态和相关的函数。&lt;/p&gt;
&lt;p&gt;在 Rebasing 和 Binding 前会判断是否已经 Prebinding。如果已经进行过预绑定（Prebinding），那就不需要 Rebasing 和 Binding 这些 Fix-up 流程了，因为已经在预先绑定的地址加载好了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImageLoaderMachO&lt;/code&gt; 实例&lt;strong&gt;不使用预绑&lt;/strong&gt;定会有四个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mach-O Header 中 &lt;code&gt;MH_PREBOUND&lt;/code&gt; 标志位为 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;镜像加载地址有偏移（这个后面会讲到）&lt;/li&gt;
&lt;li&gt;依赖的库有变化&lt;/li&gt;
&lt;li&gt;镜像使用 flat-namespace，预绑定的一部分会被忽略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinkContext&lt;/code&gt; 的环境变量禁止了预绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ImageLoaderMachO&lt;/code&gt; 中 &lt;code&gt;doRebase()&lt;/code&gt; 做的事情大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果使用预绑定，&lt;code&gt;fgImagesWithUsedPrebinding&lt;/code&gt; 计数加一，并 &lt;code&gt;return&lt;/code&gt;;否则进入第二步&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;MH_PREBOUND&lt;/code&gt; 标志位为 &lt;code&gt;1&lt;/code&gt;（也就是可以预绑定但没使用），且镜像在共享内存中，重置上下文中所有的 lazy pointer。（如果镜像在共享内存中，稍后会在 Binding 过程中绑定，所以无需重置）&lt;/li&gt;
&lt;li&gt;如果镜像加载地址偏移量为0，则无需 Rebasing，直接 &lt;code&gt;return&lt;/code&gt;；否则进入第四步&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;rebase()&lt;/code&gt; 方法，这才是真正做 Rebasing 工作的方法。如果开启 &lt;code&gt;TEXT_RELOC_SUPPORT&lt;/code&gt; 宏，会允许 &lt;code&gt;rebase()&lt;/code&gt; 方法对 &lt;code&gt;__TEXT&lt;/code&gt; 段做写操作来对其进行 Fix-up。所以其实 &lt;code&gt;__TEXT&lt;/code&gt; 只读属性并不是绝对的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ImageLoaderMachOClassic&lt;/code&gt; 和 &lt;code&gt;ImageLoaderMachOCompressed&lt;/code&gt; 分别实现了自己的 &lt;code&gt;doRebase()&lt;/code&gt; 方法。实现逻辑大同小异，同样会判断是否使用预绑定，并在真正的 Binding 工作时判断 &lt;code&gt;TEXT_RELOC_SUPPORT&lt;/code&gt; 宏来决定是否对 &lt;code&gt;__TEXT&lt;/code&gt; 段做写操作。最后都会调用 &lt;code&gt;setupLazyPointerHandler&lt;/code&gt; 在镜像中设置 &lt;code&gt;dyld&lt;/code&gt; 的 entry point，放在最后调用是为了让主可执行文件设置好 &lt;code&gt;__dyld&lt;/code&gt; 或 &lt;code&gt;__program_vars&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Rebasing&quot;&gt;&lt;a href=&quot;#Rebasing&quot; class=&quot;headerlink&quot; title=&quot;Rebasing&quot;&gt;&lt;/a&gt;Rebasing&lt;/h4&gt;&lt;p&gt;在过去，会把 dylib 加载到指定地址，所有指针和数据对于代码来说都是对的，&lt;code&gt;dyld&lt;/code&gt; 就无需做任何 fix-up 了。如今用了 ASLR 后悔将 dylib 加载到新的随机地址(actual_address)，这个随机的地址跟代码和数据指向的旧地址(preferred_address)会有偏差，&lt;code&gt;dyld&lt;/code&gt; 需要修正这个偏差(slide)，做法就是将 dylib 内部的指针地址都加上这个偏移量，偏移量的计算方法如下：&lt;/p&gt;
&lt;p&gt;Slide = actual_address - preferred_address&lt;/p&gt;
&lt;p&gt;然后就是重复不断地对 &lt;code&gt;__DATA&lt;/code&gt; 段中需要 rebase 的指针加上这个偏移量。这就又涉及到 page fault 和 COW。这可能会产生 I/O 瓶颈，但因为 rebase 的顺序是按地址排列的，所以从内核的角度来看这是个有次序的任务，它会预先读入数据，减少 I/O 消耗。&lt;/p&gt;
&lt;h4 id=&quot;Binding&quot;&gt;&lt;a href=&quot;#Binding&quot; class=&quot;headerlink&quot; title=&quot;Binding&quot;&gt;&lt;/a&gt;Binding&lt;/h4&gt;&lt;p&gt;Binding 是处理那些指向 dylib 外部的指针，它们实际上被符号（symbol）名称绑定，也就是个字符串。之前提到 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段中也存储了需要 bind 的指针，以及指针需要指向的符号。&lt;code&gt;dyld&lt;/code&gt; 需要找到 symbol 对应的实现，这需要很多计算，去符号表里查找。找到后会将内容存储到 &lt;code&gt;__DATA&lt;/code&gt; 段中的那个指针中。Binding 看起来计算量比 Rebasing 更大，但其实需要的 I/O 操作很少，因为之前 Rebasing 已经替 Binding 做过了。&lt;/p&gt;
&lt;h4 id=&quot;ObjC-Runtime&quot;&gt;&lt;a href=&quot;#ObjC-Runtime&quot; class=&quot;headerlink&quot; title=&quot;ObjC Runtime&quot;&gt;&lt;/a&gt;ObjC Runtime&lt;/h4&gt;&lt;p&gt;Objective-C 中有很多数据结构都是靠 Rebasing 和 Binding 来修正（fix-up）的，比如 &lt;code&gt;Class&lt;/code&gt; 中指向超类的指针和指向方法的指针。&lt;/p&gt;
&lt;p&gt;ObjC 是个动态语言，可以用类的名字来实例化一个类的对象。这意味着 ObjC Runtime 需要维护一张映射类名与类的全局表。当加载一个 dylib 时，其定义的所有的类都需要被注册到这个全局表中。&lt;/p&gt;
&lt;p&gt;C++ 中有个问题叫做易碎的基类（fragile base class）。ObjC 就没有这个问题，因为会在加载时通过 fix-up 动态类中改变实例变量的偏移量。&lt;/p&gt;
&lt;p&gt;在 ObjC 中可以通过定义类别（Category）的方式改变一个类的方法。有时你想要添加方法的类在另一个 dylib 中，而不在你的镜像中（也就是对系统或别人的类动刀），这时也需要做些 fix-up。&lt;/p&gt;
&lt;p&gt;ObjC 中的 selector 必须是唯一的。&lt;/p&gt;
&lt;h4 id=&quot;Initializers&quot;&gt;&lt;a href=&quot;#Initializers&quot; class=&quot;headerlink&quot; title=&quot;Initializers&quot;&gt;&lt;/a&gt;Initializers&lt;/h4&gt;&lt;p&gt;C++ 会为静态创建的对象生成初始化器。而在 ObjC 中有个叫 &lt;code&gt;+load&lt;/code&gt; 的方法，然而它被废弃了，现在建议使用 &lt;code&gt;+initialize&lt;/code&gt;。对比详见：&lt;a href=&quot;http://stackoverflow.com/questions/13326435/nsobject-load-and-initialize-what-do-they-do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/13326435/nsobject-load-and-initialize-what-do-they-do&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在有了主执行文件，一堆 dylib，其依赖关系构成了一张巨大的有向图，那么执行初始化器的顺序是什么？自顶向上！按照依赖关系，先加载叶子节点，然后逐步向上加载中间节点，直至最后加载根节点。这种加载顺序确保了安全性，加载某个 dylib 前，其所依赖的其余 dylib 文件肯定已经被预先加载。&lt;/p&gt;
&lt;p&gt;最后 &lt;code&gt;dyld&lt;/code&gt; 会调用 &lt;code&gt;main()&lt;/code&gt; 函数。&lt;code&gt;main()&lt;/code&gt; 会调用 &lt;code&gt;UIApplicationMain()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;改善启动时间&quot;&gt;&lt;a href=&quot;#改善启动时间&quot; class=&quot;headerlink&quot; title=&quot;改善启动时间&quot;&gt;&lt;/a&gt;改善启动时间&lt;/h2&gt;&lt;p&gt;从点击 App 图标到加载 App 闪屏之间会有个动画，我们希望 App 启动速度比这个动画更快。虽然不同设备上 App 启动速度不一样，但启动时间最好控制在 400ms。需要注意的是启动时间一旦超过 20s，系统会认为发生了死循环并杀掉 App 进程。当然启动时间最好以 App 所支持的最低配置设备为准。直到 &lt;code&gt;applicationWillFinishLaunching&lt;/code&gt; 被调动，App 才启动结束。&lt;/p&gt;
&lt;h3 id=&quot;测量启动时间&quot;&gt;&lt;a href=&quot;#测量启动时间&quot; class=&quot;headerlink&quot; title=&quot;测量启动时间&quot;&gt;&lt;/a&gt;测量启动时间&lt;/h3&gt;&lt;p&gt;Warm launch: App 和数据已经在内存中&lt;br&gt;Cold launch: App 不在内核缓冲存储器中&lt;/p&gt;
&lt;p&gt;冷启动（Cold launch）耗时才是我们需要测量的重要数据，为了准确测量冷启动耗时，测量前需要重启设备。在 &lt;code&gt;main()&lt;/code&gt; 方法执行前测量是很难的，好在 &lt;code&gt;dyld&lt;/code&gt; 提供了内建的测量方法：在 Xcode 中 Edit scheme -&amp;gt; Run -&amp;gt; Auguments 将环境变量 &lt;code&gt;DYLD_PRINT_STATISTICS&lt;/code&gt; 设为 &lt;code&gt;1&lt;/code&gt;。控制台输出的内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Total pre-main &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;228.41&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;100.0%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         dylib loading &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;82.35&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;36.0%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rebase/binding &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;:   &lt;span class=&quot;number&quot;&gt;6.12&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;2.6%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ObjC setup &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;:   &lt;span class=&quot;number&quot;&gt;7.82&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;3.4%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           initializer &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;132.02&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;57.8%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           slowest intializers :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             libSystem&lt;span class=&quot;selector-class&quot;&gt;.B&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.dylib&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;122.07&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;53.4%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                CoreFoundation :   &lt;span class=&quot;number&quot;&gt;5.59&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;2.4%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;优化启动时间&quot;&gt;&lt;a href=&quot;#优化启动时间&quot; class=&quot;headerlink&quot; title=&quot;优化启动时间&quot;&gt;&lt;/a&gt;优化启动时间&lt;/h3&gt;&lt;p&gt;可以针对 App 启动前的每个步骤进行相应的优化工作。&lt;/p&gt;
&lt;h4 id=&quot;加载-Dylib-1&quot;&gt;&lt;a href=&quot;#加载-Dylib-1&quot; class=&quot;headerlink&quot; title=&quot;加载 Dylib&quot;&gt;&lt;/a&gt;加载 Dylib&lt;/h4&gt;&lt;p&gt;之前提到过加载系统的 dylib 很快，因为有优化。但加载内嵌（embedded）的 dylib 文件很占时间，所以尽可能把多个内嵌 dylib 合并成一个来加载，或者使用 static archive。使用 &lt;code&gt;dlopen()&lt;/code&gt; 来在运行时懒加载是不建议的，这么做可能会带来一些问题，并且总的开销更大。&lt;/p&gt;
&lt;h4 id=&quot;Rebase-Binding&quot;&gt;&lt;a href=&quot;#Rebase-Binding&quot; class=&quot;headerlink&quot; title=&quot;Rebase/Binding&quot;&gt;&lt;/a&gt;Rebase/Binding&lt;/h4&gt;&lt;p&gt;之前提过 Rebaing 消耗了大量时间在 I/O 上，而在之后的 Binding 就不怎么需要 I/O 了，而是将时间耗费在计算上。所以这两个步骤的耗时是混在一起的。&lt;/p&gt;
&lt;p&gt;之前说过可以从查看 &lt;code&gt;__DATA&lt;/code&gt; 段中需要修正（fix-up）的指针，所以减少指针数量才会减少这部分工作的耗时。对于 ObjC 来说就是减少 &lt;code&gt;Class&lt;/code&gt;,&lt;code&gt;selector&lt;/code&gt; 和 &lt;code&gt;category&lt;/code&gt; 这些元数据的数量。从编码原则和设计模式之类的理论都会鼓励大家多写精致短小的类和方法，并将每部分方法独立出一个类别，其实这会增加启动时间。对于 C++ 来说需要减少虚方法，因为虚方法会创建 vtable，这也会在 &lt;code&gt;__DATA&lt;/code&gt; 段中创建结构。虽然 C++ 虚方法对启动耗时的增加要比 ObjC 元数据要少，但依然不可忽视。最后推荐使用 Swift 结构体，它需要 fix-up 的内容较少。&lt;/p&gt;
&lt;h4 id=&quot;ObjC-Setup&quot;&gt;&lt;a href=&quot;#ObjC-Setup&quot; class=&quot;headerlink&quot; title=&quot;ObjC Setup&quot;&gt;&lt;/a&gt;ObjC Setup&lt;/h4&gt;&lt;p&gt;针对这步所能事情很少，几乎都靠 Rebasing 和 Binding 步骤中减少所需 fix-up 内容。因为前面的工作也会使得这步耗时减少。&lt;/p&gt;
&lt;h4 id=&quot;Initializer&quot;&gt;&lt;a href=&quot;#Initializer&quot; class=&quot;headerlink&quot; title=&quot;Initializer&quot;&gt;&lt;/a&gt;Initializer&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;显式初始化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;+initialize&lt;/code&gt; 来替代 &lt;code&gt;+load&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要使用 &lt;code&gt;__atribute__((constructor))&lt;/code&gt; 将方法显式标记为初始化器，而是让初始化方法调用时才执行。比如使用 &lt;code&gt;dispatch_once()&lt;/code&gt;,&lt;code&gt;pthread_once()&lt;/code&gt; 或 &lt;code&gt;std::once()&lt;/code&gt;。也就是在第一次使用时才初始化，推迟了一部分工作耗时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;隐式初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于带有&lt;a href=&quot;http://stackoverflow.com/questions/3899223/what-is-a-non-trivial-constructor-in-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;复杂（non-trivial）构造器&lt;/a&gt;的 C++ 静态变量：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在调用的地方使用初始化器。&lt;/li&gt;
&lt;li&gt;只用简单值类型赋值（POD:Plain Old Data），这样静态链接器会预先计算 &lt;code&gt;__DATA&lt;/code&gt; 中的数据，无需再进行 fix-up 工作。&lt;/li&gt;
&lt;li&gt;使用编译器 warning 标志 &lt;code&gt;-Wglobal-constructors&lt;/code&gt; 来发现隐式初始化代码。&lt;/li&gt;
&lt;li&gt;使用 Swift 重写代码，因为 Swift 已经预先处理好了，强力推荐。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不要在初始化方法中调用 &lt;code&gt;dlopen()&lt;/code&gt;，对性能有影响。因为 &lt;code&gt;dyld&lt;/code&gt; 在 App 开始前运行，由于此时是单线程运行所以系统会取消加锁，但 &lt;code&gt;dlopen()&lt;/code&gt; 开启了多线程，系统不得不加锁，这就严重影响了性能，还可能会造成死锁以及产生未知的后果。所以也不要在初始化器中创建线程。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/406/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/videos/play/wwdc2016/406/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇 WWDC 2016 Session 406 的学习笔记，从原理到实践讲述了如何优化 App 的启动时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Talk About project.pbxproj</title>
    <link href="http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/"/>
    <id>http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/</id>
    <published>2016-09-28T14:58:19.000Z</published>
    <updated>2016-10-18T16:48:04.000Z</updated>
    
    <content type="html">&lt;p&gt;project.pbxproj 文件被包含于 Xcode 工程文件 *.xcodeproj 之中，存储着 Xcode 工程的各项配置参数。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。其可读性不如 xml 和 json，苹果却一直沿用至今，作为一家以创新闻名的公司可能这里剩下的就是情怀吧。&lt;/p&gt;
&lt;p&gt;本文谈了下 project.pbxproj 的知识，并总结了一些操作工程文件的优秀轮子，并在最后给出了自己的解决方案 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Property-List-的历史&quot;&gt;&lt;a href=&quot;#Property-List-的历史&quot; class=&quot;headerlink&quot; title=&quot;Property List 的历史&quot;&gt;&lt;/a&gt;Property List 的历史&lt;/h2&gt;&lt;p&gt;想了解 project.pbxproj 文件格式，就需要先了解 Property List。&lt;/p&gt;
&lt;p&gt;Property List 有很多种表现方式，最古老的格式就是之前提到的 NeXTSTEP 所使用的格式。那时还算是可读性很强的，仍需要手动编辑。与 json 最明显的差别是：数组用小括号括起来并用逗号隔开元素；字典用大括号括起来并用分号隔开键值对，键值之间用等号连接；二进制数据用尖括号 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 括起来：&lt;/p&gt;
&lt;p&gt;数组：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;( &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字典：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这也是 project.pbxproj 文件中所使用的格式。&lt;/p&gt;
&lt;p&gt;后来出现的 GNUstep 沿用了 NeXTSTEP 格式，并添加了对 &lt;code&gt;NSValue&lt;/code&gt; 和 &lt;code&gt;NSDate&lt;/code&gt; 对象的支持。到了苹果的 Mac OS X 10.0 推出了新的 XML 格式，旧的 NeXTSTEP 被废弃，只支持读不支持写。这也是为什么使用 &lt;code&gt;plutil&lt;/code&gt; 命令或者 Cocoa 的 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 写入 OpenStep 格式时会报错：&lt;em&gt;Property list format kCFProperty ListOpenStepFormat not supported for writing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;因为 XML 语法啰嗦很占空间，苹果在 Mac OS X 10.2 又推出了一种新格式，将 Property List 存储于二进制文件中。虽然在 Mac OS X 10.7 JSON 格式出现了，但是跟 Property List 不兼容。&lt;/p&gt;
&lt;p&gt;于是乎 Property List 在苹果家族的历史上存在三种格式：OpenStep，XML 和 Binary。&lt;strong&gt;除了 OpenStep 被废弃不支持写入以外，其余格式都提供 API 支持读写。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作-Property-List-的途径&quot;&gt;&lt;a href=&quot;#操作-Property-List-的途径&quot; class=&quot;headerlink&quot; title=&quot;操作 Property List 的途径&quot;&gt;&lt;/a&gt;操作 Property List 的途径&lt;/h2&gt;&lt;p&gt;Unix 的 &lt;code&gt;plutil&lt;/code&gt; 工具提供了处理 Property list 文件的能力。 比如将 Property list 文件转成 XML 格式: &lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plutil -convert xml1 -s -r -o project.pbxproj.&lt;span class=&quot;keyword&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project&lt;/span&gt;.pbxproj&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-convert&lt;/code&gt; 选项可以传入的参数有： xml1, binary1 和 json。&lt;/p&gt;
&lt;p&gt;当然 Cocoa 的 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 也提供了类似的功能，更面向对象。其实 &lt;code&gt;plutil&lt;/code&gt; 和 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 底层都是调用 &lt;code&gt;CoreFoundation&lt;/code&gt; 的&lt;code&gt;CFPropertyList&lt;/code&gt; 相关的 API，所以功能类似。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 读入 project.pbxproj 文件时，字典中键值对的顺序会跟文件中原始的顺序不一致。这是因为字典为了实现快速查找会将 key 按序存储（比如字典序或用红黑树排序）。用 &lt;code&gt;plutil&lt;/code&gt; 命令将 project.pbxproj 文件转成 xml 或 json 也会如此。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;plutil&lt;/code&gt; 命令也支持对某个 &lt;code&gt;keypath&lt;/code&gt; 的增、删、改操作。&lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 就更不用说了，在程序中随意搞。&lt;/p&gt;
&lt;p&gt;之前提到过不支持 OpenStep 写入的问题，所以即便我们能在内存中操作 project.pbxproj 文件，依然不能直接保存。&lt;strong&gt;如果自己动手写一个 OpenStep 格式生成程序，依然无法准确还原字典中键值对的顺序。&lt;/strong&gt;更何况 project.pbxproj 文件中还插入了大量增强 human-readable 的注释，这些注释的生成是有特殊逻辑的，这个在后面会讲。&lt;/p&gt;
&lt;h2 id=&quot;简要解析-project-pbxproj-文件&quot;&gt;&lt;a href=&quot;#简要解析-project-pbxproj-文件&quot; class=&quot;headerlink&quot; title=&quot;简要解析 project.pbxproj 文件&quot;&gt;&lt;/a&gt;简要解析 project.pbxproj 文件&lt;/h2&gt;&lt;p&gt;既然表面上无法将修改过的工程文件数据还原为 OpenStep 格式，Xcode 又是如何『开挂』做到的呢？这就得从 project.pbxproj 文件内容说起了。&lt;/p&gt;
&lt;h3 id=&quot;内容规则&quot;&gt;&lt;a href=&quot;#内容规则&quot; class=&quot;headerlink&quot; title=&quot;内容规则&quot;&gt;&lt;/a&gt;内容规则&lt;/h3&gt;&lt;p&gt;project.pbxproj 使用 UUID 作为交叉引用的索引，保证每个配置信息对象的唯一性。因为 UUID 根据机器硬件和时间戳生成，避免了多人在同一时间段操作修改工程文件带来的问题。也就是说工程中每项配置对象都有个唯一的 UUID，然后其他配置对象想引用某个配置对象直接使用它的 UUID 即可。这就跟我们编程时使用指针指向某个对象的地址一样，其他对象的属性想引用它，只需要给属性传个指针地址就行了。&lt;/p&gt;
&lt;p&gt;可以把整个文件的内容想象成一个字典，字典中的 Key 按照字典序来排列。字典的第一层级总共有 5 个键值对，Key 分别为：&lt;code&gt;archiveVersion&lt;/code&gt;，&lt;code&gt;classes&lt;/code&gt;，&lt;code&gt;objectVersion&lt;/code&gt;，&lt;code&gt;objects&lt;/code&gt; 和 &lt;code&gt;rootObject&lt;/code&gt;。其中重要的 Key 是 &lt;code&gt;objects&lt;/code&gt; 和 &lt;code&gt;rootObject&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所有的配置对象都放在 &lt;code&gt;objects&lt;/code&gt; 对应的 Value 中，包括跟对象（&lt;code&gt;rootObject&lt;/code&gt;）。 &lt;code&gt;objects&lt;/code&gt; 对应的 Value 也是一个字典，Key 都为 UUID，Value 依然是个字典。可以将 &lt;code&gt;rootObject&lt;/code&gt; 的值（是一个 UUID）作为 Key 在 &lt;code&gt;objects&lt;/code&gt; 对应的字典中找到根对象。这个根对象的 &lt;code&gt;isa&lt;/code&gt; 属性为 &lt;code&gt;PBXProject&lt;/code&gt;（&lt;code&gt;isa = PBXProject&lt;/code&gt;）。&lt;strong&gt;读懂 project.pbxproj 的最好方式就是顺着 &lt;code&gt;rootObject&lt;/code&gt; 的各个属性对应的 UUID 在 &lt;code&gt;objects&lt;/code&gt; 中找到对应的对象，然后一层层看下去。&lt;/strong&gt;这样整个文件的配置信息存放方式就慢慢摸清了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;objects&lt;/code&gt; 中的键值对被分成了若干个 section，虽然 section 的顺序是 Xcode 私有 API 钦定的，但每个 section 内部的键值对会根据 Key 的字典序排列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个对象内部的属性（也是键值对）会把 &lt;code&gt;isa&lt;/code&gt; 排在最前面，其余的按照字典序排列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组内部的顺序完全按照元素内容的字典序排列。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;objects&lt;/code&gt; 中 &lt;code&gt;PBXNativeTarget&lt;/code&gt; section 的一个对象，感受一下格式：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Begin PBXNativeTarget section */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		A450185D1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* projectTest */&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			isa = PBXNativeTarget&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;buildConfigurationList &lt;/span&gt;= A45018751D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Build configuration list for PBXNativeTarget &quot;projectTest&quot; */&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;buildPhases &lt;/span&gt;= (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				A450185A1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Sources */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				A&lt;span class=&quot;number&quot;&gt;450185B&lt;/span&gt;1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Frameworks */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				A450185C1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Resources */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;buildRules &lt;/span&gt;= (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dependencies = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			name = projectTest&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			productName = projectTest&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			productReference = A450185E1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* projectTest.app */&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			productType = &lt;span class=&quot;string&quot;&gt;&quot;com.apple.product-type.application&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* End PBXNativeTarget section */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以根据 &lt;code&gt;A45018751D9D68D60002869D&lt;/code&gt; 找到对应的 &lt;code&gt;buildConfigurationList&lt;/code&gt; 对象的内容，所以说 project.pbxproj 使用 UUID 作为交叉引用的索引。通过这种关系，可以递归构建一张有向图，每个对象都是一个节点。&lt;/p&gt;
&lt;h3 id=&quot;内容类型&quot;&gt;&lt;a href=&quot;#内容类型&quot; class=&quot;headerlink&quot; title=&quot;内容类型&quot;&gt;&lt;/a&gt;内容类型&lt;/h3&gt;&lt;p&gt;在 Xcode 中能看见所有的公共配置信息都存在于 project.pbxproj 中。主要包含跟文件相关的 BuildFile，Group 和 FileReference；跟编译相关的 BuildPhase 和 Build Configuration（List）；以及一些列 Target 和 TargetDependency。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objects&lt;/code&gt; 的键值对根据内容类型被分成了若干个 section，采用注释的方式分节也使得可读性更强。section 的数量跟工程有关，尤其是每个工程的 BuildPhase 和 Target 差别都很大。下面列出了一个section 列表（非完整）：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PBXBuildFile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXAppleScriptBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PB&lt;span class=&quot;built_in&quot;&gt;XCopyFilesBuildPhase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXFrameworksBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXHeadersBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXResourcesBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXShellScriptBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXSourcesBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PB&lt;span class=&quot;built_in&quot;&gt;XContainerItemProxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXFileElement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXFileReference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXVariantGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXAggregateTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXLegacyTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXNativeTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXTargetDependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;XCBuildConfiguration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;XCConfigurationList&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个 section 中的对象类型都是相同的，对象的类型是靠 &lt;code&gt;isa&lt;/code&gt; 的值区分的。对象内部的属性类型以及含义可以参照这篇文章提供的对照表：&lt;a href=&quot;http://www.monobjc.net/xcode-project-file-format.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode Project File Format&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作-project-pbxproj-文件&quot;&gt;&lt;a href=&quot;#操作-project-pbxproj-文件&quot; class=&quot;headerlink&quot; title=&quot;操作 project.pbxproj 文件&quot;&gt;&lt;/a&gt;操作 project.pbxproj 文件&lt;/h2&gt;&lt;p&gt;我收集了一些可以操作 project.pbxproj 文件的优秀轮子，原理大都是用 &lt;code&gt;plutil&lt;/code&gt; 转成 json 或 xml 后进行处理，不仅功能非常局限，且都无法完美还原为 OpenStep 格式的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcodeproj&lt;/a&gt; CocoaPods 写的 Ruby 解析库，用于修改引入 CocoaPods 的工程文件并保存为 XML 格式。CocoaPods 本身是很强大的，还可以用来操作 Xcode workspaces (.xcworkspace), configuration files (.xcconfig) 和 Xcode Scheme files (.xcscheme).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kronenthaler/mod-pbxproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mod-pbxproj&lt;/a&gt; 强大的 Python 解析库，支持一定的修改操作，可输出 OpenStep 格式，但是顺序和注释内容无法完美还原，有些鸡肋。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/truebit/xUnique&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xUnique&lt;/a&gt; 用 Python 写的统一多设备生成的 UUID 的工具，主要用途是统一工程在多设备上生成的 UUID，避免工程文件冲突。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mjmsmith/pbxplorer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxplorer&lt;/a&gt;  Ruby 写的解析库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alunny/node-xcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-xcode&lt;/a&gt; Cordova 基于它管理 Xcode 工程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 &lt;strong&gt;Xcode 可以打开 XML 格式的 project.pbxproj，一旦在 Xcode 界面上修改工程配置就会重新将 project.pbxproj 转成 OpenStep 风格。解铃还须系铃人，经过多番对比之后发现最终还是 Xcode 自己才能将 XML 完美还原成原来的 OpenStep 格式，且 &lt;code&gt;diff&lt;/code&gt; 对比毫无差错。&lt;/strong&gt;原因很简单，Xcode 使用的私有 API 的导出结果是个黑盒，外界无论怎么猜都会有瑕疵。所以还是导出为 XML 后手动在 Xcode 界面中触发下吧。既然这样的话，如果能够简单高效地生成出 XML 文件作为工程文件就好了。基于此想法我开发了一款叫做 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt; 的 Mac App：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/images/MainWindow@2x.png?raw=true&quot; alt=&quot;Main Window&quot;&gt;&lt;/p&gt;
&lt;p&gt;操作简单粗暴：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个工程文件然后内容会自动解析在下面的 Outline 列表中，Filter 输入框便于过滤查看内容。&lt;/li&gt;
&lt;li&gt;单击 Outline 列表中的文字即可复制内容到剪贴板，双击复制整个keypath！ &lt;/li&gt;
&lt;li&gt;对 project.pbxproj 文件的增删改操作都配置在 json 文件中，每次想对工程进行修改只需选择对应的 json 配置文件然后点击 “Apply” 即可完成写入替换哦！&lt;/li&gt;
&lt;li&gt;不小心误操作的话还可以点 “Revert” 回滚到上个版本哦！&lt;/li&gt;
&lt;li&gt;什么？懒得写 json 配置文件？下面这个附带的 json 配置生成器可以帮你直接生成一个哦！使用 ⇧⌘0 快捷键即可召唤此神器！选择两个工程文件和 json 保存路径后轻轻一点 “Generate” 就搞定咯：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/images/GeneratorWindow@2x.png?raw=true&quot; alt=&quot;Generator Window&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以处理工程文件的正确姿势是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拷贝出一份原始的 project.pbxproj 文件&lt;/li&gt;
&lt;li&gt;在 Xcode 界面上修改工程配置，比如修改编译选项，使用自己的证书等&lt;/li&gt;
&lt;li&gt;使用 pbxprojHelper 的 JSON Configuration Generator 来对比修改后的工程文件和原始的工程文件，自动生成 JSON 配置文件&lt;/li&gt;
&lt;li&gt;以后想要在工程文件上施加自己的修改时，只需要应用之前生成好的 JSON 配置文件即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;pbxprojHelper 的&lt;strong&gt;优势在于可以自由地增删改查任意属性，原生 UI 降低了使用门槛。功能强大的同时人性化的设计使得更快捷浏览工程文件中的内容。无需写任何代码即可一键配置自己想要的工程文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此外还提供了命令行工具 &lt;code&gt;pbxproj&lt;/code&gt;, 它具有 pbxprojHelper.app 具有的大部分功能：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: pbxproj [command_option] &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command options are (-convert &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-compare modified_file -o path          compare modified &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; generate a json &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;given&lt;/span&gt; path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-apply json_file                        apply a json &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-revert                                 revert &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; latest backup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-convert                                rewrite &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xml format&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以使用 &lt;code&gt;pbxproj&lt;/code&gt; 搭配 DevToolsCore 私有 framework 来完成修改工程文件并转化成 OpenStep 格式的一条龙自动化程序。&lt;/p&gt;
&lt;p&gt;你可以在 GitHub 上下载最新的 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/releases/latest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Release&lt;/a&gt; 版。或者在 App Store 中下载：&lt;a href=&quot;https://itunes.apple.com/cn/app/pbxprojhelper/id1160801848?mt=12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunes.apple.com/cn/app/pbxprojhelper/id1160801848?mt=12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本项目完全手撸，没依赖上面提到的任何轮子😃。&lt;/strong&gt;但由于使用 Swift 3 来开发，所以最低只能支持 macOS 10.12 系统。&lt;/p&gt;
&lt;p&gt;想了解更多信息请查看 GitHub 主页：&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/pbxprojHelper&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Property_list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Property_list&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.monobjc.net/xcode-project-file-format.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.monobjc.net/xcode-project-file-format.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1452707/library-to-read-write-pbxproj-xcodeproj-files&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/1452707/library-to-read-write-pbxproj-xcodeproj-files&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj/issues/52&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CocoaPods/Xcodeproj/issues/52&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;project.pbxproj 文件被包含于 Xcode 工程文件 *.xcodeproj 之中，存储着 Xcode 工程的各项配置参数。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。其可读性不如 xml 和 json，苹果却一直沿用至今，作为一家以创新闻名的公司可能这里剩下的就是情怀吧。&lt;/p&gt;
&lt;p&gt;本文谈了下 project.pbxproj 的知识，并总结了一些操作工程文件的优秀轮子，并在最后给出了自己的解决方案 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot;&gt;pbxprojHelper&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Xcode" scheme="http://yulingtianxia.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>处理手势冲突和错乱的一点经验</title>
    <link href="http://yulingtianxia.com/blog/2016/08/29/Some-Experience-of-Gesture/"/>
    <id>http://yulingtianxia.com/blog/2016/08/29/Some-Experience-of-Gesture/</id>
    <published>2016-08-29T02:53:51.000Z</published>
    <updated>2016-10-18T16:48:04.000Z</updated>
    
    <content type="html">&lt;p&gt;如果一个页面上包含着很多视图，而且界面上业务逻辑比较复杂，那么手势响应冲突或者错乱很容易发生。这时就得猥琐点啦，见招拆招。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;处理界面多变引发的手势冲突&quot;&gt;&lt;a href=&quot;#处理界面多变引发的手势冲突&quot; class=&quot;headerlink&quot; title=&quot;处理界面多变引发的手势冲突&quot;&gt;&lt;/a&gt;处理界面多变引发的手势冲突&lt;/h2&gt;&lt;h3 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h3&gt;&lt;p&gt;界面变化多意味着什么？负责的业务逻辑？不同机型适配？这都不是我要首先去重点考虑的，但有一点很重要，那就是要有一个完善的状态机！要透过现象看本质：手势冲突的原因？难道是因为那几个 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 方法的实现有问题？或者是因为跨层级传递事件在 &lt;code&gt;hitTest:withEvent:&lt;/code&gt; 里的业务逻辑太复杂没理清？其实这些就算都能弄得很明白，界面内容一变化就容易出问题。更有可能为了快速响应用户的操作而让一些视图常驻内存，而不是每次重新创建和添加，这增加了界面内容的复杂度。&lt;/p&gt;
&lt;p&gt;举个栗子，我想让用户发图片前可以对图片进行编辑，比如加段文字、贴纸、滤镜、涂鸦之类的，甚至可以裁剪和加背景音乐。暂且不说如何展示编辑后的图片，但就编辑的界面就很复杂，毕竟好多种编辑模式要在同一个界面中完成。这少不了各种编辑模式入口的按钮，也少不了每种编辑模式对界面视图层级的叠加。起码滤镜要单独一层吧，每个贴纸和文字都是个视图，涂鸦也要一层视图。裁剪时整个图片包括编辑时添加的内容都要跟着一起缩放和旋转，切换滤镜需要滑动，文字和贴纸都要缩放平移旋转等操作。更别提添加文字、贴纸和背景音乐时要覆盖一个全屏的界面（不用新的 controller，而是添加视图），让用户编辑文字或选择素材。这些业务都在一个 controller 里放着，好多层视图叠加，而且变幻莫测。在什么时刻该响应哪个视图的哪个手势，靠什么判断？答案就是：&lt;strong&gt;状态机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;状态机能解决的更多的是界面错乱的问题，但界面一旦错乱必将对手势判断带来致命影响。就算界面不错乱，也需要在 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 方法或 &lt;code&gt;hitTest:withEvent:&lt;/code&gt; 中知晓当前界面处于何种状态，然后才能准确判断选择哪个手势或哪个视图。这里展开叙述下我对未来可以使用状态机解决 UI 错乱以及因此而引发手势冲突的构想。&lt;/p&gt;
&lt;h3 id=&quot;使用状态机的构想方案&quot;&gt;&lt;a href=&quot;#使用状态机的构想方案&quot; class=&quot;headerlink&quot; title=&quot;使用状态机的构想方案&quot;&gt;&lt;/a&gt;使用状态机的构想方案&lt;/h3&gt;&lt;p&gt;可以认为每种编辑模式下都是一种状态，编辑完成之后也是种状态。还要考虑到初始状态或者无状态的情况。用户对图片上的贴纸和文字等元素进行操作时肯定也要设定一种状态。总之状态不求多，但一定要面面俱到无遗漏，要根据当前界面操作设计状态。某种状态下可能还会有子状态，比如涂鸦模式下可能会有画笔、橡皮擦、马赛克，并能选择粗细之类的功能。这些都属于涂鸦模式下界面中的其他小功能，如果把这些功能的对应的状态跟其他几种编辑模式对应的状态放在一起，能保证唯一性的话倒不是说不可以，但很不合适。&lt;/p&gt;
&lt;p&gt;每种状态都要规定它的『下一个状态』的集合，比如涂鸦模式下可能会进入到编辑完成状态，也可能返回到初始状态，也可能进入到裁剪状态。。。这些规则要照着产品经理指定的业务逻辑来，做到调理清晰。制定好每种状态的『下一个状态』的集合后，一张有向图就会展现出来了，规则定了就好办了。不要把这些状态简单理解成『一个枚举』，要用面向对象的思想来实现。比如可以建立个表示状态的基类，再弄个 &lt;code&gt;isValidNextState:&lt;/code&gt; 方法来判断输入的状态是否能当做此状态的『下一个状态』。苹果的 &lt;code&gt;GameplayKit&lt;/code&gt; 中的状态机（&lt;code&gt;GKStateMachine&lt;/code&gt;）就是个很不错的例子。&lt;/p&gt;
&lt;p&gt;下一步就是状态的响应，在状态转换时驱动界面元素的变化。什么？不是应该在点击按钮时对界面做变更么？这种思维很局限，也是导致代码复用不高和 bug 频出的原因。能够改变编辑模式的不一定只有按钮点击，这要根据产品的业务。所以应该让界面变更依赖于状态的变化，这样更集中统一，不容易出差错。（但这样的缺点可能就是产品经理要求上报用户行为时无法获知用户何种操作导致状态变化，这里只能通过在状态类中加标志位判断了。）&lt;/p&gt;
&lt;p&gt;最关键的是在正确的位置添加状态切换的代码，一定要覆盖全面毫无遗漏。这是保证整个状态机运行的关键！&lt;/p&gt;
&lt;p&gt;说了这么多，也没看出状态机跟手势有多大关系啊？直观点讲，在涂鸦状态下是不会响应双指操作的手势的，因为只有单个手指的 Pan 和 Tap 手势；而在操作文字和贴纸的状态下 Pinch、Rotation 和 Pan 是可以同时响应的，因为用户可以旋转缩放视图的同时挪动视图位置，而 Tap 手势此时可能还会赋有其他的功能。总之状态机将复杂的业务逻辑所对应的手势操作划分开，提供了准确唯一的判断。&lt;/p&gt;
&lt;p&gt;如果不使用状态机，（打个比方）而是根据界面上某个按钮的 &lt;code&gt;selected&lt;/code&gt; 或者某个视图的 &lt;code&gt;hidden&lt;/code&gt; 属性来判断下一步的操作，那肯定会出大乱子。因为 UI 控件的状态不可靠，能够改变它们的因素很多，而且会有多个 UI 状态同时存在导致冲突。唯有状态机牢牢把我在程序员的手里，唯一且准确。&lt;/p&gt;
&lt;h2 id=&quot;处理界面复杂引发的手势错乱&quot;&gt;&lt;a href=&quot;#处理界面复杂引发的手势错乱&quot; class=&quot;headerlink&quot; title=&quot;处理界面复杂引发的手势错乱&quot;&gt;&lt;/a&gt;处理界面复杂引发的手势错乱&lt;/h2&gt;&lt;h3 id=&quot;情景还原&quot;&gt;&lt;a href=&quot;#情景还原&quot; class=&quot;headerlink&quot; title=&quot;情景还原&quot;&gt;&lt;/a&gt;情景还原&lt;/h3&gt;&lt;p&gt;『你看贴纸这么多手指又太大缩放不灵敏真不怪我啊，臣妾真的办不到啊！』&lt;/p&gt;
&lt;p&gt;『哎呀，本来想旋转某个贴纸的，结果两个手指分别在另外两个贴纸上。这么多小贴纸放这么密用户好变态啊！』&lt;/p&gt;
&lt;p&gt;。。。真是乱，想操作 A 视图却意外操作了 B 视图。。。&lt;/p&gt;
&lt;h3 id=&quot;分析问题-1&quot;&gt;&lt;a href=&quot;#分析问题-1&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h3&gt;&lt;h4 id=&quot;对手势统一处理和分发&quot;&gt;&lt;a href=&quot;#对手势统一处理和分发&quot; class=&quot;headerlink&quot; title=&quot;对手势统一处理和分发&quot;&gt;&lt;/a&gt;对手势统一处理和分发&lt;/h4&gt;&lt;p&gt;要是给每个视图内容都单独添加一套 Tap、Pan、LongPress、Pinch、Rotation 手势那真是找死啊，手势不错乱才怪呢！别再把手势错乱归结于界面上视图多，要怪就怪添加手势的姿势不对！&lt;/p&gt;
&lt;p&gt;当界面内容数量较多时还是要尊崇大一统的思想，把各种手势全都添加到底层的全屏视图上，然后统一处理和分发结果。因为每种手势只有一个且都加在了底层视图，所以不会发生不同视图间的手势错乱。而不同种手势之间的冲突就需要在 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 中根据业务逻辑来解决了。&lt;/p&gt;
&lt;p&gt;那么该如何判断哪个视图响应了手势的操作呢？用户最希望的肯定是最顶层的且距离手指最近的视图。这里难在如何选择距离手指最近的视图。&lt;/p&gt;
&lt;h4 id=&quot;计算响应手势的视图&quot;&gt;&lt;a href=&quot;#计算响应手势的视图&quot; class=&quot;headerlink&quot; title=&quot;计算响应手势的视图&quot;&gt;&lt;/a&gt;计算响应手势的视图&lt;/h4&gt;&lt;p&gt;可以通过 &lt;code&gt;locationInView:&lt;/code&gt; 获取手势的坐标，但这里决不能简单地计算手势坐标到视图 &lt;code&gt;center&lt;/code&gt; 的距离并选取最近的视图。这里需要检测手势坐标处于哪个视图的&lt;strong&gt;范围&lt;/strong&gt;内，包括『在视图区域内』（红色）和『在视图周围区域』（橙色）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/SomeExperienceofGesture/WhichViewShouldResponseToGesture.png&quot; alt=&quot;选择响应手势的视图&quot;&gt;&lt;/p&gt;
&lt;p&gt;策略是先看手势坐标处于哪些视图的『视图区域』中，如果没找到，就再扩大查找范围至『周围区域』。最后如果有多个视图满足要求，就选择最顶层的视图。如果没有任何视图满足要求，可以不做任何处理；也可以根据产品策略对界面上唯一的视图进行操作。这里就看业务怎么规定的了。&lt;/p&gt;
&lt;p&gt;至于『周围区域』该如何划定，具体参数就看产品制定的策略进行微调了。总之传入一个 &lt;code&gt;UIEdgeInsets&lt;/code&gt; 就能搞定。&lt;/p&gt;
&lt;p&gt;在用代码实现的时候可以优化逻辑来减少遍历的时间复杂度：从最顶层视图到最底层视图开始遍历，如果手势坐标命中『视图区域』内，则直接得出结果。否则如果手势坐标命中『周围区域』内，就计算手势到视图中心距离并在遍历完成后得到距离最近的视图。&lt;/p&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;h4 id=&quot;处理-Pinch-手势&quot;&gt;&lt;a href=&quot;#处理-Pinch-手势&quot; class=&quot;headerlink&quot; title=&quot;处理 Pinch 手势&quot;&gt;&lt;/a&gt;处理 Pinch 手势&lt;/h4&gt;&lt;p&gt;在视图被缩放时，一般是改变 &lt;code&gt;transform&lt;/code&gt; 属性。关于 &lt;code&gt;CGAffineTransform&lt;/code&gt; 的知识这里不再赘述。&lt;/p&gt;
&lt;h5 id=&quot;分辨率&quot;&gt;&lt;a href=&quot;#分辨率&quot; class=&quot;headerlink&quot; title=&quot;分辨率&quot;&gt;&lt;/a&gt;分辨率&lt;/h5&gt;&lt;p&gt;当对含有矢量内容的视图进行缩放时会有模糊和锯齿出现，这时递归需要改变 &lt;code&gt;UIView&lt;/code&gt; 的 &lt;code&gt;contentScaleFactor&lt;/code&gt; 和 &lt;code&gt;CALayer&lt;/code&gt; 的 &lt;code&gt;contentsScale&lt;/code&gt; 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateForZoomScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)zoomScale &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; screenAndZoomScale = zoomScale * [&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Walk the layer and view hierarchies separately. We need to reach all tiled layers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:screenAndZoomScale toView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:screenAndZoomScale toLayer:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)applyScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)scale toView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.contentScaleFactor = scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; view.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:scale toView:subview];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)applyScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)scale toLayer:(&lt;span class=&quot;built_in&quot;&gt;CALayer&lt;/span&gt; *)layer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer.contentsScale = scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CALayer&lt;/span&gt; *sublayer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layer.sublayers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:scale toLayer:sublayer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;坐标&quot;&gt;&lt;a href=&quot;#坐标&quot; class=&quot;headerlink&quot; title=&quot;坐标&quot;&gt;&lt;/a&gt;坐标&lt;/h5&gt;&lt;p&gt;视图的 &lt;code&gt;transform&lt;/code&gt; 属性是不会修改视图的 &lt;code&gt;bounds&lt;/code&gt; 的，但 &lt;code&gt;frame&lt;/code&gt; 作为计算属性还是会变化的。也就是说无论视图放大了多少倍，视图内部的子视图的 &lt;code&gt;frame&lt;/code&gt; 不会变。&lt;/p&gt;
&lt;p&gt;总之，&lt;code&gt;transform&lt;/code&gt; 属性改变的是视图的 &lt;code&gt;frame&lt;/code&gt;，而 &lt;code&gt;bounds&lt;/code&gt; 和子视图的 &lt;code&gt;frame&lt;/code&gt; 都不会变。也就是&lt;strong&gt;视图内部的坐标系不会改变&lt;/strong&gt;。记住这点，很有用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/SomeExperienceofGesture/transform%E5%AF%B9%E6%AF%94%E5%9D%90%E6%A0%87.png&quot; alt=&quot;改变 transform 后的坐标系&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图展示的是缩放后的坐标变换，也同样适用于旋转。都是相对坐标系的知识罢了。&lt;/p&gt;
&lt;h4 id=&quot;处理-Rotation-手势&quot;&gt;&lt;a href=&quot;#处理-Rotation-手势&quot; class=&quot;headerlink&quot; title=&quot;处理 Rotation 手势&quot;&gt;&lt;/a&gt;处理 Rotation 手势&lt;/h4&gt;&lt;p&gt;之前一直用『视图区域』而不直接用 &lt;code&gt;frame&lt;/code&gt; 来描述手势判断依据，是因为当视图旋转（90°倍数除外）之后 &lt;code&gt;frame&lt;/code&gt; 并不等于『视图区域』：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/SomeExperienceofGesture/Rotation%E5%8C%BA%E5%9F%9F%E5%88%A4%E6%96%AD.png&quot; alt=&quot;旋转后的视图&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说如果按照 &lt;code&gt;frame&lt;/code&gt; 来判断『视图区域』是偏大的，会遮挡住其他视图。所以我专门写了个方法用于判断某个点是否在『视图区域』内，还提供了 &lt;code&gt;UIEdgeInsets&lt;/code&gt; 参数用于满足判断『周围区域』的要求：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  判断某个点是否在视图区域内，针对 transform 做了转换计算，并提供 UIEdgeInsets 缩放区域的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param point  要判断的点坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param view   传入的视图，一定要与本视图处于同一视图树中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param insets UIEdgeInsets参数可以调整判断的边界&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @return BOOL类型，返回点坐标是否位于视图内&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)checkPoint:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;) point inView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view withInsets:(&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt;)insets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;comment&quot;&gt;// 将点坐标转化为视图内坐标系的点，消除 transform 带来的影响&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; convertedPoint = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; convertPoint:point toView:view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGAffineTransform&lt;/span&gt; viewTransform = view.transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算视图缩放比例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; scale = sqrt(viewTransform.a * viewTransform.a + viewTransform.c * viewTransform.c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将 UIEdgeInsets 除以缩放比例，以便得到真实的『周围区域』&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt; scaledInsets = (&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt;)&amp;#123;insets.top/scale,insets.left/scale,insets.bottom/scale,insets.right/scale&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; resultRect = &lt;span class=&quot;built_in&quot;&gt;UIEdgeInsetsInsetRect&lt;/span&gt;(view.bounds, scaledInsets);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断给定坐标点是否在区域内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CGRectContainsPoint&lt;/span&gt;(resultRect, convertedPoint)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过此方法处理后会使得区域判断更准确，那些旋转过的视图带来的手势失效也得以解决。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;其实如果所有手势都交给一个底层视图统一处理的话，上层那一坨视图是不需要响应触摸事件的，有些甚至可以用 Layer 来做。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 和 &lt;code&gt;hitTest:withEvent:&lt;/code&gt; 的用法官方文档中有详细阐述，能够解决手势问题的前提是熟悉文档，然后才是一些思想和架构层面的解决方案。比如 Tap 手势要先让 Pan 手势失败之类的手势冲突就可以用 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 处理，不再列举。&lt;/p&gt;
&lt;p&gt;我碰到的应用场景有限，经验不够多，还请大家补充经验！ &lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5927223/scaling-uitextview-using-contentscalefactor-property&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/5927223/scaling-uitextview-using-contentscalefactor-property&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果一个页面上包含着很多视图，而且界面上业务逻辑比较复杂，那么手势响应冲突或者错乱很容易发生。这时就得猥琐点啦，见招拆招。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>自制一款强大的 ActionSheet</title>
    <link href="http://yulingtianxia.com/blog/2016/07/18/TBActionSheet/"/>
    <id>http://yulingtianxia.com/blog/2016/07/18/TBActionSheet/</id>
    <published>2016-07-18T04:36:15.000Z</published>
    <updated>2016-07-17T16:38:38.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS 系统自带的 &lt;code&gt;UIActionSheet&lt;/code&gt; 无法满足开发中高度个性化的 UI 风格和代码风格，所以我决定自己动手丰衣足食，于是 &lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 诞生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/TBActionSheet/blob/master/images/demo.gif?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github：&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/TBActionSheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 不仅还原了 &lt;code&gt;UIActionSheet&lt;/code&gt; 的几乎所有功能和 API，还在此基础上支持如下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;block 语法&lt;/li&gt;
&lt;li&gt;插入自定义的 Header 视图&lt;/li&gt;
&lt;li&gt;自定义字体、颜色、尺寸、圆角等&lt;/li&gt;
&lt;li&gt;将毛玻璃效果支持到了 iOS7，且可以定义颜色&lt;/li&gt;
&lt;li&gt;支持 Cocoapods 和 Carthage&lt;/li&gt;
&lt;li&gt;支持在 Title 下面设置 Message&lt;/li&gt;
&lt;li&gt;支持点击背景关闭&lt;/li&gt;
&lt;li&gt;可以在显示后动态更新 UI&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;为何要造这个轮子&quot;&gt;&lt;a href=&quot;#为何要造这个轮子&quot; class=&quot;headerlink&quot; title=&quot;为何要造这个轮子&quot;&gt;&lt;/a&gt;为何要造这个轮子&lt;/h1&gt;&lt;p&gt;可能上午视觉同学要求所有系统版本的 ActionSheet 都要做成 iOS9 的圆角样式，下午就推翻做成跟微信一模一样，晚上又觉得微信的好丑风格不搭。。。如何以不变应万变？自己造个万能轮子！&lt;/p&gt;
&lt;p&gt;其实有一些开源的 ActionSheet，但都不满足我的要求：&lt;strong&gt;高度个性化，私人定制&lt;/strong&gt;，而且&lt;strong&gt;几乎其他开源的 ActionSheet 都不支持自动旋转，只支持竖屏不能横屏&lt;/strong&gt;。而系统的 &lt;code&gt;UIActionSheet&lt;/code&gt; 是支持这个功能的。&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 做到在 iOS8+ 上的旋转屏幕适配，之所以不兼容 iOS7+ 是因为 iOS7 和 iOS8+ 的旋转机制和坐标体系有较大差别，总结为一个字：&lt;strong&gt;懒&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;其实造这个轮子的原因还真就是因为&lt;strong&gt;懒&lt;/strong&gt;！因为视觉同学经常会调整风格，改来改去真的会产生大量废弃的冗余代码，因为怕未来某个时间点又被改回去，所以不敢删代码只好注释掉。&lt;strong&gt;我就是要做个高度个性化的组件，每次修改 UI 只需要修改几个属性就可以&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对上面功能列表列出的第 1 条和第 6 条，系统的 &lt;code&gt;UIAlertController&lt;/code&gt; 也可以办得到，但缺点是只能在 iOS8+ 使用。而 &lt;code&gt;UIActionSheet&lt;/code&gt; 和 &lt;code&gt;UIAlertView&lt;/code&gt; 却在 iOS8.3 被废弃，这是个青黄不接的年代，为此我曾经开发了 &lt;code&gt;TBAlertController&lt;/code&gt; 来兼容高低各种版本的系统，实现原理在 &lt;a href=&quot;http://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/&quot;&gt;腾讯实习第一个月工作总结&lt;/a&gt; 有详细讲解。&lt;code&gt;TBAlertController&lt;/code&gt; 使用的都是系统控件，不可定制，但也被我集成到了 &lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 项目中。&lt;/p&gt;
&lt;p&gt;在做到功能强大高度个性化的同时也要注重对系统控件原有 API 的最大还原，在绝大多数情况下只需要将代码中的 &lt;code&gt;UI&lt;/code&gt; 替换成 &lt;code&gt;TB&lt;/code&gt; 即可，降低改动成本。&lt;/p&gt;
&lt;h1 id=&quot;界面组成&quot;&gt;&lt;a href=&quot;#界面组成&quot; class=&quot;headerlink&quot; title=&quot;界面组成&quot;&gt;&lt;/a&gt;界面组成&lt;/h1&gt;&lt;p&gt;从 UI 上大致划分成几个区域，它们都在 &lt;code&gt;TBActionSheet&lt;/code&gt; 的视图层级树中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TBActionBackground&lt;/code&gt; 为半透明背景&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TBActionContainer&lt;/code&gt; 是容纳 Sheet 视图的容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 属性是标题和消息，类型为 &lt;code&gt;UILabel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customView&lt;/code&gt; 属性是个普通的 &lt;code&gt;UIView&lt;/code&gt;，供使用者传入自定义视图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TBActionButton&lt;/code&gt; 是对应着每个 Action 的按钮&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/TBActionSheet/overview.jpg&quot; alt=&quot;视图层级&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有的坐标和尺寸都是代码计算出来的，没有用自动布局，容器的大小是根据其子视图的 frame 决定的，这其中包含很多计算。&lt;/p&gt;
&lt;p&gt;在实际使用时只需使用 &lt;code&gt;TBActionSheet&lt;/code&gt; 就可以了，所以上面提到的类都是幕后工作者。我将会讲述每部分具体实现和一些功能点的实现。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;背景是 &lt;code&gt;TBActionSheet&lt;/code&gt; 的子视图中最底层的视图。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionBackground&lt;/code&gt; 继承于 &lt;code&gt;UIImageView&lt;/code&gt;，虽然目前只是个拥有半透明黑色的可相应点击事件的视图，但是考虑到拓展性，允许使用者在背景上设置图片。&lt;/p&gt;
&lt;p&gt;点击背景后会调用父视图 &lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;close&lt;/code&gt; 方法关闭，后续会有详述。&lt;/p&gt;
&lt;h2 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h2&gt;&lt;p&gt;我在实现的时候没有使用自动布局，而是自己计算 frame。容器的作用是把一系列内容包装起来，方便计算 frame。&lt;code&gt;TBActionContainer&lt;/code&gt; 容纳了整个 ActionSheet 的主体功能视图，系统的毛玻璃效果也是在这添加的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 中好多属性其实并不是作为 &lt;code&gt;TBActionSheet&lt;/code&gt; 的子视图，而是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的子视图，比如：&lt;code&gt;titleLabel&lt;/code&gt;、&lt;code&gt;messageLabel&lt;/code&gt;、&lt;code&gt;customView&lt;/code&gt; 以及&lt;code&gt;buttons&lt;/code&gt; 数组中的 &lt;code&gt;TBActionButton&lt;/code&gt; 对象。既然这些视图都是容器的子视图，为何不在容器中声明对应的属性呢？目的是尽量将视图暴露给 &lt;code&gt;TBActionSheet&lt;/code&gt; 上集中处理，也方便对外集中提供属性和接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionContainer&lt;/code&gt; 中有对 &lt;code&gt;TBActionSheet&lt;/code&gt; 的弱引用，目的是便于获取一些属性值。&lt;/p&gt;
&lt;p&gt;容器从上到下依次为 &lt;code&gt;header&lt;/code&gt;，&lt;code&gt;custom&lt;/code&gt;，&lt;code&gt;footer&lt;/code&gt; 以及 &lt;code&gt;buttons&lt;/code&gt; 和 &lt;code&gt;separators&lt;/code&gt; 数组。Separator 指的是按钮之间的空隙，可以设置背景颜色。也就是说容器下面还有几个小容器，比如 &lt;code&gt;header&lt;/code&gt; 容纳标题和消息，&lt;code&gt;custom&lt;/code&gt; 容纳自定义视图，而 &lt;code&gt;footer&lt;/code&gt; 目前是空的，仅作为拓展。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionContainer&lt;/code&gt; 继承于 &lt;code&gt;UIImageView&lt;/code&gt;，&lt;code&gt;header&lt;/code&gt;，&lt;code&gt;custom&lt;/code&gt;，&lt;code&gt;footer&lt;/code&gt; 类型也都是 &lt;code&gt;UIImageView&lt;/code&gt;。这是为了实现毛玻璃效果，后续会有详述。&lt;/p&gt;
&lt;h2 id=&quot;标题-amp-消息&quot;&gt;&lt;a href=&quot;#标题-amp-消息&quot; class=&quot;headerlink&quot; title=&quot;标题&amp;amp;消息&quot;&gt;&lt;/a&gt;标题&amp;amp;消息&lt;/h2&gt;&lt;p&gt;系统的 &lt;code&gt;UIActionSheet&lt;/code&gt; 只支持标题没有消息，但可以通过换行的方式伪装下标题和消息。我这里当然是用两个 &lt;code&gt;UILabel&lt;/code&gt; 来实现标题和消息的啦，字体颜色也尽量还原 &lt;code&gt;UIAlertController&lt;/code&gt; 的样式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 属性是 &lt;code&gt;readonly&lt;/code&gt; 的，它们都是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的 &lt;code&gt;header&lt;/code&gt; 属性的子视图。&lt;/p&gt;
&lt;h2 id=&quot;自定义视图&quot;&gt;&lt;a href=&quot;#自定义视图&quot; class=&quot;headerlink&quot; title=&quot;自定义视图&quot;&gt;&lt;/a&gt;自定义视图&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;customView&lt;/code&gt; 属性可供使用者传入一个 &lt;code&gt;UIView&lt;/code&gt; 对象，它是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的 &lt;code&gt;custom&lt;/code&gt; 属性的子视图。自定义视图能够接收到触摸事件。&lt;/p&gt;
&lt;h2 id=&quot;按钮&quot;&gt;&lt;a href=&quot;#按钮&quot; class=&quot;headerlink&quot; title=&quot;按钮&quot;&gt;&lt;/a&gt;按钮&lt;/h2&gt;&lt;p&gt;所有的按钮都存储于 &lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;buttons&lt;/code&gt; 数组中，类型为 &lt;code&gt;TBActionButton&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionButton&lt;/code&gt; 继承于 &lt;code&gt;UIButton&lt;/code&gt;，有三种 &lt;code&gt;style&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;TBActionButtonStyle&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBActionButtonStyleDefault&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBActionButtonStyleCancel&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBActionButtonStyleDestructive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;TBActionButton&lt;/code&gt; 还提供了 &lt;code&gt;normalColor&lt;/code&gt; 和 &lt;code&gt;highlightedColor&lt;/code&gt; 属性，用于设置按钮不同状态下的颜色。如果开启了毛玻璃效果且让 Container 的背景透明，那就需要为容器中每个单独的视图添加毛玻璃效果，所以每个按钮背后都需要分别放置一个同等大小的视图用于毛玻璃效果和变换颜色。&lt;code&gt;behindColorView&lt;/code&gt; 属性就是设置颜色的视图。在按钮高亮时它的 &lt;code&gt;alpha&lt;/code&gt; 会被设成 0.5。有关毛玻璃效果具体实现细节后续会详述。&lt;/p&gt;
&lt;p&gt;为了支持 block 语法，&lt;code&gt;TBActionButton&lt;/code&gt; 内部保留了一个只读的 block 属性 &lt;code&gt;handler&lt;/code&gt;，而设置 block 只能通过它的工厂方法，实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;instancetype)buttonWithTitle:(NSString &lt;/span&gt;*)title style:(TBActionButtonStyle)style handler:(void (^ __nullable)( TBActionButton * _Nonnull &lt;span class=&quot;keyword&quot;&gt;button))handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionButton *&lt;span class=&quot;keyword&quot;&gt;button &lt;/span&gt;= [TBActionButton &lt;span class=&quot;keyword&quot;&gt;buttonWithType:UIButtonTypeCustom];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;button.style &lt;/span&gt;= style&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;button.handler &lt;/span&gt;= handler&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;button.clipsToBounds &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;button &lt;/span&gt;setTitle:title forState:UIControlStateNormal]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;button &lt;/span&gt;setBackgroundColor:[UIColor clearColor]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;button.titleLabel &lt;/span&gt;setFont:[UIFont systemFontOfSize:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了这个版本的工厂方法，还有个不提供 &lt;code&gt;handler&lt;/code&gt; 参数的版本：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instance&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;)buttonWithTitle:(&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)title style:(&lt;span class=&quot;type&quot;&gt;TBActionButtonStyle&lt;/span&gt;)style;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于 block 的属性内存管理语义是用 &lt;code&gt;strong&lt;/code&gt; 还是 &lt;code&gt;copy&lt;/code&gt;，其实这是个历史问题，在 MRC 时代是需要用 &lt;code&gt;copy&lt;/code&gt; 的，因为 ARC 会自动帮我们进行 &lt;code&gt;copy&lt;/code&gt;，所以这里用 &lt;code&gt;strong&lt;/code&gt; 也可以。苹果官方的态度比较换旧，建议仍然使用 &lt;code&gt;copy&lt;/code&gt;，虽然这并没什么乱用。&lt;/p&gt;
&lt;p&gt;因为按钮的数量毕竟有限，对于按钮圆角的实现就不需要考虑性能问题了。有关圆角的这部分后续会有专门一节叙述。&lt;/p&gt;
&lt;h1 id=&quot;接口实现&quot;&gt;&lt;a href=&quot;#接口实现&quot; class=&quot;headerlink&quot; title=&quot;接口实现&quot;&gt;&lt;/a&gt;接口实现&lt;/h1&gt;&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 具有 &lt;code&gt;UIActionSheet&lt;/code&gt; 的&lt;strong&gt;几乎&lt;/strong&gt;所有接口和属性，可以说前者是后者的超集。之所以说『几乎』，是因为我在 &lt;code&gt;UIWindow&lt;/code&gt; 上模态显示 ActionSheet，相当于 &lt;code&gt;UIAlertController&lt;/code&gt; 的做法，于是以下 &lt;code&gt;UIActionSheet&lt;/code&gt; 的接口我目前并没有实现：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromToolbar:&lt;span class=&quot;params&quot;&gt;(UIToolbar *)&lt;/span&gt;view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromTabBar:&lt;span class=&quot;params&quot;&gt;(UITabBar *)&lt;/span&gt;view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromBarButtonItem:&lt;span class=&quot;params&quot;&gt;(UIBarButtonItem *)&lt;/span&gt;item animated:&lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;animated ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromRect:&lt;span class=&quot;params&quot;&gt;(CGRect)&lt;/span&gt;rect inView:&lt;span class=&quot;params&quot;&gt;(UIView *)&lt;/span&gt;view animated:&lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;animated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showInView:&lt;span class=&quot;params&quot;&gt;(UIView *)&lt;/span&gt;view;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外 &lt;code&gt;UIActionSheet&lt;/code&gt; 的属性和接口在 &lt;code&gt;TBActionSheet&lt;/code&gt; 都有山寨，只是把 &lt;code&gt;UI&lt;/code&gt; 换成了 &lt;code&gt;TB&lt;/code&gt;，比如 &lt;code&gt;delegate&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nullable&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) id&amp;lt;TBActionSheetDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;TBActionSheetDelegate&lt;/code&gt; 中的方法跟 &lt;code&gt;UIActionSheetDelegate&lt;/code&gt; 中的方法 selector 完全一样。&lt;/p&gt;
&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;初始化方法的设计延续了 &lt;code&gt;UIActionSheet&lt;/code&gt; 的接口，在此基础上还加了个带有 &lt;code&gt;message&lt;/code&gt; 参数的方法。&lt;strong&gt;为了减少冗余代码，实现高内聚低耦合的设计模式，一般会写一个参数最多功能最全的方法，其他参数少的方法去调用前者&lt;/strong&gt;。这种层层 Forward 参数的方式在 API 设计中很常见。由于这两个方法都带有可变参数，且&lt;strong&gt;不能在一个带有可变参数的方法中直接调用另一个带有可变参数的方法&lt;/strong&gt;。因为函数参数入栈或者存入寄存器的方式都是有规可循的，我也曾尝试过在 x86-64 下找出指针固定的偏移量，遵循 x86-64 calling convention 下的可变参数调用从而修正 &lt;code&gt;va_list&lt;/code&gt; 结构体的值。x86 下 &lt;code&gt;va_list&lt;/code&gt; 是个 &lt;code&gt;char *&lt;/code&gt;，而 x86-64 架构下 &lt;code&gt;va_list&lt;/code&gt; 是个结构体：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gp_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fp_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *overflow_arg_area;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *reg_save_area;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; va_list[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我当时正是给结构体中的数据加上一段位移，使其在可变参数函数之间调用时不 crash，但这样意义不大。关于 &lt;code&gt;va_list&lt;/code&gt; 与 calling convention 的细节可以参考 &lt;a href=&quot;http://blog.csdn.net/videosender/article/details/6425671&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;c/c++ 里面的变长参数的实现&lt;/a&gt; 和 &lt;a href=&quot;http://stackoverflow.com/questions/4958384/what-is-the-format-of-the-x86-64-va-list-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;System V Application Binary Interface&lt;/a&gt; 第52页，这里不再做延伸。&lt;/p&gt;
&lt;p&gt;简单的做法是写一个方法接受参数类型为 &lt;code&gt;va_list&lt;/code&gt;，将大部分公共逻辑写在里面。这些公共逻辑包括调用 &lt;code&gt;init&lt;/code&gt;，给 &lt;code&gt;title&lt;/code&gt;、&lt;code&gt;message&lt;/code&gt; 和 &lt;code&gt;delegate&lt;/code&gt;属性赋值，添加 Cancel 和 Destructive 按钮，遍历 &lt;code&gt;va_list&lt;/code&gt; 添加按钮：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)title message:(nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)message delegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;TBActionSheetDelegate&amp;gt;)delegate cancelButtonTitle:(nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)cancelButtonTitle destructiveButtonTitle:(nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)destructiveButtonTitle firstOtherButtonTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)firstOtherButtonTitle titleList:(va_list)argList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _title = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _message = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _delegate = delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (destructiveButtonTitle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _destructiveButtonIndex = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:destructiveButtonTitle style:TBActionButtonStyleDestructive];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstOtherButtonTitle) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 第一个参数 firstOtherButtonTitle 是不属于参数列表的,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:firstOtherButtonTitle style:TBActionButtonStyleDefault];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* eachArg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((eachArg = va_arg(argList, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;*))) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 从 args 中遍历出参数，NSString* 指明类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:eachArg style:TBActionButtonStyleDefault];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cancelButtonTitle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _cancelButtonIndex = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:cancelButtonTitle style:TBActionButtonStyleCancel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为第一个参数不包含在 &lt;code&gt;va_list&lt;/code&gt; 中，所以也需要把第一个参数传入。&lt;code&gt;va_arg (va_list ap, type)&lt;/code&gt; 像个迭代器一样每次根据 &lt;code&gt;type&lt;/code&gt; 计算位移获取参数并更新 &lt;code&gt;va_list&lt;/code&gt;。 &lt;code&gt;va_list&lt;/code&gt; 的初始化是用 &lt;code&gt;va_start&lt;/code&gt; 宏初始化的，并以 &lt;code&gt;va_end&lt;/code&gt; 宏结束。有关这些宏的定义，详见 &lt;a href=&quot;http://www.cplusplus.com/reference/cstdarg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stdarg.h&lt;/a&gt; 和 &lt;a href=&quot;http://blog.csdn.net/edonlii/article/details/8497704&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;于是那两个可变参数的初始化方法代码大大减少，调用上面的方法就可以。这样先将可变参数内容初始化到 &lt;code&gt;va_list&lt;/code&gt; 中再传参调动的方式避免了 calling convention 的问题：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)&lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;(NSString *)title &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;(id&amp;lt;TBActionSheetDelegate&amp;gt;)delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;(nullable NSString *)cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;(nullable NSString *)destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;otherButtonTitles:&lt;/span&gt;(nullable NSString *)otherButtonTitles, ... NS_REQUIRES_NIL_TERMINATION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list argList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从 otherButtonTitles 开始遍历参数，不包括 otherButtonTitles 本身.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(argList, otherButtonTitles);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [self &lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;title &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;nil &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;firstOtherButtonTitle:&lt;/span&gt;otherButtonTitles &lt;span class=&quot;string&quot;&gt;titleList:&lt;/span&gt;argList];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(argList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)&lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;(NSString *)title &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;(nullable NSString *)message &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;(id&amp;lt;TBActionSheetDelegate&amp;gt;)delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;(nullable NSString *)cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;(nullable NSString *)destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;otherButtonTitles:&lt;/span&gt;(nullable NSString *)otherButtonTitles, ... NS_REQUIRES_NIL_TERMINATION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list argList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从 otherButtonTitles 开始遍历参数，不包括 otherButtonTitles 本身.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(argList, otherButtonTitles);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [self &lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;title &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;message &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;firstOtherButtonTitle:&lt;/span&gt;otherButtonTitles &lt;span class=&quot;string&quot;&gt;titleList:&lt;/span&gt;argList];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(argList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了减少冗余代码我也是拼了。。。下面继续说 &lt;code&gt;init&lt;/code&gt; 方法。主要工作是对一些属性的初始化工作，并将背景和容器依次添加为子视图，还有监听状态栏朝向变化的通知：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithFrame:[&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _background = [[TBActionBackground alloc] initWithFrame:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addSubview:_background];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _actionContainer = [[TBActionContainer alloc] initWithSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addSubview:_actionContainer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _buttons = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _separators = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//set default values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cancelButtonIndex = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _destructiveButtonIndex = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(statusBarDidChangeOrientation:) name:&lt;span class=&quot;built_in&quot;&gt;UIApplicationDidChangeStatusBarOrientationNotification&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;添加按钮&quot;&gt;&lt;a href=&quot;#添加按钮&quot; class=&quot;headerlink&quot; title=&quot;添加按钮&quot;&gt;&lt;/a&gt;添加按钮&lt;/h2&gt;&lt;p&gt;添加按钮的实现就是调用 &lt;code&gt;TBActionButton&lt;/code&gt; 的工厂方法新建一个按钮，然后将其设置好点击事件处理的方法后，将按钮实例添加到 &lt;code&gt;buttons&lt;/code&gt; 数组中。针对按钮不同的风格，会更新 &lt;code&gt;cancelButtonIndex&lt;/code&gt; 和 &lt;code&gt;destructiveButtonIndex&lt;/code&gt;，这里做了个兼容性的妥协：&lt;code&gt;UIActionSheet&lt;/code&gt; 提供的接口只能至多有一个 &lt;code&gt;cancelButtonTitle&lt;/code&gt; 或 &lt;code&gt;destructiveButtonTitle&lt;/code&gt;，而 &lt;code&gt;UIAlertController&lt;/code&gt; 的接口却支持多个。&lt;code&gt;TBActionSheet&lt;/code&gt; 支持多个 &lt;code&gt;cancelButtonTitle&lt;/code&gt; 或 &lt;code&gt;destructiveButtonTitle&lt;/code&gt;，但 &lt;code&gt;cancelButtonIndex&lt;/code&gt; 和 &lt;code&gt;destructiveButtonIndex&lt;/code&gt; 总是被更新为最后一个添加的对应风格按钮的 Index：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSInteger)&lt;span class=&quot;string&quot;&gt;addButtonWithTitle:&lt;/span&gt;(nullable NSString *)title &lt;span class=&quot;string&quot;&gt;style:&lt;/span&gt;(TBActionButtonStyle)style &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^ __nullable)( TBActionButton * _Nonnull button))handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionButton *button = [TBActionButton &lt;span class=&quot;string&quot;&gt;buttonWithTitle:&lt;/span&gt;title &lt;span class=&quot;string&quot;&gt;style:&lt;/span&gt;style &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;handler];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [button &lt;span class=&quot;string&quot;&gt;addTarget:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;action:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;buttonTapped:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;forControlEvents:&lt;/span&gt;UIControlEventTouchUpInside];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.buttons &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;button];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSInteger index = self.buttons.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (style) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;TBActionButtonStyleDefault:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;TBActionButtonStyleCancel:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.cancelButtonIndex = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;TBActionButtonStyleDestructive:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.destructiveButtonIndex = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;        default:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加按钮时把传入的 &lt;code&gt;style&lt;/code&gt; 和 &lt;code&gt;handler&lt;/code&gt; 再次传给了 &lt;code&gt;TBActionButton&lt;/code&gt; 的工厂方法。此外还有两个参数更简洁的方法可供选择，实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;addButtonWithTitle&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSString&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;title&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[self addButtonWithTitle:title style:TBActionButtonStyleDefault]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;addButtonWithTitle&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSString&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(TBActionButtonStyle)style&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[self addButtonWithTitle:title style:style handler:nil]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这也是顺应了之前的设计，减少冗余代码。&lt;/p&gt;
&lt;h2 id=&quot;show&quot;&gt;&lt;a href=&quot;#show&quot; class=&quot;headerlink&quot; title=&quot;show&quot;&gt;&lt;/a&gt;show&lt;/h2&gt;&lt;p&gt;在调用 &lt;code&gt;show&lt;/code&gt; 方法之前，使用者可能会修改一些属性的值，所以大量的绘制和计算都是在 &lt;code&gt;show&lt;/code&gt; 方法调用时执行的。在显示 ActionSheet 的时候需要有一组动画效果：将背景颜色由透明设成半透明黑色，并将容器从屏幕外由下至上平移至屏幕底部。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)show&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(willPresentAlertView:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate willPresentActionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupNewWindow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupLayout];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupStyle];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//弹出 ActionSheet 动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^animations)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ^() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.background.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithWhite:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupContainerFrame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^completion)(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) = ^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(didPresentActionSheet:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate didPresentActionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.visible = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (kiOS7Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDuration delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; usingSpringWithDamping:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDampingRatio initialSpringVelocity:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationVelocity options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseInOut&lt;/span&gt; animations:animations completion:completion];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDuration delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseInOut&lt;/span&gt; animations:animations completion:completion];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在动画开始之前最关键的三个步骤是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置新的 &lt;code&gt;UIWindow&lt;/code&gt;：&lt;code&gt;setupNewWindow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置布局：&lt;code&gt;setupLayout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置毛玻璃效果、圆角、背景颜色等风格：&lt;code&gt;setupStyle&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;setupNewWindow&quot;&gt;&lt;a href=&quot;#setupNewWindow&quot; class=&quot;headerlink&quot; title=&quot;setupNewWindow&quot;&gt;&lt;/a&gt;setupNewWindow&lt;/h3&gt;&lt;p&gt;&lt;code&gt;setupNewWindow&lt;/code&gt; 的具体实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupNewWindow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isVisible]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow = [&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication].keyWindow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow interruptGesture];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionSheetController *actionSheetVC = [[TBActionSheetController alloc] initWithNibName:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; bundle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    actionSheetVC.actionSheet = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window = [[&lt;span class=&quot;built_in&quot;&gt;UIWindow&lt;/span&gt; alloc] initWithFrame:[&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.autoresizingMask = &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.opaque = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.rootViewController = actionSheetVC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在把新的 &lt;code&gt;UIWindow&lt;/code&gt; 搬到屏幕上之前先用 &lt;code&gt;previousKeyWindow&lt;/code&gt; 属性记录下当前的 &lt;code&gt;keyWindow&lt;/code&gt;，因为以后会经常用到它。下面会详细展开讲述 &lt;code&gt;setupNewWindow&lt;/code&gt; 方法都干了啥。&lt;/p&gt;
&lt;h4 id=&quot;Autorotation&quot;&gt;&lt;a href=&quot;#Autorotation&quot; class=&quot;headerlink&quot; title=&quot;Autorotation&quot;&gt;&lt;/a&gt;Autorotation&lt;/h4&gt;&lt;p&gt;之前说过 &lt;code&gt;TBActionSheet&lt;/code&gt; 是在 &lt;code&gt;UIWindow&lt;/code&gt; 上模态展示，其实这么做的另一个原因是为了更方便地实现自动旋转。旋转事件的传递路径为：&lt;code&gt;UIApplication&lt;/code&gt; -&amp;gt; &lt;code&gt;UIWindow&lt;/code&gt; -&amp;gt; &lt;code&gt;rootViewController&lt;/code&gt; -&amp;gt; &lt;code&gt;rootViewController.view&lt;/code&gt;。所以需要将 &lt;code&gt;TBActionSheet&lt;/code&gt; 作为 &lt;code&gt;rootViewController.view&lt;/code&gt; 的子视图，这样让其跟着屏幕一起旋转。而在 iOS7 时代，&lt;code&gt;UIWindow&lt;/code&gt; 是不会跟着一起旋转的，其 &lt;code&gt;bounds&lt;/code&gt; 是不变的，坐标系计算跟 iOS8 之后的不同，所以 &lt;code&gt;TBActionSheet&lt;/code&gt; 自动旋转目前仅支持 iOS8+。为了方便在控制器中处理旋转事件，我写了个 &lt;code&gt;TBActionSheetController&lt;/code&gt;，它对 &lt;code&gt;TBActionSheet&lt;/code&gt; 有一个弱引用，只是为了方便一些操作。&lt;/p&gt;
&lt;p&gt;实现自动旋转的主要流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建一个 &lt;code&gt;TBActionSheetController&lt;/code&gt; 实例 &lt;code&gt;actionSheetVC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建一个 &lt;code&gt;UIWindow&lt;/code&gt; 实例 &lt;code&gt;window&lt;/code&gt; 并赋值给 &lt;code&gt;window&lt;/code&gt; 属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.rootViewController = actionSheetVC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[actionSheetVC.view addSubview: YOUR_VIEW]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;YOUR_VIEW&lt;/code&gt; 就是想要自动旋转的视图，在这里就是 &lt;code&gt;TBActionSheet&lt;/code&gt; 实例啦。&lt;/p&gt;
&lt;p&gt;完成了以上流程后，还需要在 &lt;code&gt;TBActionSheet&lt;/code&gt; 接受到朝向变化的通知后手动更新 &lt;code&gt;frame&lt;/code&gt; 和 &lt;code&gt;bounds&lt;/code&gt;。PS：因为我们没使用自动布局，而是手动调整 &lt;code&gt;frame&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)statusBarDidChangeOrientation:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)notification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds = [&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.background.frame = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupContainerFrame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;setupContainerFrame&lt;/code&gt; 方法在后面会讲到。&lt;/p&gt;
&lt;h4 id=&quot;interruptGesture&quot;&gt;&lt;a href=&quot;#interruptGesture&quot; class=&quot;headerlink&quot; title=&quot;interruptGesture&quot;&gt;&lt;/a&gt;interruptGesture&lt;/h4&gt;&lt;p&gt;如果作用于 &lt;code&gt;previousKeyWindow&lt;/code&gt; 上的手势触发了 ActionSheet 的显示，但此时这个手势没有终止（比如 Pan 手势一直在捕获），这时就会引发一系列问题（测试的同学功不可没），必须中断其他窗口正在捕获的手势。思路是递归遍历子视图树中的所有手势对象，针对 Tap 和 Pan 这两种手势做中断处理。中断的方法就是将 &lt;code&gt;enabled&lt;/code&gt; 设为 &lt;code&gt;NO&lt;/code&gt; 再设为 &lt;code&gt;YES&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)interruptGesture&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *gesture &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.gestureRecognizers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (([gesture isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; class]] || [gesture isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; class]]) &amp;amp;&amp;amp; gesture.enabled == &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gesture.enabled = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gesture.enabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [subview interruptGesture];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;TBActionSheetController&quot;&gt;&lt;a href=&quot;#TBActionSheetController&quot; class=&quot;headerlink&quot; title=&quot;TBActionSheetController&quot;&gt;&lt;/a&gt;TBActionSheetController&lt;/h4&gt;&lt;p&gt;为了让 ActionSheet 自动旋转，还需要覆写 &lt;code&gt;TBActionSheetController&lt;/code&gt; 的 &lt;code&gt;shouldAutorotate&lt;/code&gt; 方法并返回 &lt;code&gt;YES&lt;/code&gt;，以及在 &lt;code&gt;supportedInterfaceOrientations&lt;/code&gt; 方法中返回想要旋转的朝向 Mask。为了让 &lt;code&gt;TBActionSheetController&lt;/code&gt; 的状态栏风格和 Hidden 状态与 ActionSheet 展现之前相同，还需要覆写 &lt;code&gt;preferredStatusBarStyle&lt;/code&gt; 和 &lt;code&gt;prefersStatusBarHidden&lt;/code&gt; 这两个方法。通过 &lt;code&gt;previousKeyWindow&lt;/code&gt; 可以递归找到最顶层的控制器，并递归调用 &lt;code&gt;childViewControllerForStatusBarXXX&lt;/code&gt; 方法向其获取可以代表状态栏风格或 Hidden 的控制器。这里用到了一些关于 &lt;code&gt;UIWindow&lt;/code&gt; 的辅助方法，具体实现在 &lt;code&gt;UIWindow (TBAdditions)&lt;/code&gt; 类别中。&lt;/p&gt;
&lt;h3 id=&quot;setupLayout&quot;&gt;&lt;a href=&quot;#setupLayout&quot; class=&quot;headerlink&quot; title=&quot;setupLayout&quot;&gt;&lt;/a&gt;setupLayout&lt;/h3&gt;&lt;p&gt;因为没有用自动布局，所以需要在容器中从上到下依次排列视图，宽度由 &lt;code&gt;sheetWidth&lt;/code&gt; 属性得知，只需计算好当前的纵坐标。纵坐标是根据各组件高度累加计算的，所以本质上还是对高度的计算。&lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 的高度可根据字体和文字内容计算出来。&lt;code&gt;customView&lt;/code&gt; 是由调用方提供，高度也可以获得。按钮的高度由 &lt;code&gt;buttonHeight&lt;/code&gt; 属性决定。除此之外还有视图之间的空隙，大部分都是小的空隙，Cancel 按钮上下都是大空隙。我将大小空隙的高度分别『钦定』为 8point 和 0.5point，并没提供属性用于个性化。其实这里叫『空隙』不准确，应该是『隔板（Separator）』，因为我在控件之间加了透明的 &lt;code&gt;UIView&lt;/code&gt;，它可以根据需求变换背景颜色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setupLayout&lt;/code&gt; 方法的主要流程如下（忽略创建和添加 Separator）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 属性依次为 &lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 创建实例，并添加到容器中（&lt;code&gt;actionContainer.header&lt;/code&gt;），计算 &lt;code&gt;frame&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;处理调用者传入的 &lt;code&gt;customView&lt;/code&gt;，添加到容器中（&lt;code&gt;actionContainer.custom&lt;/code&gt;），计算 &lt;code&gt;customView&lt;/code&gt; 的 &lt;code&gt;frame&lt;/code&gt;。 &lt;/li&gt;
&lt;li&gt;遍历 &lt;code&gt;buttons&lt;/code&gt; 数组向容器中（&lt;code&gt;actionContainer&lt;/code&gt;）添加按钮，计算按钮的 &lt;code&gt;frame&lt;/code&gt;，并根据按钮样式调整文字颜色和 Separator 高度。&lt;/li&gt;
&lt;li&gt;根据 &lt;code&gt;offsetY&lt;/code&gt; 属性计算容器下方需要『空』出来的高度。&lt;code&gt;offsetY&lt;/code&gt; 为 ActionSheet 下方的 y 轴位移，向下为正，非负值无效，默认值为 -8。最后计算容器的 &lt;code&gt;frame&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这部分的计算略复杂，只是阐述下思想。但这还不是最复杂的部分。&lt;/p&gt;
&lt;h3 id=&quot;setupStyle&quot;&gt;&lt;a href=&quot;#setupStyle&quot; class=&quot;headerlink&quot; title=&quot;setupStyle&quot;&gt;&lt;/a&gt;setupStyle&lt;/h3&gt;&lt;p&gt;此方法主要是设置风格，比如毛玻璃效果、圆角和颜色等，依赖于 &lt;code&gt;setupLayout&lt;/code&gt; 的结果。&lt;/p&gt;
&lt;p&gt;微信的样式是整个容器背景全带毛玻璃效果，且没有圆角；系统样式中 iOS9 和 iOS8 只有按钮和标题部分带毛玻璃效果，其余地方镂空透明的，且 iOS9 的圆角更大些。iOS7 没有毛玻璃效果。&lt;code&gt;TBActionSheet&lt;/code&gt; 有几个属性用来调节这些参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;backgroundTransparentEnabled&lt;/code&gt; 是否让 ActionSheet 背景透明（镂空）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blurEffectEnabled&lt;/code&gt; 是否启用毛玻璃效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rectCornerRadius&lt;/code&gt; 矩形圆角半径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ambientColor&lt;/code&gt; ActionSheet 的环境色&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;BlurEffect-amp-Separator&quot;&gt;&lt;a href=&quot;#BlurEffect-amp-Separator&quot; class=&quot;headerlink&quot; title=&quot;BlurEffect &amp;amp; Separator&quot;&gt;&lt;/a&gt;BlurEffect &amp;amp; Separator&lt;/h4&gt;&lt;p&gt;&lt;code&gt;UIVisualEffectView&lt;/code&gt; 只支持 iOS8+，为了兼容 iOS7 及更低版本，我的策略是将屏幕上容器区域矩形进行截图，并做三次 Box 模糊处理，并将图片设置为容器的图片（但愿你还记得它们都是 &lt;code&gt;UIImageView&lt;/code&gt;），模拟毛玻璃效果。苹果在 WWDC2013 给出了开源实现，使用的是 CI 框架的 Box 模糊函数，效率比高斯模糊要高：&lt;a href=&quot;https://developer.apple.com/downloads/download.action?path=wwdc_2013/wwdc_2013_sample_code/ios_uiimageeffects.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ios_uiimageeffects.zip&lt;/a&gt;。针对容器镂空的情况，不能将容器矩形整体截图，需要将非镂空控件的每一部分单独截图并做模糊处理，然后将处理好的图片设置为控件的图片（因为容器中的控件都是 &lt;code&gt;UIImageView&lt;/code&gt; 或 &lt;code&gt;UIButton&lt;/code&gt;，不包含 Separator）。而使用 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 的时候也同样遵循这个道理。 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 的优点是针对变化的背景可以实时渲染出毛玻璃效果，而截图手动 Box 模糊就做不到这点；缺点是除非使用 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 的私有接口否则不能调节模糊半径，而 CI 框架提供的函数可以做到。&lt;/p&gt;
&lt;p&gt;也就是说这里需要做两个判断：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;毛玻璃效果策略：iOS8+ 用 &lt;code&gt;UIVisualEffectView&lt;/code&gt;；否则用截图和 Box 模糊；如果不开启毛玻璃效果则使用半透明（alpha=0.5）的背景色（&lt;code&gt;ambientColor&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;ActionSheet 背景是否镂空：不镂空则对容器矩形整体截图，镂空则只对容器内的控件（&lt;code&gt;header&lt;/code&gt;,&lt;code&gt;custom&lt;/code&gt; 和按钮）矩形截图。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为 iOS7 下的毛玻璃效果使用的是截图，所以需要在设备屏幕旋转时刷新下 UI，再次调用 &lt;code&gt;setupStyle&lt;/code&gt; 方法。需要覆写 &lt;code&gt;TBActionSheetController&lt;/code&gt; 中下面的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;didRotateFromInterfaceOrientation&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UIInterfaceOrientation)fromInterfaceOrientation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (self.actionSheet.blurEffectEnabled &amp;amp;&amp;amp; !kiOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-attr&quot;&gt;[self.actionSheet setupStyle]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;截屏&quot;&gt;&lt;a href=&quot;#截屏&quot; class=&quot;headerlink&quot; title=&quot;截屏&quot;&gt;&lt;/a&gt;截屏&lt;/h5&gt;&lt;p&gt;截屏就是在屏幕上的进行截图，表面上看上去很简单，但实践的时候也会碰到坑。首先我要截取的肯定是 ActionSheet 出现之前的屏幕，所以之前提到过的 &lt;code&gt;previousKeyWindow&lt;/code&gt; 属性就又派上用场了，它是 ActionSheet 展现前的窗口，通过它可以获取到最顶层的控制器，然后获取控制器管理的 &lt;code&gt;view&lt;/code&gt;，接着就是用 UIKit 那套函数截图。这里需要区分下 iOS6 和 iOS7+ 渲染视图层级要调用不同的接口，并注意一个仅仅发生在 iOS7 上的 crash：&lt;strong&gt;如果截屏区域的长或宽过小时将会引发 crash，这是 iOS7 系统的 bug&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  从区域截屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param aRect 区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param view  截取的 view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @return  截取的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)screenShotRect:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)aRect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取最上层的 UIViewController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *topController = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow currentViewController];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view = topController.view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIGraphicsBeginImageContext&lt;/span&gt;(view.bounds.size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([view respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(drawViewHierarchyInRect:afterScreenUpdates:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; crashMagicNumber = &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// size 小于0.3 在 iOS7 上会导致 crash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (view.frame.size.width &amp;gt;= crashMagicNumber &amp;amp;&amp;amp; view.frame.size.height &amp;gt;= crashMagicNumber ) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// resolve iOS7 size crash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [view drawViewHierarchyInRect:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds afterScreenUpdates:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;/* iOS 6 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [view.layer renderInContext:&lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *screenshotimage = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cutFromImage:screenshotimage inRect:aRect];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在图片中截取图片时需要注意 Retina 屏幕的 &lt;code&gt;scale&lt;/code&gt; 问题，区分『坐标点』与『像素点』就好。还有要注意如果截图矩形 &lt;code&gt;rect&lt;/code&gt; 如果超出了图片 &lt;code&gt;image&lt;/code&gt; 范围，超出的那部分会是透明的。&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  从图片中切图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param image 要被切的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param rect  这里可以设置想要截图的区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @return 截图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIImage *)cutFromImage:(UIImage *)&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt; inRect:(CGRect) &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGImageRef imageRef = &lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGRect transRect = CGRectMake(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.origin.x*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.origin.y*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGImageRef imageRefRect =CGImageCreateWithImageInRect(imageRef, transRect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImage *sendImage = [[UIImage alloc] initWithCGImage:imageRefRect &lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt; orientation:UIImageOrientationUp];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData *imageViewData = UIImagePNGRepresentation(sendImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGImageRelease(imageRefRect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [UIImage imageWithData:imageViewData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;ambientColor&quot;&gt;&lt;a href=&quot;#ambientColor&quot; class=&quot;headerlink&quot; title=&quot;ambientColor&quot;&gt;&lt;/a&gt;ambientColor&lt;/h5&gt;&lt;p&gt;环境色其实就是容器的背景颜色，但不能叫 &lt;code&gt;backgroundColor&lt;/code&gt;，因为 &lt;code&gt;UIView&lt;/code&gt; 中已经有个 &lt;code&gt;backgroundColor&lt;/code&gt; 属性了，如果我们自己强制声明重名的属性会导致奇怪的问题。比如设置好的背景色在程序运行中自动被设成其他颜色（一般是黑色），而且是随机出现的，而且一旦出现就会一直复现，除非杀进程。PS：别问我为啥知道这么多，都是泪啊！用在公司项目中被测试同学提过好多次 bug！&lt;/p&gt;
&lt;p&gt;回归正题！如何将环境色加入到容器中呢？毕竟有多种情况，但其思想跟毛玻璃模糊的思路差不多：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/TBActionSheet/ambientColor.png&quot; alt=&quot;环境色设置策略&quot;&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是在倒数第二个分支『在 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 后插入环境色视图』。是在控件的后面插入&lt;br&gt;&lt;code&gt;UIVisualEffectView&lt;/code&gt; 后再插入一层背景颜色为 &lt;code&gt;ambientColor&lt;/code&gt; 的 &lt;code&gt;UIView&lt;/code&gt;。如果控件类型为 &lt;code&gt;TBActionButton&lt;/code&gt;，那么需要将其 &lt;code&gt;behindColorView&lt;/code&gt; 属性设为背景色为 &lt;code&gt;ambientColor&lt;/code&gt; 的 &lt;code&gt;UIView&lt;/code&gt; 对象。原因是按钮此时无背景色，高亮状态需要调节 &lt;code&gt;behindColorView&lt;/code&gt; 的 &lt;code&gt;alpha&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这部分的代码逻辑其实略复杂，但还不是最烧脑的。&lt;/p&gt;
&lt;h5 id=&quot;Separator&quot;&gt;&lt;a href=&quot;#Separator&quot; class=&quot;headerlink&quot; title=&quot;Separator&quot;&gt;&lt;/a&gt;Separator&lt;/h5&gt;&lt;p&gt;在 &lt;code&gt;setupLayout&lt;/code&gt; 中创建的 Separator 都会添加到 &lt;code&gt;separators&lt;/code&gt; 数组中，并作为容器的子视图参与 UI 绘制：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)&lt;span class=&quot;keyword&quot;&gt;addSeparatorLineAt:(CGPoint) &lt;/span&gt;point &lt;span class=&quot;keyword&quot;&gt;isBigFragment:(BOOL) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;isBigFragment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *separatorLine = [[UIView alloc] initWithFrame:CGRectMake(point.x, point.y, &lt;span class=&quot;keyword&quot;&gt;self.sheetWidth, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;isBigFragment?bigFragment:smallFragment)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    separatorLine.&lt;span class=&quot;keyword&quot;&gt;backgroundColor &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;self.separatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.actionContainer &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addSubview:separatorLine];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.separators &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:separatorLine];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Separator 只是个普通的 &lt;code&gt;UIView&lt;/code&gt;，可以透明也可以有颜色，这取决于调用者的口味。微信样式中按钮之间是有些深色的，可以通过 &lt;code&gt;separatorColor&lt;/code&gt; 属性来设置这个颜色。Separator 的两种尺寸之前提到过，BigFragment 为 8point，位于 Cancel 按钮上下，即使 Cancel 按钮在中间，也可以应付自如。&lt;/p&gt;
&lt;h4 id=&quot;RectCorner&quot;&gt;&lt;a href=&quot;#RectCorner&quot; class=&quot;headerlink&quot; title=&quot;RectCorner&quot;&gt;&lt;/a&gt;RectCorner&lt;/h4&gt;&lt;p&gt;圆角的实现不复杂，但是判断哪里需要处理成圆角很复杂：&lt;strong&gt;哪个 &lt;code&gt;UIView&lt;/code&gt; 的哪个角需要处理成圆角&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我写了个 &lt;code&gt;UIView (TBRectCorner)&lt;/code&gt; 类别方便加圆角，原理是用贝塞尔曲线的 &lt;code&gt;bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:&lt;/code&gt; 方法绘制圆角矩形路径 &lt;code&gt;maskPath&lt;/code&gt;，然后将其 &lt;code&gt;CGPath&lt;/code&gt; 作为 &lt;code&gt;layer.mask&lt;/code&gt; 的路径。用贝塞尔曲线的优点就是可以针对矩形某个单独的角做圆角，而这正是我需要的。我在 &lt;code&gt;UIView (TBRectCorner)&lt;/code&gt; 中以&lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/#Objective-C-Associated-Objects&quot;&gt;关联对象&lt;/a&gt;的方式加了个 &lt;code&gt;tbRectCorner&lt;/code&gt; 属性，用于标记圆角类型（&lt;code&gt;TBRectCorner&lt;/code&gt;）。ActionSheet 中的控件一共有四种圆角类型：顶部圆角、底部圆角、全圆角和无圆角。&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_OPTIONS&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSUInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;TBRectCorner&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerTop&lt;/span&gt; = 1 &amp;lt;&amp;lt; 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerBottom&lt;/span&gt; = 1 &amp;lt;&amp;lt; 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerNone&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerAll&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;TBRectCornerTop&lt;/span&gt;|&lt;span class=&quot;type&quot;&gt;TBRectCornerBottom&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;TBRectCorner&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,assign) &lt;span class=&quot;type&quot;&gt;TBRectCorner&lt;/span&gt; tbRectCorner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setCornerRadius:(&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt;) radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而判断哪里需要圆角的过程就复杂了，用到了大量的 if-else 判断来修改 &lt;code&gt;tbRectCorner&lt;/code&gt; 属性。这项工作复杂的原因就在于其布局不确定性，加圆角的规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个容器的边缘都有圆角。容器内部 Separator 为 BigFragment 的上下边缘都有圆角。（Cancel 按钮上下的 Separator 都为 BigFragment）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 如果都为 &lt;code&gt;nil&lt;/code&gt;，也就是容器的 &lt;code&gt;header&lt;/code&gt; 无内容，则容器顶部圆角加在 &lt;code&gt;custom&lt;/code&gt; 顶部。&lt;/li&gt;
&lt;li&gt;如果传入的 &lt;code&gt;customView&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt;，则容器的 &lt;code&gt;custom&lt;/code&gt; 无内容，则容器顶部圆角加在第一个按钮顶部。&lt;/li&gt;
&lt;li&gt;容器底部圆角加在最后一个按钮底部。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体实现代码就不贴了，分散在 &lt;code&gt;setupStyle&lt;/code&gt; 方法的多个位置。&lt;/p&gt;
&lt;h4 id=&quot;setupContainerFrame&quot;&gt;&lt;a href=&quot;#setupContainerFrame&quot; class=&quot;headerlink&quot; title=&quot;setupContainerFrame&quot;&gt;&lt;/a&gt;setupContainerFrame&lt;/h4&gt;&lt;p&gt;&lt;code&gt;show&lt;/code&gt; 方法中的动画会将整个容器从屏幕外右下至上滑动至屏幕底部，动画的终点就是容器最终的 &lt;code&gt;frame&lt;/code&gt;。在计算纵坐标时需要考虑到 iOS7 的状态栏的高度：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupContainerFrame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.actionContainer.frame = CGRectMake(kContainerLeft, kScreenHeight - self.actionContainer.frame.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; - (!kiOS7Later? &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), self.actionContainer.frame.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;, self.actionContainer.frame.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外还用到了几个自定义的宏，都是为了简化代码的：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine kScreenWidth [UIScreen mainScreen]&lt;span class=&quot;selector-class&quot;&gt;.bounds&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.width&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine kScreenHeight [UIScreen mainScreen]&lt;span class=&quot;selector-class&quot;&gt;.bounds&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.height&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine kContainerLeft ((kScreenWidth - self.sheetWidth)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h3&gt;&lt;p&gt;从 iOS7 开始 UIKit 支持了 Spring 动画，有趣的是 SpriteKit 和 UIDynamic 也是在 iOS7 新加入的。我猜其底层实现应该是公用的。&lt;/p&gt;
&lt;p&gt;我只是简单的支持了弹簧动画，添加了几个属性作为动画参数而已。可能今后会丰富下动画种类，或是提供接口，让调用者传入自定义的动画。&lt;/p&gt;
&lt;p&gt;目前调节动画的参数有三个属性：&lt;code&gt;animationDuration&lt;/code&gt;，&lt;code&gt;animationDampingRatio&lt;/code&gt; 和 &lt;code&gt;animationVelocity&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;close-amp-buttonTapped&quot;&gt;&lt;a href=&quot;#close-amp-buttonTapped&quot; class=&quot;headerlink&quot; title=&quot;close &amp;amp; buttonTapped&quot;&gt;&lt;/a&gt;close &amp;amp; buttonTapped&lt;/h2&gt;&lt;p&gt;用户点击背景或者按钮时，ActionSheet 会执行消失动画，并伴随着 &lt;code&gt;delegate&lt;/code&gt; 的一些回调或是执行 block。这两个方法的实现差不多，仅以 &lt;code&gt;buttonTapped&lt;/code&gt; 为例讲解一下。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)buttonTapped:(TBActionButton *)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isVisible]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.buttons indexOfObject:sender];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDuration delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseInOut&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.background.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithWhite:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionContainer.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(kContainerLeft, kScreenHeight, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionContainer.frame.size.width, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionContainer.frame.size.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里之所以把各种 delegate 调用都放在动画完成后是有原因的：为了支持在回调方法中 show 另一个 actionsheet，系统的 UIActionSheet 的调用时机也是如此。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(actionSheet:willDismissWithButtonIndex:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate actionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willDismissWithButtonIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.rootViewController = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(actionSheet:clickedButtonAtIndex:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate actionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; clickedButtonAtIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sender.handler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(TBActionButton *)weakSender = sender;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sender.handler(weakSender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(actionSheet:didDismissWithButtonIndex:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate actionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didDismissWithButtonIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.visible = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;动画就不多说了，基本就是 &lt;code&gt;show&lt;/code&gt; 方法中动画的逆动画。其余还有很多 &lt;code&gt;delegate&lt;/code&gt; 回调，注意调用的顺序需要还原 &lt;code&gt;UIActionSheet&lt;/code&gt; 的调用顺序，也不必多说。针对带有 block 的按钮，执行 block 时要避免内存泄露：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;__weak&lt;/span&gt; __typeof(&lt;span class=&quot;type&quot;&gt;TBActionButton&lt;/span&gt; *)weakSender = sender;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;sender&lt;/span&gt;.handler(weakSender);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有就是处理 &lt;code&gt;UIWindow&lt;/code&gt; 的切换和释放 &lt;code&gt;rootViewController&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.rootViewController = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只要调用方不再对 ActionSheet 有强引用，&lt;code&gt;window&lt;/code&gt; 就会被释放，不会造成内存泄露。&lt;/p&gt;
&lt;h1 id=&quot;一些细节&quot;&gt;&lt;a href=&quot;#一些细节&quot; class=&quot;headerlink&quot; title=&quot;一些细节&quot;&gt;&lt;/a&gt;一些细节&lt;/h1&gt;&lt;h2 id=&quot;Marco&quot;&gt;&lt;a href=&quot;#Marco&quot; class=&quot;headerlink&quot; title=&quot;Marco&quot;&gt;&lt;/a&gt;Marco&lt;/h2&gt;&lt;p&gt;项目中用到了一些 UIKit 自带的宏，其实它们好多都是使用 &lt;code&gt;__attribute__&lt;/code&gt; 的偷懒方式，目的是告诉编译器一些事情。&lt;/p&gt;
&lt;h3 id=&quot;UI-APPEARANCE-SELECTOR&quot;&gt;&lt;a href=&quot;#UI-APPEARANCE-SELECTOR&quot; class=&quot;headerlink&quot; title=&quot;UI_APPEARANCE_SELECTOR&quot;&gt;&lt;/a&gt;UI_APPEARANCE_SELECTOR&lt;/h3&gt;&lt;p&gt;在声明属性的时候，考虑到方便一个应用内控件的统一风格，使用到了 &lt;code&gt;UI_APPEARANCE_SELECTOR&lt;/code&gt; 宏。在 iOS8 之前 &lt;code&gt;UIAppearance&lt;/code&gt; 不支持 &lt;code&gt;BOOL&lt;/code&gt; 类型，需要用 &lt;code&gt;NSInteger&lt;/code&gt; 替代。所有声明带有 &lt;code&gt;UI_APPEARANCE_SELECTOR&lt;/code&gt; 的属性都在 &lt;code&gt;initialize&lt;/code&gt; 初始化：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (void)initialize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self != [TBActionSheet class]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionSheet *appearance = [self appearance]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;buttonHeight &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.offsetY = - &lt;span class=&quot;keyword&quot;&gt;bigFragment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    appearance.tintColor = [UIColor &lt;span class=&quot;keyword&quot;&gt;blackColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    appearance.destructiveButtonColor = [UIColor redColor]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.cancelButtonColor = [UIColor &lt;span class=&quot;keyword&quot;&gt;blackColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;sheetWidth &lt;/span&gt;= MIN(kScreenWidth, kScreenHeight) - &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;backgroundTransparentEnabled &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;blurEffectEnabled &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.rectCornerRadius = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.ambientColor = [UIColor colorWithWhite:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.separatorColor = [UIColor clearColor]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.animationDuration = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.animationDampingRatio = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.animationVelocity = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.supportedInterfaceOrientations = UIInterfaceOrientationMaskAll&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然我是不建议调用者直接在这里改源码来配置个性化的 ActionSheet ，而是应该使用 &lt;code&gt;UIAppearance&lt;/code&gt; 在外部进行配置，或是针对某个实例的属性做修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UI_APPEARANCE_SELECTOR&lt;/code&gt; 的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__attribute__((&lt;span class=&quot;name&quot;&gt;annotate&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ui_appearance_selector&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;NS-UNAVAILABLE&quot;&gt;&lt;a href=&quot;#NS-UNAVAILABLE&quot; class=&quot;headerlink&quot; title=&quot;NS_UNAVAILABLE&quot;&gt;&lt;/a&gt;NS_UNAVAILABLE&lt;/h3&gt;&lt;p&gt;有时候自己创建了一个类，但是想禁用一些从父类继承来的方法，就可以使用 &lt;code&gt;NS_UNAVAILABLE&lt;/code&gt; 宏。比如在 &lt;code&gt;TBActionSheet&lt;/code&gt; 类中我禁用了这个初始化方法：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instance&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;)initWithFrame:(&lt;span class=&quot;type&quot;&gt;CGRect&lt;/span&gt;)frame &lt;span class=&quot;type&quot;&gt;NS_UNAVAILABLE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;NS_UNAVAILABLE&lt;/code&gt; 其实有一些替代者，从下面的宏定义可以看出：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_UNAVAILABLE UNAVAILABLE_ATTRIBUTE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; UNAVAILABLE_ATTRIBUTE __attribute__((unavailable))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; __unavailable	__attribute__((unavailable))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而上面的这些宏都是不含提示信息的，想要带提示信息还是老老实实写 &lt;code&gt;__attribute__&lt;/code&gt; 吧。下面是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的初始化方法声明：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(instancetype)&lt;/span&gt;initWithSheet:&lt;span class=&quot;params&quot;&gt;(TBActionSheet *)&lt;/span&gt;actionSheet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(instancetype)&lt;/span&gt;initWithFrame:&lt;span class=&quot;params&quot;&gt;(CGRect)&lt;/span&gt;frame __attribute__&lt;span class=&quot;params&quot;&gt;((unavailable(&lt;span class=&quot;string&quot;&gt;&quot;initWithFrame: not available, please use initWithSheet:&quot;&lt;/span&gt;))&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(instancetype)&lt;/span&gt;init __attribute__&lt;span class=&quot;params&quot;&gt;((unavailable(&lt;span class=&quot;string&quot;&gt;&quot;init not available, please use initWithSheet:&quot;&lt;/span&gt;))&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;NS-ASSUME-NONNULL-BEGIN（-END）&quot;&gt;&lt;a href=&quot;#NS-ASSUME-NONNULL-BEGIN（-END）&quot; class=&quot;headerlink&quot; title=&quot;NS_ASSUME_NONNULL_BEGIN（_END）&quot;&gt;&lt;/a&gt;NS_ASSUME_NONNULL_BEGIN（_END）&lt;/h3&gt;&lt;p&gt;llvm 6.1 为 Objective-C 加入了 Nullability 的新特性后，头文件们一个个都更啰嗦了。可以默认一段代码的属性或参数为非空，针对可能为空的则用 &lt;code&gt;nullable&lt;/code&gt; 修饰。但我们声明的大部分属性或者方法参数都是非空的，大量的 &lt;code&gt;nonnull&lt;/code&gt; 会降低可读性，所以苹果提供了 Audited Regions 宏，也就是 &lt;code&gt;NS_ASSUME_NONNULL_BEGIN&lt;/code&gt; 和 &lt;code&gt;NS_ASSUME_NONNULL_END&lt;/code&gt;。在头文件中这对儿宏之间区域的代码都会被审查，指针都会被默认为是 &lt;code&gt;nonnull&lt;/code&gt;。&lt;code&gt;TBActionSheet&lt;/code&gt; 适配了 Nullability 特性，更多内容可以参考官方的&lt;a href=&quot;https://developer.apple.com/swift/blog/?id=25&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nullability and Objective-C&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;动态配置&quot;&gt;&lt;a href=&quot;#动态配置&quot; class=&quot;headerlink&quot; title=&quot;动态配置&quot;&gt;&lt;/a&gt;动态配置&lt;/h2&gt;&lt;p&gt;iOS 系统的 &lt;code&gt;UIActionSheet&lt;/code&gt; 在展现后就不能做修改了，而我的 &lt;code&gt;TBActionSheet&lt;/code&gt; 可以做到实时动态更新，比如动态添加按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/TBActionSheet/blob/master/images/addButton.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在动态配置 &lt;code&gt;TBActionSheet&lt;/code&gt; 的属性后&lt;strong&gt;必须&lt;/strong&gt;调用以下方法刷新 UI：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[self.actionSheet setupLayout]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[self.actionSheet setupStyle]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[self.actionSheet setupContainerFrame]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现动态配置，需要有一个还原机制来清理之前的状态。比如容器内有很多子视图，诸如那些 Separator 和 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 对象都是一次性使用的，在布局发生变化后必须清理掉它们，并重新生成一遍。容器内这些没有存储数据的视图都是没必要重用的，只需要清理掉重新创建一遍即可。这样虽然可能会带来性能问题，不过考虑到按钮的数量毕竟有限，所以这些一次性的视图数量并不多。而且重用它们需要修改它们的 frame，需要单独花精力管理它们，带来的成本更大。有时简单粗暴点更好，毕竟动态配置这种场景不多。&lt;/p&gt;
&lt;p&gt;还有就是一些视图背景颜色的还原，每次设置前先将其设为 &lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;p&gt;&lt;code&gt;UIActionSheet&lt;/code&gt; 中除了 &lt;code&gt;UIActionSheetStyle actionSheetStyle&lt;/code&gt; 属性，其余属性都已实现。因为 &lt;code&gt;TBActionSheet&lt;/code&gt; 的样式可高度个性化定制，所以不再需要 &lt;code&gt;UIActionSheetStyle&lt;/code&gt; 这种枚举了。可以说 &lt;code&gt;TBActionSheet&lt;/code&gt; 在属性上依然『几乎』是 &lt;code&gt;UIActionSheet&lt;/code&gt; 的超集。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 的属性实在是太多了，因为它完全是手撸的，太灵活了。但总结起来无非就是『尺寸』、『样式』、『状态』、『内容』、『标记』和『动画&amp;amp;朝向』这几大类。&lt;/p&gt;
&lt;h2 id=&quot;尺寸&quot;&gt;&lt;a href=&quot;#尺寸&quot; class=&quot;headerlink&quot; title=&quot;尺寸&quot;&gt;&lt;/a&gt;尺寸&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  按钮高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; buttonHeight &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  actionsheet下方的 y 轴位移，向下为正，非负值无效，默认值为 -8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; offsetY &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  sheet 的宽度，也就是按钮宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; sheetWidth &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  矩形圆角半径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; rectCornerRadius &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;样式&quot;&gt;&lt;a href=&quot;#样式&quot; class=&quot;headerlink&quot; title=&quot;样式&quot;&gt;&lt;/a&gt;样式&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  文字颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tintColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  Destructive 按钮文字颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *destructiveButtonColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  Cancel 按钮文字颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *cancelButtonColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  分割线颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *separatorColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  按钮字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; *buttonFont &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  ActionSheet 的环境色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *ambientColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否可见&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,getter=isVisible) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; visible;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否让 ActionSheet 背景透明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, getter=isBackgroundTransparentEnabled) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; backgroundTransparentEnabled &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否点击背景后关闭 ActionSheet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, getter=isBackgroundTouchClosureEnabled) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; backgroundTouchClosureEnabled &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否启用毛玻璃效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, getter=isBlurEffectEnabled) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; blurEffectEnabled &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)  &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nullable  title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)  &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nullable  message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  标题 UILabel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,nullable,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *titleLabel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  Message UILabel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,nullable,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *messageLabel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  自定义视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,nullable) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *customView;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;标记&quot;&gt;&lt;a href=&quot;#标记&quot; class=&quot;headerlink&quot; title=&quot;标记&quot;&gt;&lt;/a&gt;标记&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   标记藏于 ActionSheet 下面的 UIWindow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIWindow&lt;/span&gt; *previousKeyWindow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; cancelButtonIndex;      &lt;span class=&quot;comment&quot;&gt;// if the delegate does not implement -actionSheetCancel:, we pretend this button was clicked on. default is -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; destructiveButtonIndex; &lt;span class=&quot;comment&quot;&gt;// sets destructive (red) button. -1 means none set. default is -1. ignored if only one button&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; firstOtherButtonIndex;	&lt;span class=&quot;comment&quot;&gt;// -1 if no otherButtonTitles or initWithTitle:... not used&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;动画-amp-朝向&quot;&gt;&lt;a href=&quot;#动画-amp-朝向&quot; class=&quot;headerlink&quot; title=&quot;动画&amp;amp;朝向&quot;&gt;&lt;/a&gt;动画&amp;amp;朝向&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; numberOfButtons;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  动画持续时长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; animationDuration &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  动画弹簧效果衰弱比例，值为 1 时无摆动，值越接近 0 摆动越大&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; animationDampingRatio &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  动画弹簧效果初速度。如果动画总距离为 200 点，想让初速度为每秒 100 点，那么将值设为 0.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; animationVelocity &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  支持的朝向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt; supportedInterfaceOrientations &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;属性存取器&quot;&gt;&lt;a href=&quot;#属性存取器&quot; class=&quot;headerlink&quot; title=&quot;属性存取器&quot;&gt;&lt;/a&gt;属性存取器&lt;/h2&gt;&lt;p&gt;其实属性存取器并不都是必要的，很多 set 方法可以不写，毕竟所有的布局和样式都在最后的 &lt;code&gt;show&lt;/code&gt; 方法中决定。但一些改动不大的轻量级属性修改还是可以接受的，这些属性的 set 方法实现也比较简单。动态配置需要再次调用 &lt;code&gt;setupLayout&lt;/code&gt;、&lt;code&gt;setupStyle&lt;/code&gt; 以及 &lt;code&gt;setupContainerFrame&lt;/code&gt;，而这些轻量级的属性修改则可立即生效，无需再调用那三个方法。&lt;/p&gt;
&lt;p&gt;按钮字体的存取器建立在对 &lt;code&gt;buttons&lt;/code&gt; 数组的遍历上：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)setButtonFont:(UIFont *)&lt;span class=&quot;keyword&quot;&gt;buttonFont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;buttonFont &lt;/span&gt;&amp;amp;&amp;amp; [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;buttonFont] &lt;/span&gt;!= &lt;span class=&quot;keyword&quot;&gt;buttonFont) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (TBActionButton *&lt;span class=&quot;keyword&quot;&gt;btn &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;self.buttons) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;btn.titleLabel.font &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;buttonFont;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIFont *)&lt;span class=&quot;keyword&quot;&gt;buttonFont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;self.buttons.lastObject.titleLabel.font;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;firstOtherButtonIndex&lt;/code&gt; 是只读属性，它也是遍历 &lt;code&gt;buttons&lt;/code&gt; 数组，知道找到第一个 Default 风格的按钮：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)firstOtherButtonIndex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.buttons.count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.buttons[i].style==TBActionButtonStyleDefault) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Separator 的颜色修改需要更新 &lt;code&gt;separators&lt;/code&gt; 数组所有的元素：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setSeparatorColor:(&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *)separatorColor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (separatorColor &amp;amp;&amp;amp; separatorColor != _separatorColor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _separatorColor = separatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *separator &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.separators) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            separator.backgroundColor = separatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ActionSheet 是否可见，取决于窗口及控制器是否存在：&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL&lt;/span&gt;)isVisible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// action sheet is visible iff it&#39;s associated with a window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!self.&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; &amp;amp;&amp;amp; self.&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.rootViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;backgroundTouchClosureEnabled&lt;/code&gt; 的更新需要同步到背景 &lt;code&gt;userInteractionEnabled&lt;/code&gt; 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)setBackgroundTouchClosureEnabled:(NSInteger)&lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _backgroundTouchClosureEnabled = &lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;self.background.userInteractionEnabled &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;我也没想到一个简简单单的 ActionSheet 也会写的这么复杂，早知道会这样我真的不敢下手。以至于写完后还没测试就用在了公司的项目中，各种爆 Bug 然后 Debug。同事们各种提意见然后我再去完善。第一次线上版本全部替换成 &lt;code&gt;TBActionSheet&lt;/code&gt; 后出了 Bug，这真的是实习生干的 23333 这锅我背了！&lt;/p&gt;
&lt;p&gt;其实写这个轮子是留下了很多遗憾和不足的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一开始觉得布局很简单，无非就是几个 Button 啊 Label 啊，所以没用自动布局。后面功能越来越多布局开始变得复杂，需要大量计算，想想真是后悔。但再往后动态配置和个性化程度大大提升，发现已经复杂到不适合用自动布局，不知是否有些心安&lt;/li&gt;
&lt;li&gt;系统控件的实现是用 &lt;code&gt;UITableView&lt;/code&gt; 或 &lt;code&gt;UICollectionView&lt;/code&gt; 来实现的，在长按按钮滑动选择的时候，&lt;code&gt;TBActionSheet&lt;/code&gt; 就做不到系统控件那样了。如果重写的话一定要用 Table 啊&lt;/li&gt;
&lt;li&gt;属性名几经修改，接口也有小幅度修改，功能强大但也已经臃肿&lt;/li&gt;
&lt;li&gt;没能做到全功能适配 iOS7，或许是自己太懒了。其实有写过二维变换模拟系统的旋转动画，并进行了复杂的数学坐标推导出变换公式，最后觉得还是效果不满意，并投入太多精力，遂放弃&lt;/li&gt;
&lt;li&gt;当时因为业务忙，写的代码真是乱，现在还在一点点整理。。。说啥都是借口！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实一开始我也想当把标题党，把文章标题写成『这可能是东半球最牛逼的 ActionSheet』，想想还是算了。我从不求 star 从不求转发，踏实点好😄。&lt;/p&gt;
&lt;p&gt;因为写得比较匆忙，逻辑比较复杂的地方可能描述不清，还请大神们多多提建议和指正。更希望能看到有建设性的 PR，一起将其完善。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 系统自带的 &lt;code&gt;UIActionSheet&lt;/code&gt; 无法满足开发中高度个性化的 UI 风格和代码风格，所以我决定自己动手丰衣足食，于是 &lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 诞生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/TBActionSheet/blob/master/images/demo.gif?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github：&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot;&gt;https://github.com/yulingtianxia/TBActionSheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 不仅还原了 &lt;code&gt;UIActionSheet&lt;/code&gt; 的几乎所有功能和 API，还在此基础上支持如下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;block 语法&lt;/li&gt;
&lt;li&gt;插入自定义的 Header 视图&lt;/li&gt;
&lt;li&gt;自定义字体、颜色、尺寸、圆角等&lt;/li&gt;
&lt;li&gt;将毛玻璃效果支持到了 iOS7，且可以定义颜色&lt;/li&gt;
&lt;li&gt;支持 Cocoapods 和 Carthage&lt;/li&gt;
&lt;li&gt;支持在 Title 下面设置 Message&lt;/li&gt;
&lt;li&gt;支持点击背景关闭&lt;/li&gt;
&lt;li&gt;可以在显示后动态更新 UI&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 消息发送与转发机制原理</title>
    <link href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/"/>
    <id>http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/</id>
    <published>2016-06-15T12:12:48.000Z</published>
    <updated>2016-08-27T03:30:16.000Z</updated>
    
    <content type="html">&lt;p&gt;消息发送和转发流程可以概括为：消息发送（Messaging）是 Runtime 通过 selector 快速查找 IMP 的过程，有了函数指针就可以执行对应的方法实现；消息转发（Message Forwarding）是在查找 IMP 失败后执行一系列转发流程的慢速通道，如果不作转发处理，则会打日志和抛出异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文不讲述开发者在消息发送和转发流程中需要做的事，而是讲述原理。能够很好地阅读本文的前提是你对 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 已经有一定的了解，关于什么是消息，Class 的结构，selector、IMP、元类等概念将不再赘述&lt;/strong&gt;。本文用到的源码为 objc4-680 和 CF-1153.18，逆向 CoreFoundation.framework 的系统版本为 macOS 10.11.5，汇编语言架构为 x86_64。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;八面玲珑的-objc-msgSend&quot;&gt;&lt;a href=&quot;#八面玲珑的-objc-msgSend&quot; class=&quot;headerlink&quot; title=&quot;八面玲珑的 objc_msgSend&quot;&gt;&lt;/a&gt;八面玲珑的 objc_msgSend&lt;/h2&gt;&lt;p&gt;此函数是消息发送必经之路，但只要一提 &lt;code&gt;objc_msgSend&lt;/code&gt;，都会说它的伪代码如下或类似的逻辑，反正就是获取 IMP 并调用：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id objc_msgSend(id self, SEL _cmd, ...) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Class &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;object_getClass&lt;/span&gt;&lt;/span&gt;(self);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IMP imp = class_getMethodImplementation(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;_cmd);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; imp ? imp(self, _cmd, ...) : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;源码解析&quot;&gt;&lt;a href=&quot;#源码解析&quot; class=&quot;headerlink&quot; title=&quot;源码解析&quot;&gt;&lt;/a&gt;源码解析&lt;/h3&gt;&lt;p&gt;为啥老用伪代码？因为 &lt;code&gt;objc_msgSend&lt;/code&gt; 是用汇编语言写的，针对不同架构有不同的实现。如下为 &lt;code&gt;x86_64&lt;/code&gt; 架构下的源码，可以在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/Messengers.subproj/objc-msg-x86_64.s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-msg-x86_64.s&lt;/a&gt; 文件中找到，关键代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	ENTRY	_objc_msgSend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MESSENGER_START&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NilTest	NORMAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetIsaFast NORMAL		&lt;span class=&quot;comment&quot;&gt;// r11 = self-&amp;gt;isa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CacheLookup NORMAL		&lt;span class=&quot;comment&quot;&gt;// calls IMP on success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NilTestSupport	NORMAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetIsaSupport	   NORMAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cache miss: go search the method lists&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LCacheMiss:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// isa still in r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MethodTableLookup &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;1, &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;2	&lt;span class=&quot;comment&quot;&gt;// r11 = IMP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmp	&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11, &lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11		&lt;span class=&quot;comment&quot;&gt;// set eq (nonstret) for forwarding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jmp	*&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11			&lt;span class=&quot;comment&quot;&gt;// goto *imp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	END_ENTRY	_objc_msgSend&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里面包含一些有意义的宏：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NilTest&lt;/code&gt; 宏，判断被发送消息的对象是否为 &lt;code&gt;nil&lt;/code&gt; 的。如果为 &lt;code&gt;nil&lt;/code&gt;，那就直接返回 &lt;code&gt;nil&lt;/code&gt;。这就是为啥也可以对 &lt;code&gt;nil&lt;/code&gt; 发消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetIsaFast&lt;/code&gt; 宏可以『快速地』获取到对象的 &lt;code&gt;isa&lt;/code&gt; 指针地址（放到 &lt;code&gt;r11&lt;/code&gt; 寄存器，&lt;code&gt;r10&lt;/code&gt; 会被重写；在 arm 架构上是直接赋值到 &lt;code&gt;r9&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CacheLookup&lt;/code&gt; 这个宏是在类的缓存中查找 selector 对应的 IMP（放到 &lt;code&gt;r10&lt;/code&gt;）并执行。如果缓存没中，那就得到 Class 的方法表中查找了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MethodTableLookup&lt;/code&gt; 宏是重点，负责在缓存没命中时在方法表中负责查找 IMP：&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;.macro&lt;/span&gt; MethodTableLookup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MESSENGER_END_SLOW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SaveRegisters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// _class_lookupMethodAndLoadCache3(receiver, &lt;span class=&quot;keyword&quot;&gt;selector, &lt;/span&gt;class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;$0&lt;/span&gt;, %&lt;span class=&quot;built_in&quot;&gt;a1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt;, %&lt;span class=&quot;built_in&quot;&gt;a2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;%&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;, %&lt;span class=&quot;built_in&quot;&gt;a3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	__class_lookupMethodAndLoadCache3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// IMP is now in %rax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;%rax, %&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RestoreRegisters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;.endmacro&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码可以看出方法查找 IMP 的工作交给了 OC 中的 &lt;code&gt;_class_lookupMethodAndLoadCache3&lt;/code&gt; 函数，并将 IMP 返回（从 &lt;code&gt;r11&lt;/code&gt; 挪到 &lt;code&gt;rax&lt;/code&gt;）。最后在 &lt;code&gt;objc_msgSend&lt;/code&gt; 中调用 IMP。&lt;/p&gt;
&lt;h3 id=&quot;为什么使用汇编语言&quot;&gt;&lt;a href=&quot;#为什么使用汇编语言&quot; class=&quot;headerlink&quot; title=&quot;为什么使用汇编语言&quot;&gt;&lt;/a&gt;为什么使用汇编语言&lt;/h3&gt;&lt;p&gt;其实在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/Messengers.subproj/objc-msg-x86_64.s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-msg-x86_64.s&lt;/a&gt; 中包含了多个版本的 &lt;code&gt;objc_msgSend&lt;/code&gt; 方法，它们是根据返回值的类型和调用者的类型分别处理的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;objc_msgSendSuper&lt;/code&gt;:向父类发消息，返回值类型为 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objc_msgSend_fpret&lt;/code&gt;:返回值类型为 floating-point，其中包含 &lt;code&gt;objc_msgSend_fp2ret&lt;/code&gt; 入口处理返回值类型为 &lt;code&gt;long double&lt;/code&gt; 的情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objc_msgSend_stret&lt;/code&gt;:返回值为结构体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objc_msgSendSuper_stret&lt;/code&gt;:向父类发消息，返回值类型为结构体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当需要发送消息时，编译器会生成中间代码，根据情况分别调用 &lt;code&gt;objc_msgSend&lt;/code&gt;, &lt;code&gt;objc_msgSend_stret&lt;/code&gt;, &lt;code&gt;objc_msgSendSuper&lt;/code&gt;, 或 &lt;code&gt;objc_msgSendSuper_stret&lt;/code&gt; 其中之一。&lt;/p&gt;
&lt;p&gt;这也是为什么 &lt;code&gt;objc_msgSend&lt;/code&gt; 要用汇编语言而不是 OC、C 或 C++ 语言来实现，因为单独一个方法定义满足不了多种类型返回值，有的方法返回 &lt;code&gt;id&lt;/code&gt;，有的返回 &lt;code&gt;int&lt;/code&gt;。考虑到不同类型参数返回值排列组合映射不同方法签名（method signature）的问题，那 switch 语句得老长了。。。&lt;strong&gt;这些原因可以总结为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calling Convention&lt;/a&gt;，也就是说函数调用者与被调用者必须约定好参数与返回值在不同架构处理器上的存取规则，比如参数是以何种顺序存储在栈上，或是存储在哪些寄存器上。&lt;/strong&gt;除此之外还有其他原因，比如其可变参数用汇编处理起来最方便，因为找到 IMP 地址后参数都在栈上。要是用 C++ 传递可变参数那就悲剧了，prologue 机制会弄乱地址（比如 i386 上为了存储 &lt;code&gt;ebp&lt;/code&gt; 向后移位 4byte），最后还要用 epilogue 打扫战场。而且汇编程序执行效率高，在 Objective-C Runtime 中调用频率较高的函数好多都用汇编写的。&lt;/p&gt;
&lt;h2 id=&quot;使用-lookUpImpOrForward-快速查找-IMP&quot;&gt;&lt;a href=&quot;#使用-lookUpImpOrForward-快速查找-IMP&quot; class=&quot;headerlink&quot; title=&quot;使用 lookUpImpOrForward 快速查找 IMP&quot;&gt;&lt;/a&gt;使用 lookUpImpOrForward 快速查找 IMP&lt;/h2&gt;&lt;p&gt;上一节中说到的 &lt;code&gt;_class_lookupMethodAndLoadCache3&lt;/code&gt; 函数其实只是简单的调用了 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP _class_lookupMethodAndLoadCache3(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, SEL sel, Class cls)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lookUpImpOrForward(cls, sel, obj, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*initialize*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*cache*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*resolver*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 调用时使用缓存参数传入为 &lt;code&gt;NO&lt;/code&gt;，因为之前已经尝试过查找缓存了。&lt;code&gt;IMP lookUpImpOrForward(Class cls, SEL sel, id inst, bool initialize, bool cache, bool resolver)&lt;/code&gt; 实现了一套查找 IMP 的标准路径，也就是在消息转发（Forward）之前的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;优化缓存查找-amp-类的初始化&quot;&gt;&lt;a href=&quot;#优化缓存查找-amp-类的初始化&quot; class=&quot;headerlink&quot; title=&quot;优化缓存查找&amp;amp;类的初始化&quot;&gt;&lt;/a&gt;优化缓存查找&amp;amp;类的初始化&lt;/h3&gt;&lt;p&gt;先对 debug 模式下的 assert 进行 unlock：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runtimeLock&lt;span class=&quot;selector-class&quot;&gt;.assertUnlocked&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;runtimeLock&lt;/code&gt; 本质上是对 Darwin 提供的线程读写锁 &lt;code&gt;pthread_rwlock_t&lt;/code&gt; 的一层封装，提供了一些便捷的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lookUpImpOrForward&lt;/code&gt; 接着做了如下两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果使用缓存（&lt;code&gt;cache&lt;/code&gt; 参数为 &lt;code&gt;YES&lt;/code&gt;），那就调用 &lt;code&gt;cache_getImp&lt;/code&gt; 方法从缓存查找 IMP。&lt;code&gt;cache_getImp&lt;/code&gt; 是用汇编语言写的，也可以在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/Messengers.subproj/objc-msg-x86_64.s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-msg-x86_64.s&lt;/a&gt; 找到，其依然用了之前说过的 &lt;code&gt;CacheLookup&lt;/code&gt; 宏。因为 &lt;code&gt;_class_lookupMethodAndLoadCache3&lt;/code&gt; 调用 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 时 &lt;code&gt;cache&lt;/code&gt; 参数为 &lt;code&gt;NO&lt;/code&gt;，&lt;strong&gt;这步直接略过&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果是第一次用到这个类且 &lt;code&gt;initialize&lt;/code&gt; 参数为 &lt;code&gt;YES&lt;/code&gt;（&lt;code&gt;initialize  &amp;amp;&amp;amp;  !cls-&amp;gt;isInitialized()&lt;/code&gt;），需要进行初始化工作，也就是开辟一个用于读写数据的空间。先对 &lt;code&gt;runtimeLock&lt;/code&gt; 写操作加锁，然后调用 &lt;code&gt;cls&lt;/code&gt; 的 &lt;code&gt;initialize&lt;/code&gt; 方法。如果 &lt;code&gt;sel == initialize&lt;/code&gt; 也没关系，虽然 &lt;code&gt;initialize&lt;/code&gt; 还会被调用一次，但不会起作用啦，因为 &lt;code&gt;cls-&amp;gt;isInitialized()&lt;/code&gt; 已经是 &lt;code&gt;YES&lt;/code&gt; 啦。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;继续在类的继承体系中查找&quot;&gt;&lt;a href=&quot;#继续在类的继承体系中查找&quot; class=&quot;headerlink&quot; title=&quot;继续在类的继承体系中查找&quot;&gt;&lt;/a&gt;继续在类的继承体系中查找&lt;/h3&gt;&lt;p&gt;考虑到运行时类中的方法可能会增加，需要先做读操作加锁，使得方法查找和缓存填充成为原子操作。添加 category 会刷新缓存，之后如果旧数据又被重填到缓存中，category 添加操作就会被忽略掉。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runtimeLock&lt;span class=&quot;selector-class&quot;&gt;.read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后的逻辑整理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 selector 是需要被忽略的垃圾回收用到的方法，则将 IMP 结果设为 &lt;code&gt;_objc_ignored_method&lt;/code&gt;，这是个汇编程序入口，可以理解为一个标记。对此种情况进行缓存填充操作后，跳到第 7 步；否则执行下一步。&lt;/li&gt;
&lt;li&gt;查找当前类中的缓存，跟之前一样，使用 &lt;code&gt;cache_getImp&lt;/code&gt; 汇编程序入口。如果命中缓存获取到了 IMP，则直接跳到第 7 步；否则执行下一步。&lt;/li&gt;
&lt;li&gt;在当前类中的方法列表（method list）中进行查找，也就是根据 selector 查找到 Method 后，获取 Method 中的 IMP（也就是 &lt;code&gt;method_imp&lt;/code&gt; 属性），并填充到缓存中。查找过程比较复杂，会针对已经排序的列表使用二分法查找，未排序的列表则是线性遍历。如果成功查找到 Method 对象，就直接跳到第 7 步；否则执行下一步。&lt;/li&gt;
&lt;li&gt;在继承层级中递归向父类中查找，情况跟上一步类似，也是先查找缓存，缓存没中就查找方法列表。这里跟上一步不同的地方在于缓存策略，有个 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 汇编程序入口作为缓存中消息转发的标记。也就是说如果在缓存中找到了 IMP，但如果发现其内容是 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt;，那就终止在类的继承层级中递归查找，进入下一步；否则跳到第 7 步。&lt;/li&gt;
&lt;li&gt;当传入 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 的参数 &lt;code&gt;resolver&lt;/code&gt; 为 &lt;code&gt;YES&lt;/code&gt; 并且是第一次进入第 5 步时，时进入动态方法解析；否则进入下一步。这步消息转发前的最后一次机会。此时释放读入锁（&lt;code&gt;runtimeLock.unlockRead()&lt;/code&gt;），接着间接地发送 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt; 或 &lt;code&gt;+resolveClassMethod&lt;/code&gt; 消息。这相当于告诉程序员『赶紧用 Runtime 给类里这个 selector 弄个对应的 IMP 吧』，因为此时锁已经 unlock 了所以不会缓存结果，甚至还需要软性地处理缓存过期问题可能带来的错误。这里的业务逻辑稍微复杂些，后面会总结。因为这些工作都是在非线程安全下进行的，完成后需要回到第 1 步再次查找 IMP。&lt;/li&gt;
&lt;li&gt;此时不仅没查找到 IMP，动态方法解析也不奏效，只能将 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 当做 IMP 并写入缓存。这也就是之前第 4 步中为何查找到 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 就表明了要进入消息转发了。&lt;/li&gt;
&lt;li&gt;读操作解锁，并将之前找到的 IMP 返回。（无论是正经 IMP 还是不正经的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt;）这步还偏执地做了一些脑洞略大的 assert，很有趣。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于第 5 步，其实是直接调用 &lt;code&gt;_class_resolveMethod&lt;/code&gt; 函数，在这个函数中实现了复杂的方法解析逻辑。如果 &lt;code&gt;cls&lt;/code&gt; 是元类则会发送  &lt;code&gt;+resolveClassMethod&lt;/code&gt;，然后根据 &lt;code&gt;lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/)&lt;/code&gt; 函数的结果来判断是否发送 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt;；如果不是元类，则只需要发送 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt; 消息。这里调用 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt; 或 &lt;code&gt;+resolveClassMethod&lt;/code&gt; 时再次用到了 &lt;code&gt;objc_msgSend&lt;/code&gt;，而且第三个参数正是传入 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 的那个 &lt;code&gt;sel&lt;/code&gt;。在发送方法解析消息之后还会调用 &lt;code&gt;lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/)&lt;/code&gt; 来判断是否已经添加上 &lt;code&gt;sel&lt;/code&gt; 对应的 IMP 了，打印出结果。&lt;/p&gt;
&lt;p&gt;最后 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 方法也会把真正的 IMP 或者需要消息转发的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 返回，并最终专递到 &lt;code&gt;objc_msgSend&lt;/code&gt; 中。而 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 会在转化成 &lt;code&gt;_objc_msgForward&lt;/code&gt; 或 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt;。这个后面会讲解原理。&lt;/p&gt;
&lt;h3 id=&quot;回顾-objc-msgSend-伪代码&quot;&gt;&lt;a href=&quot;#回顾-objc-msgSend-伪代码&quot; class=&quot;headerlink&quot; title=&quot;回顾 objc_msgSend 伪代码&quot;&gt;&lt;/a&gt;回顾 objc_msgSend 伪代码&lt;/h3&gt;&lt;p&gt;回过头来会发现 &lt;code&gt;objc_msgSend&lt;/code&gt; 的伪代码描述得很传神啊，因为&lt;code&gt;class_getMethodImplementation&lt;/code&gt; 的实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP class_getMethodImplementation(Class cls, SEL sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cls  ||  !sel) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imp = lookUpImpOrNil(cls, sel, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*initialize*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*cache*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*resolver*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Translate forwarding function to C-callable external version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!imp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _objc_msgForward;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; imp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;lookUpImpOrNil&lt;/code&gt; 函数获取不到 IMP 时就返回 &lt;code&gt;_objc_msgForward&lt;/code&gt;，后面会讲到它。&lt;code&gt;lookUpImpOrNil&lt;/code&gt; 跟 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 的功能很相似，只是将 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 实现中的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 替换成了 &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP lookUpImpOrNil(Class cls, SEL sel, id &lt;span class=&quot;keyword&quot;&gt;inst, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;bool &lt;/span&gt;initialize, &lt;span class=&quot;keyword&quot;&gt;bool &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;cache, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool &lt;/span&gt;resolver)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp = lookUpImpOrForward(cls, sel, &lt;span class=&quot;keyword&quot;&gt;inst, &lt;/span&gt;initialize, &lt;span class=&quot;keyword&quot;&gt;cache, &lt;/span&gt;resolver)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (imp == _objc_msgForward_impcache) return nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else return imp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;lookUpImpOrNil&lt;/code&gt; 方法可以查找到 selector 对应的 IMP 或是 &lt;code&gt;nil&lt;/code&gt;，所以如果不考虑返回值类型为结构体的情况，用那几行伪代码来表示复杂的汇编实现还是挺恰当的。&lt;/p&gt;
&lt;h2 id=&quot;forwarding-中路漫漫的消息转发&quot;&gt;&lt;a href=&quot;#forwarding-中路漫漫的消息转发&quot; class=&quot;headerlink&quot; title=&quot;forwarding 中路漫漫的消息转发&quot;&gt;&lt;/a&gt;&lt;strong&gt;forwarding&lt;/strong&gt; 中路漫漫的消息转发&lt;/h2&gt;&lt;h3 id=&quot;objc-msgForward-impcache-的转换&quot;&gt;&lt;a href=&quot;#objc-msgForward-impcache-的转换&quot; class=&quot;headerlink&quot; title=&quot;objc_msgForward_impcache 的转换&quot;&gt;&lt;/a&gt;objc_msgForward_impcache 的转换&lt;/h3&gt;&lt;p&gt;&lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 只是个内部的函数指针，只存储于上节提到的类的方法缓存中，需要被转化为 &lt;code&gt;_objc_msgForward&lt;/code&gt; 和 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 才能被外部调用。但在 &lt;del&gt;Mac OS X&lt;/del&gt; macOS 10.6 及更早版本的 libobjc.A.dylib 中是不能直接调用的，况且我们根本不会直接用到它。带 &lt;code&gt;stret&lt;/code&gt; 后缀的函数依旧是返回值为结构体的版本。&lt;/p&gt;
&lt;p&gt;上一节最后讲到如果没找到 IMP，就会将 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 返回到 &lt;code&gt;objc_msgSend&lt;/code&gt; 函数，而正是因为它是用汇编语言写的，所以将内部使用的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 转化成外部可调用的 &lt;code&gt;_objc_msgForward&lt;/code&gt; 或 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 也是由汇编代码来完成。实现原理很简单，就是增加个静态入口 &lt;code&gt;__objc_msgForward_impcache&lt;/code&gt;，然后根据此时 CPU 的状态寄存器的内容来决定转换成哪个。如果是 &lt;code&gt;NE&lt;/code&gt;(Not Equal) 则转换成 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt;，反之是 &lt;code&gt;EQ&lt;/code&gt;(Equal) 则转换成 &lt;code&gt;_objc_msgForward&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;jne	&lt;/span&gt;__objc_msgForward_stret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;jmp	&lt;/span&gt;__objc_msgForward&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为何根据状态寄存器的值来判断转换成哪个函数指针呢？回过头来看看 &lt;code&gt;objc_msgSend&lt;/code&gt; 中调用完 &lt;code&gt;MethodTableLookup&lt;/code&gt; 之后干了什么：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MethodTableLookup %a1, %a2	// r11 = IMP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmp	%r11, %r11		// set e&lt;span class=&quot;string&quot;&gt;q (nonstret)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; forwarding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp	*%r11			// &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; *imp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看看返回值为结构体的 &lt;code&gt;objc_msgSend_stret&lt;/code&gt; 这里的逻辑：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MethodTableLookup &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;2, &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;3	&lt;span class=&quot;comment&quot;&gt;// r11 = IMP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test	&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11, &lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11		&lt;span class=&quot;comment&quot;&gt;// set ne (stret) for forward; r11!=0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp	*&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11			&lt;span class=&quot;comment&quot;&gt;// goto *imp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;稍微懂汇编的人一眼就看明白了，不懂的看注释也懂了，我就不墨迹了。现在总算是把消息转发前的逻辑绕回来构成闭环了。&lt;/p&gt;
&lt;p&gt;上一节中提到 &lt;code&gt;class_getMethodImplementation&lt;/code&gt; 函数的实现，在查找不到 IMP 时返回 &lt;code&gt;_objc_msgForward&lt;/code&gt;，而 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 正好对应着 &lt;code&gt;class_getMethodImplementation_stret&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;IMP&lt;/span&gt; class_getMethodImplementation_stret(Class cls, &lt;span class=&quot;keyword&quot;&gt;SEL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp = class_getMethodImplementation(cls, &lt;span class=&quot;keyword&quot;&gt;sel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    // Translate forwarding &lt;span class=&quot;meta&quot;&gt;function&lt;/span&gt; to &lt;span class=&quot;keyword&quot;&gt;struct-returning &lt;/span&gt;version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (imp == (IMP)&amp;amp;_objc_msgForward &lt;span class=&quot;comment&quot;&gt;/* not _internal! */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (IMP)&amp;amp;_objc_msgForward_stret&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return imp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说 &lt;code&gt;_objc_msgForward*&lt;/code&gt; 系列本质都是函数指针，都用汇编语言实现，都可以与 IMP 类型的值作比较。&lt;code&gt;_objc_msgForward&lt;/code&gt; 和 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 声明在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/message.h&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;message.h&lt;/a&gt; 文件中。&lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 在早期版本的 Runtime 中叫做 &lt;code&gt;_objc_msgForward_internal&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;objc-msgForward-也只是个入口&quot;&gt;&lt;a href=&quot;#objc-msgForward-也只是个入口&quot; class=&quot;headerlink&quot; title=&quot;objc_msgForward 也只是个入口&quot;&gt;&lt;/a&gt;objc_msgForward 也只是个入口&lt;/h3&gt;&lt;p&gt;从汇编源码可以很容易看出 &lt;strong&gt;&lt;code&gt;_objc_msgForward&lt;/code&gt; 和 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 会分别调用 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 和 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ENTRY&lt;/span&gt;	__objc_msgForward&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Non-&lt;span class=&quot;keyword&quot;&gt;stret &lt;/span&gt;version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;__objc_forward_handler(%rip), %&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;jmp&lt;/span&gt;	*%&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;END_ENTRY&lt;/span&gt;	__objc_msgForward&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ENTRY&lt;/span&gt;	__objc_msgForward_stret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Struct-return &lt;/span&gt;version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;__objc_forward_stret_handler(%rip), %&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;jmp&lt;/span&gt;	*%&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;END_ENTRY&lt;/span&gt;	__objc_msgForward_stret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个 handler 函数的区别从字面上就能看出来，不再赘述。&lt;/p&gt;
&lt;p&gt;也就是说，消息转发过程是现将 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 强转成 &lt;code&gt;_objc_msgForward&lt;/code&gt; 或 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt;，再分别调用 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 或 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;objc-setForwardHandler-设置了消息转发的回调&quot;&gt;&lt;a href=&quot;#objc-setForwardHandler-设置了消息转发的回调&quot; class=&quot;headerlink&quot; title=&quot;objc_setForwardHandler 设置了消息转发的回调&quot;&gt;&lt;/a&gt;objc_setForwardHandler 设置了消息转发的回调&lt;/h3&gt;&lt;p&gt;在 Objective-C 2.0 之前，默认的 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 或 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt; 都是 &lt;code&gt;nil&lt;/code&gt;，而新版本的默认实现是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Default forward handler halts the process.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__attribute__((noreturn)) &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_defaultForwardHandler(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_fatal(&lt;span class=&quot;string&quot;&gt;&quot;%c[%s %s]: unrecognized selector sent to instance %p &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;(no message forward handler is installed)&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                class_isMetaClass(object_getClass(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)) ? &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                object_getClassName(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;), sel_getName(sel), &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *_objc_forward_handler = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)objc_defaultForwardHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if SUPPORT_STRET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; stret &amp;#123; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;]; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__attribute__((noreturn)) &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; stret &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_defaultForwardStretHandler(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_defaultForwardHandler(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, sel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *_objc_forward_stret_handler = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)objc_defaultForwardStretHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;objc_defaultForwardHandler&lt;/code&gt; 中的 &lt;code&gt;_objc_fatal&lt;/code&gt; 作用就是打日志并调用 &lt;code&gt;__builtin_trap()&lt;/code&gt; 触发 crash，可以看到我们最熟悉的那句 “unrecognized selector sent to instance” 日志。&lt;code&gt;__builtin_trap()&lt;/code&gt; 在杀掉进程的同时还能生成日志，比调用 &lt;code&gt;exit()&lt;/code&gt; 更好。&lt;code&gt;objc_defaultForwardStretHandler&lt;/code&gt; 就是装模作样搞个形式主义，把 &lt;code&gt;objc_defaultForwardHandler&lt;/code&gt; 包了一层。&lt;code&gt;__attribute__((noreturn))&lt;/code&gt;  属性通知编译器函数从不返回值，当遇到类似函数需要返回值而却不可能运行到返回值处就已经退出来的情况，该属性可以避免出现错误信息。这里正适合此属性，因为要求返回结构体哒。&lt;/p&gt;
&lt;p&gt;因为默认的 Handler 干的事儿就是打日志触发 crash，我们想要实现消息转发，就需要替换掉 Handler 并赋值给 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 或 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt;，赋值的过程就需要用到 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 函数，实现也是简单粗暴，就是赋值啊：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;objc_setForwardHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fwd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fwd_stret)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_forward_handler = fwd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; SUPPORT_STRET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_forward_stret_handler = fwd_stret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;逆向工程助力刨根问底&quot;&gt;&lt;a href=&quot;#逆向工程助力刨根问底&quot; class=&quot;headerlink&quot; title=&quot;逆向工程助力刨根问底&quot;&gt;&lt;/a&gt;逆向工程助力刨根问底&lt;/h3&gt;&lt;p&gt;重头戏在于对 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 的调用，以及之后的消息转发调用栈。这回不是在 Objective-C Runtime （libobjc.dylib）中啦，而是在 Core Foundation（CoreFoundation.framework）中。虽然 CF 是开源的，但有意思的是苹果故意在开源的代码中删除了在 &lt;a href=&quot;https://github.com/opensource-apple/CF/blob/master/CFRuntime.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFRuntime.c&lt;/a&gt; 文件 &lt;code&gt;__CFInitialize()&lt;/code&gt; 中调用 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 的代码。&lt;code&gt;__CFInitialize()&lt;/code&gt; 函数是在 CF runtime 连接到进程时初始化调用的。从反编译得到的汇编代码中可以很容易跟 C 源码对比出来，我用红色标出了同一段代码的差异。&lt;/p&gt;
&lt;p&gt;汇编语言还是比较好理解的，红色标出的那三个指令就是把 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 作为参数调用 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 方法（那么之前那两个 DefaultHandler 卵用都没有咯，反正不出意外会被 CF 替换掉）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MessageForward/QQ20160614-1@2x.png&quot; alt=&quot;反编译后的 __CFInitialize() 汇编代码&quot;&gt;&lt;/p&gt;
&lt;p&gt;然而在源码中对应的代码却被删掉啦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MessageForward/QQ20160614-2@2x.png&quot; alt=&quot;苹果提供的 __CFInitialize() 函数源码&quot;&gt;&lt;/p&gt;
&lt;p&gt;在早期版本的 CF 源码中，还是可以看到 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 的声明的，但是不会有实现源码，也没有对 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 的调用。这些细节从函数调用栈中无法看出，只能逆向工程看汇编指令。但从函数调用栈可以看出 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 这两个 Forward Handler 做了啥：&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2016-06-14 12:50:15.385 MessageForward[67364:7174239] -[MFObject sendMessage]: unrecognized selector sent to&lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;0x1006001a0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016-06-14 12:50:15.387 MessageForward[67364:7174239] *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;-[MFObject sendMessage]: unrecognized selector sent to&lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;0x1006001a0&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*** First&lt;span class=&quot;built_in&quot;&gt; throw &lt;/span&gt;call stack:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	0   CoreFoundation                      0x00007fff8fa554f2 __exceptionPreprocess + 178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	1   libobjc.A.dylib                     0x00007fff98396f7e objc_exception_throw + 48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	2   CoreFoundation                      0x00007fff8fabf1ad -[NSObject(NSObject) doesNotRecognizeSelector:] + 205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	3   CoreFoundation                      0x00007fff8f9c5571 ___forwarding___ + 1009&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	4   CoreFoundation                      0x00007fff8f9c50f8 _CF_forwarding_prep_0 + 120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	5   MessageForward                      0x0000000100000f1f main + 79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	6   libdyld.dylib                       0x00007fff8bc2c5ad start + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	7   ???                                 0x0000000000000001 0x0 + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;libc++abi.dylib: terminating with uncaught exception of type NSException&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个日志场景熟悉得不能再熟悉了，可以看出 &lt;code&gt;_CF_forwarding_prep_0&lt;/code&gt; 函数调用了 &lt;code&gt;___forwarding___&lt;/code&gt; 函数，接着又调用了 &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 方法，最后抛出异常。&lt;strong&gt;但是靠这些是无法说服看客的，还得靠逆向工程反编译后再反汇编成伪代码来一探究竟，刨根问底。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 函数都调用了 &lt;code&gt;___forwarding___&lt;/code&gt;，只是传入参数不同。&lt;code&gt;___forwarding___&lt;/code&gt; 有两个参数，第一个参数为将要被转发消息的栈指针（可以简单理解成 IMP），第二个参数标记是否返回结构体。&lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 第二个参数传入 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 传入的是 &lt;code&gt;1&lt;/code&gt;，从函数名都能看得出来。下面是这两个函数的伪代码：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __CF_forwarding_prep_0(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg0, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg3, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg4, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg5) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = ____forwarding___(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123; // 转发结果不为空，将内容返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123; // 转发结果为空，调用 objc_msgSend(id self, SEL _cmd,...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt; = *(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = objc_msgSend(&lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ___forwarding_prep_1___(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg0, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg3, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg4, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg5) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = ____forwarding___(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;// 转发结果不为空，将内容返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123;// 转发结果为空，调用 objc_msgSend_stret(void * st_addr, id self, SEL _cmd, ...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt; = *(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt; = *(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = objc_msgSend_stret(&lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;x86_64&lt;/code&gt; 架构中，&lt;code&gt;rax&lt;/code&gt; 寄存器一般是作为返回值，&lt;code&gt;rsp&lt;/code&gt; 寄存器是栈指针。在调用 &lt;code&gt;objc_msgSend&lt;/code&gt; 函数时，参数 &lt;code&gt;arg0(self), arg1(_cmd), arg2, arg3, arg4, arg5&lt;/code&gt; 分别使用寄存器 &lt;code&gt;rdi, rsi, rdx, rcx, r8, r9&lt;/code&gt; 的值。在调用 &lt;code&gt;objc_msgSend_stret&lt;/code&gt; 时第一个参数为 &lt;code&gt;st_addr&lt;/code&gt;，其余参数依次后移。为了能够打包出 &lt;code&gt;NSInvocation&lt;/code&gt; 实例并传入后续的 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法，在调用 &lt;code&gt;___forwarding___&lt;/code&gt; 函数之前会先将所有参数压入栈中。因为寄存器 &lt;code&gt;rsp&lt;/code&gt; 为栈指针指向栈顶，所以 &lt;code&gt;rsp&lt;/code&gt; 的内容就是 &lt;code&gt;self&lt;/code&gt; 啦，因为 &lt;code&gt;x86_64&lt;/code&gt; 是小端，栈增长方向是由高地址到低地址，所以从栈顶往下移动一个指针需要&lt;strong&gt;加&lt;/strong&gt; &lt;code&gt;0x8（64bit）&lt;/code&gt;。而将参数入栈的顺序是从后往前的，也就是说 &lt;code&gt;arg0&lt;/code&gt; 是最后一个入栈的，位于栈顶：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt; __CF_forwarding_prep_0:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085080&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;push&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;rbp&lt;/span&gt;                                         &lt;span class=&quot;comment&quot;&gt;; XREF=___CFInitialize+138&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085081&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rbp&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085084&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xd0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;000000000008508b         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0xb0&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085093&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0xa0&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;000000000008509c         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x90&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850a5         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850ae         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x70&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850b4         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x60&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850ba         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x50&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850c0         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x40&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850c6         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x30&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850cc         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x28&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;r9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850d1         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x20&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;r8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850d6         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x18&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rcx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850&lt;span class=&quot;built_in&quot;&gt;db&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850e0         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850e5         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850e9         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;                                    &lt;span class=&quot;comment&quot;&gt;; argument #1 for method ____forwarding___&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850ec         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;                                    &lt;span class=&quot;comment&quot;&gt;; argument #2 for method ____forwarding___&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850f3         &lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt;       ____forwarding___&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;消息转发的逻辑几乎都写在 &lt;code&gt;___forwarding___&lt;/code&gt; 函数中了，实现比较复杂，反编译出的伪代码也不是很直观。我对 &lt;a href=&quot;http://arigrant.com/blog/2013/12/13/a-selector-left-unhandled&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;arigrant.com&lt;/a&gt; 的结果完善如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int __forwarding__(&lt;span class=&quot;name&quot;&gt;void&lt;/span&gt; *frameStackPointer, int isStret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id receiver = *(&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; *)frameStackPointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SEL sel = *(&lt;span class=&quot;name&quot;&gt;SEL&lt;/span&gt; *)(frameStackPointer + 8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const char *selName = sel_getName(&lt;span class=&quot;name&quot;&gt;sel&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Class receiverClass = object_getClass(&lt;span class=&quot;name&quot;&gt;receiver&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 调用 forwardingTargetForSelector:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;class_respondsToSelector&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;receiverClass&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;forwardingTargetForSelector&lt;/span&gt;:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id forwardingTarget = [receiver forwardingTargetForSelector&lt;span class=&quot;symbol&quot;&gt;:sel&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;name&quot;&gt;forwardingTarget&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; forwarding != receiver) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	if (&lt;span class=&quot;name&quot;&gt;isStret&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		int ret&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		objc_msgSend_stret(&lt;span class=&quot;name&quot;&gt;&amp;amp;ret&lt;/span&gt;,forwardingTarget, sel, ...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		return ret&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return objc_msgSend(&lt;span class=&quot;name&quot;&gt;forwardingTarget&lt;/span&gt;, sel, ...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 僵尸对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const char *className = class_getName(receiverClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const char *zombiePrefix = &lt;span class=&quot;string&quot;&gt;&quot;_NSZombie_&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  size_t prefixLen = strlen(&lt;span class=&quot;name&quot;&gt;zombiePrefix&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; // 0xa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;strncmp&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;className&lt;/span&gt;, zombiePrefix, prefixLen) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFLog(&lt;span class=&quot;name&quot;&gt;kCFLogLevelError&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          @&lt;span class=&quot;string&quot;&gt;&quot;*** -[%s %s]: message sent to deallocated instance %p&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          className + prefixLen,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          selName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          receiver)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;breakpoint-interrupt&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 调用 methodSignatureForSelector 获取方法签名后再调用 forwardInvocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;class_respondsToSelector&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;receiverClass&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;methodSignatureForSelector&lt;/span&gt;:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMethodSignature *methodSignature = [receiver methodSignatureForSelector:sel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (methodSignature) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BOOL signatureIsStret = [methodSignature _frameDescriptor]-&amp;gt;returnArgInfo.flags.isStruct;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (signatureIsStret != isStret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CFLog(kCFLogLevelWarning ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              @&quot;*** NSForwarding: warning: method signature and compiler disagree on struct-return-edness of &#39;%s&#39;.  Signature thinks it does%s return a struct, and compiler thinks it does%s.&lt;span class=&quot;string&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              selName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              signatureIsStret ? &quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; : not,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              isStret ? &quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; : not);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (class_respondsToSelector(receiverClass, @selector(forwardInvocation:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSInvocation *invocation = [NSInvocation _invocationWithMethodSignature:methodSignature frame:frameStackPointer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [receiver forwardInvocation:invocation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        void *returnValue = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation getReturnValue:&amp;amp;value];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CFLog(kCFLogLevelWarning ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              @&quot;&lt;/span&gt;*** NSForwarding: warning: object %p of class &#39;%s&#39; does not implement forwardInvocation: -- dropping message&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              receiver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              className);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SEL *registeredSel = sel_getUid(&lt;span class=&quot;name&quot;&gt;selName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // selector 是否已经在 Runtime 注册过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;sel&lt;/span&gt; != registeredSel) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFLog(&lt;span class=&quot;name&quot;&gt;kCFLogLevelWarning&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          @&lt;span class=&quot;string&quot;&gt;&quot;*** NSForwarding: warning: selector (%p) for message &#39;%s&#39; does not match selector known to Objective C runtime (%p)-- abort&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          sel,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          selName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          registeredSel)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; // doesNotRecognizeSelector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  else if (&lt;span class=&quot;name&quot;&gt;class_respondsToSelector&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;receiverClass&lt;/span&gt;,@selector(&lt;span class=&quot;name&quot;&gt;doesNotRecognizeSelector&lt;/span&gt;:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [receiver doesNotRecognizeSelector&lt;span class=&quot;symbol&quot;&gt;:sel&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFLog(&lt;span class=&quot;name&quot;&gt;kCFLogLevelWarning&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          @&lt;span class=&quot;string&quot;&gt;&quot;*** NSForwarding: warning: object %p of class &#39;%s&#39; does not implement doesNotRecognizeSelector: -- abort&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          receiver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          className)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // The point of no return.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  kill(&lt;span class=&quot;name&quot;&gt;getpid&lt;/span&gt;(), &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这么一大坨代码就是整个消息转发路径的逻辑，概括如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先调用 &lt;code&gt;forwardingTargetForSelector&lt;/code&gt; 方法获取新的 target 作为 receiver 重新执行 selector，如果返回的内容不合法（为 &lt;code&gt;nil&lt;/code&gt; 或者跟旧 receiver 一样），那就进入第二步。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;methodSignatureForSelector&lt;/code&gt; 获取方法签名后，判断返回类型信息是否正确，再调用 &lt;code&gt;forwardInvocation&lt;/code&gt; 执行 &lt;code&gt;NSInvocation&lt;/code&gt; 对象，并将结果返回。如果对象没实现 &lt;code&gt;methodSignatureForSelector&lt;/code&gt; 方法，进入第三步。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 之前其实还有个判断 selector 在 Runtime 中是否注册过的逻辑，但在我们正常发消息的时候不会出此问题。但如果手动创建一个 &lt;code&gt;NSInvocation&lt;/code&gt; 对象并调用 &lt;code&gt;invoke&lt;/code&gt;，并将第二个参数设置成一个不存在的 selector，那就会导致这个问题，并输入日志 “does not match selector known to Objective C runtime”。较真儿的读者可能会有疑问：何这段逻辑判断干脆用不到却还存在着？难道除了 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 函数还有其他函数也调用 &lt;code&gt;___forwarding___&lt;/code&gt; 么？莫非消息转发还有其他路径？其实并不是！原因是 &lt;code&gt;___forwarding___&lt;/code&gt; 调用了 &lt;code&gt;___invoking___&lt;/code&gt; 函数，所以上面的伪代码直接把 &lt;code&gt;___invoking___&lt;/code&gt; 函数的逻辑也『翻译』过来了。除了 &lt;code&gt;___forwarding___&lt;/code&gt; 函数，以下方法也会调用&lt;code&gt;___invoking___&lt;/code&gt; 函数:&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;[NSInvocation invoke]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;[NSInvocation &lt;span class=&quot;symbol&quot;&gt;invokeUsingIMP:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;[NSInvocation invokeSuper]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 方法其实在 libobj.A.dylib 中已经废弃了，而是在 CF 框架中实现，而且也不是开源的。从函数调用栈可以发现 &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 之后会抛出异常，而 Runtime 中废弃的实现知识打日志后直接杀掉进程（&lt;code&gt;__builtin_trap()&lt;/code&gt;）。下面是 CF 中实现的伪代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; -[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; doesNotRecognizeSelector:](&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * _cmd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * arg2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r14 = ___&lt;span class=&quot;built_in&quot;&gt;CFFullMethodName&lt;/span&gt;([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;built_in&quot;&gt;CFLog&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0x3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to instance %p&quot;&lt;/span&gt;, r14, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, r8, r9, stack[&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rbx = _&lt;span class=&quot;built_in&quot;&gt;CFMakeCollectable&lt;/span&gt;(_&lt;span class=&quot;built_in&quot;&gt;CFStringCreateWithFormat&lt;/span&gt;(___k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorSystemDefault&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to instance %p&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(int8_t *)___&lt;span class=&quot;built_in&quot;&gt;CFOASafe&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ___&lt;span class=&quot;built_in&quot;&gt;CFRecordAllocationEvent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = _objc_rootAutorelease(rbx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = [&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; exceptionWithName:&lt;span class=&quot;string&quot;&gt;@&quot;NSInvalidArgumentException&quot;&lt;/span&gt; reason:rax userInfo:&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_exception_throw(rax);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; +[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; doesNotRecognizeSelector:](&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * _cmd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * arg2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r14 = ___&lt;span class=&quot;built_in&quot;&gt;CFFullMethodName&lt;/span&gt;([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;built_in&quot;&gt;CFLog&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0x3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to class %p&quot;&lt;/span&gt;, r14, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, r8, r9, stack[&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rbx = _&lt;span class=&quot;built_in&quot;&gt;CFMakeCollectable&lt;/span&gt;(_&lt;span class=&quot;built_in&quot;&gt;CFStringCreateWithFormat&lt;/span&gt;(___k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorSystemDefault&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to class %p&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(int8_t *)___&lt;span class=&quot;built_in&quot;&gt;CFOASafe&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ___&lt;span class=&quot;built_in&quot;&gt;CFRecordAllocationEvent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = _objc_rootAutorelease(rbx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = [&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; exceptionWithName:&lt;span class=&quot;string&quot;&gt;@&quot;NSInvalidArgumentException&quot;&lt;/span&gt; reason:rax userInfo:&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_exception_throw(rax);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说我们可以 override &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 或者捕获其抛出的异常。在这里还是大有文章可做的。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我将整个实现流程绘制出来，过滤了一些不会进入的分支路径和跟主题无关的细节：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MessageForward/消息发送与转发路径流程图.jpg&quot; alt=&quot;消息发送与转发路径流程图&quot;&gt; &lt;/p&gt;
&lt;p&gt;介于国内关于这块知识的好多文章描述不够准确和详细，或是对消息转发的原理描述理解不够深刻，或是侧重贴源码而欠思考，所以我做了一个比较全面详细的讲解。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://arigrant.com/blog/2014/2/12/why-objcmsgsend-must-be-written-in-assembly&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why objc_msgSend Must be Written in Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arigrant.com/blog/2013/12/13/a-selector-left-unhandled&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hmmm, What’s that Selector?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.zhengdong.me/2013/07/18/a-look-under-the-hood-of-objc-msgsend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Look Under the Hood of objc_msgSend()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arigrant.com/blog/2014/2/18/chisels-print-invocation-command&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Printing Objective-C Invocations in LLDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;消息发送和转发流程可以概括为：消息发送（Messaging）是 Runtime 通过 selector 快速查找 IMP 的过程，有了函数指针就可以执行对应的方法实现；消息转发（Message Forwarding）是在查找 IMP 失败后执行一系列转发流程的慢速通道，如果不作转发处理，则会打日志和抛出异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文不讲述开发者在消息发送和转发流程中需要做的事，而是讲述原理。能够很好地阅读本文的前提是你对 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 已经有一定的了解，关于什么是消息，Class 的结构，selector、IMP、元类等概念将不再赘述&lt;/strong&gt;。本文用到的源码为 objc4-680 和 CF-1153.18，逆向 CoreFoundation.framework 的系统版本为 macOS 10.11.5，汇编语言架构为 x86_64。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
      <category term="Message Forwarding" scheme="http://yulingtianxia.com/tags/Message-Forwarding/"/>
    
      <category term="Messaging" scheme="http://yulingtianxia.com/tags/Messaging/"/>
    
  </entry>
  
  <entry>
    <title>让你的微信不再被人撤回消息</title>
    <link href="http://yulingtianxia.com/blog/2016/05/06/Let-your-WeChat-for-Mac-never-revoke-messages/"/>
    <id>http://yulingtianxia.com/blog/2016/05/06/Let-your-WeChat-for-Mac-never-revoke-messages/</id>
    <published>2016-05-06T10:24:04.000Z</published>
    <updated>2016-08-27T03:30:16.000Z</updated>
    
    <content type="html">&lt;p&gt;处女座强迫症最讨厌别人发消息后撤回了，尤其是发的图片还没看清就被撤了，或者还没来得及看的消息就已经被撤回了。最近逆向工程很火，所以我也简单的逆向了一把微信 for Mac &amp;amp; iOS。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;为什么不对-iOS-动刀-Mac-和-iOS-双管齐下&quot;&gt;&lt;a href=&quot;#为什么不对-iOS-动刀-Mac-和-iOS-双管齐下&quot; class=&quot;headerlink&quot; title=&quot;为什么不对 iOS 动刀 Mac 和 iOS 双管齐下&quot;&gt;&lt;/a&gt;&lt;del&gt;为什么不对 iOS 动刀&lt;/del&gt; Mac 和 iOS 双管齐下&lt;/h1&gt;&lt;p&gt;&lt;del&gt;iOS 上的微信 APP 不一定始终在前台运行着，如果别人在撤回消息时微信在后台甚至手机锁屏、断网，这时很可能没有调用撤回消息的方法，甚至当微信重新返回到前台时，从服务器根本不会接到原来消息的数据，而是只收到了一条『撤回』指令。基于以上猜测，我决定对微信 for Mac 下手，毕竟电脑上的微信只要开着就一直接收消息，Mac 版微信不会跑到后台。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;PS：后来有人说 Web 版微信本来就不会撤回消息。。。可惜我从没用过；发送和撤回消息时 iOS 微信即使没运行，在之后接收服务器消息时依然会接到原消息内容。。。好吧是我高估了微信。。。&lt;/p&gt;
&lt;p&gt;20160701 Update：&lt;/p&gt;
&lt;p&gt;今天在家无聊顺手也吧 iOS 的微信搞定了，只是比 Mac 的稍微麻烦一点罢了。&lt;/p&gt;
&lt;h1 id=&quot;脑洞和胆子都要大&quot;&gt;&lt;a href=&quot;#脑洞和胆子都要大&quot; class=&quot;headerlink&quot; title=&quot;脑洞和胆子都要大&quot;&gt;&lt;/a&gt;脑洞和胆子都要大&lt;/h1&gt;&lt;p&gt;之前看的一些逆向的教程里，感觉前期工作都是装软件配环境，噼里啪啦命令一顿敲，整的挺玄乎，其实都是用人家现成儿的工具做些事情，美其名曰『站在巨人的肩膀上』，这里不再赘述。在我看来第一个真正意义上有难度的事情就是一个字儿：『猜』！&lt;/p&gt;
&lt;p&gt;想要凭 dump 出的头文件里面的一堆函数名类名来猜出想要动手脚的地方，的确是个技术活儿。不仅考验脑洞，有时候还得运气好。把应用程序中的微信拖到 Hopper 中，搜下 “revoke”。这不，我一下子就猜出在哪个方法里面处理撤回消息逻辑的了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-findfuntion@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我凭借直觉，认为 &lt;code&gt;-[MessageService onRevokeMsg:]&lt;/code&gt; 就是我们要找的方法。事实也证明我是对的，一次成功！先看看这个方法的伪代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-pseudocode@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪代码里面包含着好多层复杂的 &lt;code&gt;if&lt;/code&gt; 判断逻辑，想必是这里复杂的业务逻辑让微信的同事无比抓狂，不要怕，我们不想让后面的事情发生，直接来个 &lt;code&gt;return&lt;/code&gt; 就万事大吉！按快捷键 『option+A』 或者选择 Hopper 菜单栏的 『Modify -&amp;gt; Assemble Instruction…』来修改第一行汇编语句：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-revokemsg@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能觉得这里直接 &lt;code&gt;return&lt;/code&gt; 掉是不是胆子也太大了，其实我还是看了函数里这坨代码的。那么多的 &lt;code&gt;if&lt;/code&gt; 判断伴随着的是各种出错场景下的数据上报，真正核心业务逻辑也就是下面这坨：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; = [[MessageData alloc] initWithMsgType:&lt;span class=&quot;number&quot;&gt;0x2710&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; isSendFromSelf]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt; = @selector(toUsrName)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (LOBYTE(&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; toUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setFromUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; fromUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setToUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; toUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setFromUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; fromUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setToUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setMsgStatus:&lt;span class=&quot;number&quot;&gt;0x4&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setMsgContent:var_58]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setMsgCreateTime:LODWORD([&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; msgCreateTime])]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r15&lt;/span&gt; AddLocalMsg:var_50 msgData:&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[NSArray arrayWithObject:&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt;] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r15&lt;/span&gt; DelMsg:var_50 msgList:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; isDelAll:&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;r15&lt;/span&gt; = *objc_release&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码先是判断下撤回消息的人是不是自己，然后分情况更新 UI，最后生成并更新数据。既然没有啥重要操作，那就放心地忽略吧哈哈。&lt;/p&gt;
&lt;p&gt;现在需要将修改后的汇编重新生成新的可执行文件。选择 Hopper 菜单里的 『File -&amp;gt; Produce New Executable…』 后点 Yes：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-NewExecutable@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后将生成的可执行文件替换到 &lt;code&gt;/Applications/WeChat.app/Contents/MacOS/WeChat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;唯一让我不解的是无需对新的 &lt;code&gt;WeChat&lt;/code&gt; 可执行文件进行代码签名微信依然可以正常运行。我是第一次玩逆向，还请前辈大神们指教。做了一系列撤回消息的尝试后，手机上面显示撤回，但 Mac 版微信的消息依然还在。一次猜中，成功！&lt;/p&gt;
&lt;h1 id=&quot;iOS-要稍微折腾一些&quot;&gt;&lt;a href=&quot;#iOS-要稍微折腾一些&quot; class=&quot;headerlink&quot; title=&quot;iOS 要稍微折腾一些&quot;&gt;&lt;/a&gt;iOS 要稍微折腾一些&lt;/h1&gt;&lt;p&gt;前提是有一个已经砸壳的 ipa，要么自己在越狱机中用 dumpdecrypted 砸壳，或者干脆从第三方工具下一个已经砸壳的（也就是给越狱机安装的）。我一开始从同步助手下的有点问题，后来从PP助手下的。&lt;/p&gt;
&lt;p&gt;有了被砸壳的 ipa 就可以继续了，解压后找到里面的 WeChat.app ，注意用 &lt;code&gt;codesign -dvvv WeChat.app&lt;/code&gt; 验证下签名。正版的 app 签名是腾讯的。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;，猜，嗯，是 &lt;code&gt;-[CMessageMgr onRevokeMsg:]&lt;/code&gt; 这个方法。类名换了而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;，改汇编代码。这里需要改的是 Thumb 指令集。其实它是较新的 ARM 处理器的一种模式。我们比较关心的是各种指令的含义，尤其是如何从 Thumb 切换回 ARM，没错，就是用 &lt;code&gt;bx&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineering/wechat-ios.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这有一个&lt;a href=&quot;http://infocenter.arm.com/help/topic/com.arm.doc.qrc0006ec/QRC0006_UAL16.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thumb® 16 位指令集快速参考卡&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后还是跟之前一样替换生成的可执行文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步&lt;/strong&gt;，签名！建议先阅读 &lt;a href=&quot;http://objccn.io/issue-17-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码签名探析&lt;/a&gt;，了解下授权机制 (Entitlements) 和配置文件 (Provisioning)。这一步的前提是拥有一个合法证书，个人或企业都可以！&lt;/p&gt;
&lt;p&gt;先随便新建个工程(我的叫 testUIImage，昨晚研究 UIImage 时建的)，一定要用证书签名，别选 None。。。target 架构选对（自己手机），编译后生成了个 ipa 文件。我们要的就是它里面的签名信息。&lt;/p&gt;
&lt;p&gt;先用 &lt;code&gt;ldid&lt;/code&gt; 工具在桌面上生成个授权文件（Entitlements.plist）：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ldid -e &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Library/&lt;/span&gt;Developer&lt;span class=&quot;regexp&quot;&gt;/Xcode/&lt;/span&gt;DerivedData&lt;span class=&quot;regexp&quot;&gt;/testUIImage-aoqcifvynorulecqtwqqugleuktf/&lt;/span&gt;Build&lt;span class=&quot;regexp&quot;&gt;/Products/&lt;/span&gt;Debug-iphoneos&lt;span class=&quot;regexp&quot;&gt;/testUIImage.app/&lt;/span&gt;testUIImage &amp;gt; ~&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;Entitlements.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：我是用 &lt;code&gt;homebrew&lt;/code&gt; 安装的 &lt;code&gt;ldid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后把 testUIImage.app 中的配置文件 (Provisioning) &lt;strong&gt;embedded.mobileprovision&lt;/strong&gt; 复制粘贴到我们的 WeChat.app 中。（右键显示包内容都会吧）&lt;/p&gt;
&lt;p&gt;最后用 &lt;code&gt;codesign&lt;/code&gt; 命令对 WeChat.app 签名，注意替换为你自己的证书『常用名称』：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;codesign -f -s &lt;span class=&quot;string&quot;&gt;&quot;iPhone Developer: xiaoyu yang (XXXXXXXXX)&quot;&lt;/span&gt; --entitlements &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;Entitlements.plist &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;微信_v6.&lt;span class=&quot;number&quot;&gt;3.22&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Payload/&lt;/span&gt;WeChat.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第四步&lt;/strong&gt;，也是最后一步，打包新的 WeChat.ipa：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcrun -sdk iphoneos PackageApplication -v &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;微信_v6.&lt;span class=&quot;number&quot;&gt;3.22&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Payload/&lt;/span&gt;WeChat.app  -o ~&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;WeChat.ipa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在可以把新的 WeChat.ipa 安装到自己的手机上啦！&lt;/p&gt;
&lt;p&gt;验证了下退出微信杀掉进程后，对方发消息并撤回，进入微信后依然可以收到撤回的消息。excited！&lt;/p&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;其实逆向工程是门很有趣的学问，而任何学问都是入门简单深入难。本例看似容易，其实如果面对更加复杂的环境下，光靠我那点儿可怜的汇编知识肯定是不够的。如果是对 iOS 上的 APP 进行逆向，实则准备工作要麻烦得多。真正掌握了底层的原理和基础知识才是硬道理！&lt;/p&gt;
&lt;p&gt;其实是利用 Security 框架在 app 内部验证签名防止被人修改的，当然在 Mac 上我们最方便的还是用 &lt;code&gt;codesign&lt;/code&gt; 命令啦。苹果提供了&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Reference/CodeSigningRef/index.html#//apple_ref/doc/uid/TP40008151-CH2-SW27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码签名服务的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老子终于也当了回标题党！啊哈！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;处女座强迫症最讨厌别人发消息后撤回了，尤其是发的图片还没看清就被撤了，或者还没来得及看的消息就已经被撤回了。最近逆向工程很火，所以我也简单的逆向了一把微信 for Mac &amp;amp; iOS。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
      <category term="Reverse Engineering" scheme="http://yulingtianxia.com/tags/Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title>Find Convex Hull with Graham Scan &amp; Swift</title>
    <link href="http://yulingtianxia.com/blog/2016/04/28/Find-Convex-Hull-with-Graham-Scan-Swift/"/>
    <id>http://yulingtianxia.com/blog/2016/04/28/Find-Convex-Hull-with-Graham-Scan-Swift/</id>
    <published>2016-04-28T14:37:16.000Z</published>
    <updated>2016-08-27T03:30:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;凸包(Convex hull)&lt;/a&gt; 是一个数学上的概念，在二维平面上可以想象成用一个橡皮筋套住一堆钉在平面上的钉子。本文讲述如何使用 Swift 实现 &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graham scan&lt;/a&gt; 算法来寻找二维平面点集上的凸包。工程源码 Github：&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/Algorithm-Experiment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/d/de/ConvexHull.svg&quot; alt=&quot;By Maksim (original); en:User:Pbroks3 (redraw), via Wikimedia Commons&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhull/convexhull.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;简单粗暴的想法&quot;&gt;&lt;a href=&quot;#简单粗暴的想法&quot; class=&quot;headerlink&quot; title=&quot;简单粗暴的想法&quot;&gt;&lt;/a&gt;简单粗暴的想法&lt;/h1&gt;&lt;p&gt;直观上去看可以理解为『找出最外围的点』，进而把问题转化为『剔除凸多边形内部的点』，进而简化为『剔除任意三角形内的点』。PS：&lt;strong&gt;三角形&lt;/strong&gt;指的是由点集内任意三个不相同的点构成的三角形，以下不再赘述定义，直接以&lt;strong&gt;三角形&lt;/strong&gt;代指。&lt;/p&gt;
&lt;p&gt;下面需要做的是遍历所有三角形的排列组合，找出三角形上或内部的点，并剔除，因为它肯定不是凸包的顶点。&lt;/p&gt;
&lt;p&gt;如何判断一个点 &lt;code&gt;P&lt;/code&gt; 是否在三角形 &lt;code&gt;ABC&lt;/code&gt; 里面呢？&lt;/p&gt;
&lt;p&gt;很简单！如果点 &lt;code&gt;P&lt;/code&gt; 在三角形 &lt;code&gt;ABC&lt;/code&gt; 内，点 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt; 肯定在直线 &lt;code&gt;BC&lt;/code&gt; 的同一侧，点 &lt;code&gt;B&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt; 也肯定在直线 &lt;code&gt;AC&lt;/code&gt; 同一侧，点 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt; 必定也在直线 &lt;code&gt;AB&lt;/code&gt; 同一侧！&lt;/p&gt;
&lt;p&gt;果然够简单粗暴！&lt;/p&gt;
&lt;p&gt;假设直线 &lt;code&gt;BC&lt;/code&gt; 方程为 &lt;code&gt;ax + by + c = 0&lt;/code&gt;,如果点 &lt;code&gt;P(Xp,Yp)&lt;/code&gt; 在直线 &lt;code&gt;BC&lt;/code&gt; 上，则有 &lt;code&gt;a·Xp + b·Yp + c = 0&lt;/code&gt;；如果点 &lt;code&gt;P(Xp,Yp)&lt;/code&gt; 与点 &lt;code&gt;A(Xa,Ya)&lt;/code&gt; 在直线 &lt;code&gt;BC&lt;/code&gt; 同一侧，则有 &lt;code&gt;(a·Xp + b·Yp + c)(a·Xa + b·Ya + c) &amp;gt; 0&lt;/code&gt;。为了不被吐槽拿初中数学忽悠人，还是快速上代码吧：&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func calculatePoint(pointP:CGPoint,onLine &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;:(pointA:CGPoint,pointB:CGPoint)) -&amp;gt; CGFloat &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (pointP.y - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.y) * (&lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointB.x - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.x) - (&lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointB.y - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.y) * (pointP.x - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func checkPoint(P:CGPoint,inTriangle &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;:(A:CGPoint,B:CGPoint,C:CGPoint)) -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var Pp = calculatePoint(P, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let AB = Pp == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||Pp * calculatePoint(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !AB&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Pp = calculatePoint(P, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let AC = Pp == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||Pp * calculatePoint(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !AC&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Pp = calculatePoint(P, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let BC = Pp == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||Pp * calculatePoint(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AB &amp;amp;&amp;amp; AC &amp;amp;&amp;amp; BC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;calculatePoint: onLine:&lt;/code&gt; 函数的作用是将点坐标代入直线方程式并返回计算结果；&lt;code&gt;checkPoint: inTriangle:&lt;/code&gt; 函数的作用是判断某点是否在三角形上或内部。&lt;/p&gt;
&lt;p&gt;在开始暴力遍历所有的三角形组合并剔除不符合要求的点之前，我想再声明一个命题：『X 轴和 Y 轴的极值点肯定是凸包顶点』。也就是说如果一个点的 X 坐标最大，那么它肯定是凸包顶点。这个命题像是废话，用反证法其实也很容易证明：假如 &lt;code&gt;Y&lt;/code&gt; 值最大的点 &lt;code&gt;P&lt;/code&gt; 不是凸包顶点，那么必然处于某个三角形 &lt;code&gt;ABC&lt;/code&gt; 内，并且 &lt;code&gt;ABC&lt;/code&gt; 三个点的 &lt;code&gt;Y&lt;/code&gt; 值都比 &lt;code&gt;P&lt;/code&gt; 小，假设 &lt;code&gt;A&lt;/code&gt; 点为三角形 &lt;code&gt;ABC&lt;/code&gt; 中 &lt;code&gt;Y&lt;/code&gt; 值最小的点，则 &lt;code&gt;P&lt;/code&gt; 点和 &lt;code&gt;A&lt;/code&gt; 点必然处于直线 &lt;code&gt;BC&lt;/code&gt; 两侧，矛盾。命题得证。&lt;/p&gt;
&lt;p&gt;PS：这里注意我们想要的结果仅仅是&lt;strong&gt;凸包顶点&lt;/strong&gt;，有些点可能位于两个相邻的凸包顶点连线上，这样的点只能算作&lt;strong&gt;凸包上的点&lt;/strong&gt;，它们与&lt;strong&gt;凸包内的点&lt;/strong&gt;一样需要被剔除。&lt;/p&gt;
&lt;p&gt;我们最终输出的结果希望是逆时针顺序输出的，比如下图中的凸包顶点输出顺序应为：&lt;code&gt;A,B,C,D,E,F,G,H&lt;/code&gt;，其中 &lt;code&gt;A&lt;/code&gt; 点和 &lt;code&gt;D&lt;/code&gt; 点分别为 X 最小的点和 X 最大的点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhullQQ20160428-0@2x.png&quot; alt=&quot;随机生成50个点集的凸包&quot;&gt;&lt;/p&gt;
&lt;p&gt;有两种方案可以按照逆时针顺序输出结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以 &lt;code&gt;A&lt;/code&gt; 点为中心，向量 &lt;code&gt;DA&lt;/code&gt; 方向做射线逆时针扫描，按照扫描到点的顺序输出即可，直至 360° 扫描完毕。&lt;/li&gt;
&lt;li&gt;将直线 &lt;code&gt;AD&lt;/code&gt; 上方的点集 &lt;code&gt;Su&lt;/code&gt; 按照 X 值从大到小排列，下方的点集 &lt;code&gt;Sd&lt;/code&gt; 按照 X 值从小到大排列，最后输出顺序为：&lt;code&gt;A，Sd，D，Su&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很明显，第二种方案计算量小并且实现简单。&lt;/p&gt;
&lt;p&gt;但受到方案 1 的启发，我们可以将暴力遍历的时间复杂度减少一层。将 &lt;code&gt;A&lt;/code&gt; 点与其他凸包顶点连上虚线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhull/divideintotriangles@2x.png&quot; alt=&quot;以 A 点将凸包划分成几个三角形&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说可以把 &lt;code&gt;A&lt;/code&gt; 点作为公共点来遍历三角形。因为 &lt;code&gt;A&lt;/code&gt; 点肯定不会被剔除，并且上图中以 &lt;code&gt;A&lt;/code&gt; 点为公共点的三角形已经覆盖了所有的点，不用担心会有遗漏。于是三角形的一个顶点已经确定下来了，只需遍历生成另两个顶点和一个需要判定是否在三角形内的点，四层循环嵌套降为三层！&lt;/p&gt;
&lt;p&gt;献上核心算法的 Swift 代码：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func generateConvexHull(inout &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;:[PointView])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       point.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.count &amp;lt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; minXPoint = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; maxXPoint = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       minXPoint = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x &amp;lt; minXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x ? point : minXPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       maxXPoint = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x &amp;gt; maxXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x ? point : maxXPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; point1 = minXPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point2 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !point2.isConvexHullNode || point2 == point1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point3 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !point3.isConvexHullNode || point3 == point1 || point3 == point2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point4 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !point4.isConvexHullNode || point4 == point1 || point4 == point2 || point4 == point3 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; checkPoint(point4.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, inTriangle: (point2.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,point3.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,point1.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   point4.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; su = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.filter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       calculatePoint($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, onLine: (minXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,maxXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; sl = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.filter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       calculatePoint($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, onLine: (minXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,maxXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   su = su.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x &amp;gt; ($&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sl = sl.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x &amp;lt; ($&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; result = [minXPoint]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   result += sl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   result.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(maxXPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   result += su&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这么暴力的算法复杂度也是高的惊人，为 &lt;code&gt;O(N^3)&lt;/code&gt;！&lt;strong&gt;想必此时已经有不少已经脱了裤子的同学想问博主为什么要给自己看这些！&lt;/strong&gt;说好的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graham scan&lt;/a&gt;算法呢？其实这部分『前戏』很重要，绝不是为了凑篇幅，一些重要概念对后面的正题理解有很大帮助，比如下面要介绍的 &lt;code&gt;PointView&lt;/code&gt; 类（卧槽表碧莲啊还来！）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PointView&lt;/code&gt; 是算法演示程序中用于绘制和存储二维点坐标信息的类，它不仅存储坐标，还维护了状态 &lt;code&gt;isConvexHullNode&lt;/code&gt;，并根据状态值是否为凸包顶点来改变 UI（红色的点为凸包顶点，紫色为非凸包顶点）。此外 &lt;code&gt;PointView&lt;/code&gt; 还需要处理鼠标拖拽事件。这部分比较简单，就不上代码了。&lt;/p&gt;
&lt;h1 id=&quot;Graham-Scan&quot;&gt;&lt;a href=&quot;#Graham-Scan&quot; class=&quot;headerlink&quot; title=&quot;Graham Scan&quot;&gt;&lt;/a&gt;Graham Scan&lt;/h1&gt;&lt;p&gt;当沿着凸包逆时针漫游时，你会发现总是在『向左拐』；反之则是『向右拐』。&lt;/p&gt;
&lt;p&gt;还记得之前说的以 &lt;code&gt;A&lt;/code&gt; 点为中心逆时针扫描所有点的方案吧？将所有除 &lt;code&gt;A&lt;/code&gt; 以外的点按照这个扫描顺序进行排列。然后在此基础上遍历并剔除『不向左拐』的点，最后输出的点集正好是按顺序排列好的。&lt;/p&gt;
&lt;p&gt;PS:判断 &lt;code&gt;P1P2P3&lt;/code&gt; 在 &lt;code&gt;P2&lt;/code&gt; 拐弯方向公式：&lt;code&gt;(p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x)&lt;/code&gt;，如果其结果为 &lt;code&gt;0&lt;/code&gt;，这三个点是共线的，如果其结果为正，这三个点是向左拐的，否则，它是向右拐的。&lt;/p&gt;
&lt;p&gt;为了方便计算，通常选择 Y 值最小的点作为 &lt;code&gt;A&lt;/code&gt; 点（Y 值一样就选最右边的点），其余的点就都落在第一、二象限。&lt;/p&gt;
&lt;p&gt;下图来自维基百科，但是漫游方向是&lt;strong&gt;顺时针&lt;/strong&gt;的，也就是说要剔除&lt;strong&gt;不向右拐&lt;/strong&gt;的点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Graham_scan.png&quot; alt=&quot;via Wikimedia Commons&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;P&lt;/code&gt; 为原点的极坐标下按照极角大小构造顺时针排序的数组：&lt;code&gt;[A,B,C,D]&lt;/code&gt;，计算极角的函数实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calculatePolarAngle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(origin:CGPoint, target:CGPoint)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; trans = (x: target.x - origin.x, y: target.y - origin.y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; angle = atan(&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;(trans.y) / &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;(trans.x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; trans &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle + &lt;span class=&quot;type&quot;&gt;M_PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle + &lt;span class=&quot;type&quot;&gt;M_PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;type&quot;&gt;M_PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着就是遍历按极角排序好的数组。先将 &lt;code&gt;P&lt;/code&gt; 点和 &lt;code&gt;A&lt;/code&gt; 点 push 进栈，然后检查 &lt;code&gt;PAB&lt;/code&gt; 是否不向右拐，因为在 &lt;code&gt;A&lt;/code&gt; 点右拐所以将 &lt;code&gt;B&lt;/code&gt; 点 push 进栈，然后继续检查 &lt;code&gt;C&lt;/code&gt; 点。可以看出在 &lt;code&gt;C&lt;/code&gt; 点处 &lt;code&gt;BCD&lt;/code&gt; 向左拐了，于是 &lt;code&gt;C&lt;/code&gt; 点被剔除，栈 pop 出 &lt;code&gt;C&lt;/code&gt;。然后检查 &lt;code&gt;ABD&lt;/code&gt; 处是否符合要求，结果是符合要求的，于是将 &lt;code&gt;D&lt;/code&gt; 点 push 进栈。&lt;/p&gt;
&lt;p&gt;也就是说遍历数组时始终判断栈顶元素处拐弯方向是否符合要求：方向符合要求则将当前遍历的点 push 进栈，否则将栈顶元素 pop，并继续判断栈顶元素处拐弯是否符合要求，直到符合要求为止。（如若栈元素个数小于 &lt;code&gt;3&lt;/code&gt;，则不再 pop）&lt;/p&gt;
&lt;p&gt;最后的实现算法 Swift 代码如下（逆时针漫游）&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func generateConvexHull(inout &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;: [PointView]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       point.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.count &amp;lt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; minYPoint = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; minIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (index,point) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.enumerate() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (minIndex,minYPoint) = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.y &amp;lt; minYPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.y ? (index,point) : (minIndex,minYPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.removeAtIndex(minIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.sortInPlace &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; calculatePolarAngle(minYPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, target: $&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;) &amp;lt; calculatePolarAngle(minYPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, target: $&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; stack = [minYPoint]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; restPoints = [PointView]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   stack.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..&amp;lt;&lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.count] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       func checkTurnsRight() -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; p1 = stack[stack.count-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; p2 = stack.&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;!.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; p3 = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; checkTurnsRight() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           stack.&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;?.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           restPoints.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack.&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           stack.removeLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; stack.count &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       stack.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; = stack + restPoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Graham Scan 的时间复杂度是 &lt;code&gt;O(nlogn)&lt;/code&gt;，而且只适用于二维平面。算法导论上也讲到了包裹法（Jarvis步进法）和分治法，时间复杂度都是 &lt;code&gt;O(nlogn)&lt;/code&gt;。我的&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那个工程&lt;/a&gt;里也有&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment/blob/master/ConvexHull/ConvexHull/DivideAndConquer.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分治法的 Swift 实现&lt;/a&gt;。如果拓展到多维空间，我觉得使用 Swift 并不是一个很好的实现语言，Matlab 再适合不过了。&lt;/p&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;博主江郎才尽竟然拿学校的某次算法实验充数尼玛坑爹呢这是！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot;&gt;凸包(Convex hull)&lt;/a&gt; 是一个数学上的概念，在二维平面上可以想象成用一个橡皮筋套住一堆钉在平面上的钉子。本文讲述如何使用 Swift 实现 &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot;&gt;Graham scan&lt;/a&gt; 算法来寻找二维平面点集上的凸包。工程源码 Github：&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment&quot;&gt;https://github.com/yulingtianxia/Algorithm-Experiment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/d/de/ConvexHull.svg&quot; alt=&quot;By Maksim (original); en:User:Pbroks3 (redraw), via Wikimedia Commons&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhull/convexhull.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
      <category term="Algorithm" scheme="http://yulingtianxia.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>为 UIAutomation 添加自动化测试标签的探索</title>
    <link href="http://yulingtianxia.com/blog/2016/03/28/Add-UITest-Label-for-UIAutomation/"/>
    <id>http://yulingtianxia.com/blog/2016/03/28/Add-UITest-Label-for-UIAutomation/</id>
    <published>2016-03-27T16:47:32.000Z</published>
    <updated>2016-11-07T14:49:14.000Z</updated>
    
    <content type="html">&lt;p&gt;UIAutomation 是苹果提供的自动化测试框架，iOS 不像 Android 那样可以在 xml 文件中自动生成唯一的 id 作为标签，需要我们手动为控件添加可访问性（Accessibility）。如何让一个控件的可访问标签在当前页面唯一且不变呢？当然纯手工在代码中插入加标签的逻辑代码肯定是可行的，但费时费力，所以我在这里做一些用程序自动化添加标签尝试性的探索。&lt;/p&gt;
&lt;p&gt;Github 传送门: &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;分析-amp-方案&quot;&gt;&lt;a href=&quot;#分析-amp-方案&quot; class=&quot;headerlink&quot; title=&quot;分析&amp;amp;方案&quot;&gt;&lt;/a&gt;分析&amp;amp;方案&lt;/h2&gt;&lt;p&gt;首先回顾下生成标签需要符合的必要条件：（&lt;strong&gt;以下将“自动化测试标签”简称为“标签”&lt;/strong&gt;）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面内唯一：页面内不同视图标签不重复。&lt;/li&gt;
&lt;li&gt;运行时恒定：每次运行应用中此页面时视图的标签始终恒定，无需修改测试脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了满足标签的必要条件，可以选择其在某个类中的属性名称作为标签，因为同一个类中是不可能有两个相同名称的属性的，并且属性名称都是固定在代码里的，也就是恒定不变的。在此总结下标签的策略流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果变量是某个类的属性，则可满足标签条件。因为代码没有改动，则标签也不会变化。即使代码有变动，也肯定是因为业务逻辑变更导致了界面上的变化，那么测试脚本肯定也是要改的，所以无需多虑此种情况。&lt;/li&gt;
&lt;li&gt;如果是临时创建的局部变量，同一页面中很有可能有相同名字的局部变量。而且 Objective-C Runtime 无法获取局部变量名称，所以针对此种情况尽量采用其他来源的内容作为标签。&lt;/li&gt;
&lt;li&gt;获取代码中局部变量的变量名，并与其对象绑定起来。（绑定是指将标签赋给&lt;code&gt;accessibilityIdentifier&lt;/code&gt; 之类的属性）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于上面第二条种的局部变量生成标签的策略，详细阐述如下：&lt;/p&gt;
&lt;p&gt;由于编译器对代码进行了词法分析、语法分析和语义分析，此时局部变量名早就消失了。运行的时候局部变量在内存里也只是个冰冷冷的对象罢了，不像类的实例变量或属性那样可以获取名称。既然编译阶段之后就已经拿不到局部变量名了，所以只能对源代码进行文字处理来获取局部变量名。比如使用宏定义在 &lt;code&gt;addSubview:&lt;/code&gt; 方法调用的时候传入参数名，并将参数表与参数实例绑定。但是这对 Swift 算是个方案，对于语法怪异的 Objective-C 来说是不可行的。&lt;/p&gt;
&lt;p&gt;既然从方法外不能直接传入参数，那么尝试从方法内来获取函数调用堆栈。查找上一层函数在源码的位置，用正则表达式得到 &lt;code&gt;addSubview:&lt;/code&gt; 的参数名称。从函数调用堆栈获取上一层调用函数在源码中的位置（比如文件名和行数），然后用正则匹配抓取 &lt;code&gt;addSubview:&lt;/code&gt; 的参数名，看样子是个方案。获取函数调用栈对应源码位置可以用 &lt;a href=&quot;http://stackoverflow.com/questions/3151779/how-its-better-to-invoke-gdb-from-program-to-print-its-stacktrace/4611112#4611112&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;backtrace_symbols&lt;/code&gt;&lt;/a&gt;，或者 &lt;code&gt;[NSThread callStackSymbols]&lt;/code&gt; 等，但这些操作都不是在 iOS 系统内，不能将标签绑定到 iOS 运行环境中的实例。&lt;/p&gt;
&lt;p&gt;当然也可以用脚本程序帮我们在源码指定位置中插入添加标签的逻辑代码，但这样的弊端有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;维护成本较高，脚本在向源码中插入加标签逻辑代码时需要判断是否已经插入过这段代码，增加了出错几率&lt;/li&gt;
&lt;li&gt;对代码内容变化的鲁棒性不高。因为重构等行为很可能把原有代码顺序弄乱，脚本需要考虑很多情况。每次新增代码都要重新跑一次脚本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然局部变量的名字可能重名并难于与实例绑定，不妨另辟蹊径寻求其他方法。这里提出一种假设：程序员写代码的时候之所以将一个视图变量声明为类的属性，是因为以后还会经常用到它。而那些被声明为局部变量的，肯定是临时用一次就不用了。这种用临时变量创建的视图添加到视图层级中内容极有可能就不会变了，其大部分应该是 &lt;code&gt;UILabel&lt;/code&gt;、&lt;code&gt;UIButton&lt;/code&gt;、&lt;code&gt;UIImageView&lt;/code&gt; 以及被当做容器视图功能的 &lt;code&gt;UIView&lt;/code&gt; 实例。针对这种情况可以将其视图的内容作为标签的『特殊标识』。针对这种情况可以将其视图的内容作为标签，比如 &lt;code&gt;UILabel&lt;/code&gt; 的文本内容、&lt;code&gt;UIButton&lt;/code&gt; 的背景图片资源名和文本内容以及 &lt;code&gt;UIImageView&lt;/code&gt; 的图片资源名。基于以上的逻辑，最后采用基础控件内容作为局部变量的标签。&lt;/p&gt;
&lt;p&gt;总结为一句话：如果视图是某个类的属性，就用属性名作为标签；否则使用其内容作为标签。&lt;/p&gt;
&lt;h2 id=&quot;实践-amp-探索&quot;&gt;&lt;a href=&quot;#实践-amp-探索&quot; class=&quot;headerlink&quot; title=&quot;实践&amp;amp;探索&quot;&gt;&lt;/a&gt;实践&amp;amp;探索&lt;/h2&gt;&lt;p&gt;我采用 hook 的方式来在运行时生成标签。hook &lt;code&gt;UIView&lt;/code&gt; 中的&lt;code&gt;accessibilityIdentifier&lt;/code&gt; 的原因是此时的视图层级更全，并且是惰性生成标签。其实使用 &lt;code&gt;accessibilityLabel&lt;/code&gt; 也是可以的，但对 VoiceOver 功能会有影响，毕竟变量名不像视图文字内容那样有实际意义。&lt;/p&gt;
&lt;p&gt;PS：这里之所以不 hook &lt;code&gt;addSubview:&lt;/code&gt; 是因为在添加 subview 时，视图层级树并不完整。虽然调用 &lt;code&gt;accessibilityIdentifier&lt;/code&gt; 时视图层级也可能不完整（比如在 &lt;code&gt;addSubview:&lt;/code&gt; 之前调用 &lt;code&gt;accessibilityIdentifier&lt;/code&gt;），但这样的几率远远小于前者：很多时候是 &lt;code&gt;[a addSubview:b]&lt;/code&gt;，但此时 &lt;code&gt;a&lt;/code&gt; 还没有 &lt;code&gt;superview&lt;/code&gt;，那么如果 hook &lt;code&gt;addSubview:&lt;/code&gt;方法，就只能保留 &lt;code&gt;a&lt;/code&gt; 以下的视图层级。这并不是我想看到的。所以在 &lt;code&gt;UIView&lt;/code&gt; 中的 &lt;code&gt;accessibilityIdentifier&lt;/code&gt; 方法中生成标签可以尽可能地保留完整的视图层级，并且是 lazy load 的方式，降低 CPU 使用峰值。&lt;/p&gt;
&lt;p&gt;放个残缺版的代码，心情好的时候更新下，重要的还是思路：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIView&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;TBUIAutoTest&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; swizzleSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(accessibilityIdentifier) withAnotherSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(tb_accessibilityIdentifier)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	  [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; swizzleSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(accessibilityLabel) withAnotherSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(tb_accessibilityLabel)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)swizzleSelector:(SEL)originalSelector withAnotherSelector:(SEL)swizzledSelector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class aClass = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method originalMethod = class_getInstanceMethod(aClass, originalSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method swizzledMethod = class_getInstanceMethod(aClass, swizzledSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; didAddMethod =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    class_addMethod(aClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    originalSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    method_getImplementation(swizzledMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    method_getTypeEncoding(swizzledMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (didAddMethod) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        class_replaceMethod(aClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            swizzledSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            method_getImplementation(originalMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            method_getTypeEncoding(originalMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        method_exchangeImplementations(originalMethod, swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Method Swizzling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)tb_accessibilityIdentifier&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *accessibilityIdentifier = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; tb_accessibilityIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (accessibilityIdentifier.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; [[accessibilityIdentifier substringToIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;(&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; accessibilityIdentifier;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([accessibilityIdentifier isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;null&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        accessibilityIdentifier = &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *labelStr = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.superview findNameWithInstance:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (labelStr &amp;amp;&amp;amp; ![labelStr isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labelStr = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,labelStr];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; class]]) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//UILabel 使用 text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            labelStr = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).text?:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; class]]) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//UIImageView 使用 image 的 imageName&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            labelStr = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).image.accessibilityIdentifier?:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;image%ld&quot;&lt;/span&gt;,(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)((&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).tag]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; class]]) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//UIButton 使用 button 的 text 和 image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            labelStr = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@%@)&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).titleLabel.text?:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).imageView.image.accessibilityIdentifier?:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (accessibilityIdentifier) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 已有 label，则在此基础上再次添加更多信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            labelStr = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,accessibilityIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.accessibilityValue = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).currentBackgroundImage.accessibilityIdentifier?:&lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([labelStr isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;()&quot;&lt;/span&gt;] || [labelStr isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;(null)&quot;&lt;/span&gt;] || [labelStr isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;null&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labelStr = &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setAccessibilityIdentifier:labelStr];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; labelStr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)tb_accessibilityLabel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; class]]) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//UIImageView 特殊处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.superview findNameWithInstance:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.accessibilityIdentifier = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,name];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.accessibilityIdentifier = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).image.accessibilityIdentifier?:[&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;image%ld&quot;&lt;/span&gt;,(&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)((&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).tag]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; class]]) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//UITableViewCell 特殊处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.accessibilityIdentifier = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;(%@)&quot;&lt;/span&gt;,((&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;).reuseIdentifier];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; tb_accessibilityLabel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在获取到变量名之后，还需要进行处理才能作为标签。首先在变量名外加一层括号，目的是区分下此标签是代码生成的而不是手动加上去的。方法结尾的 &lt;code&gt;[self setAccessibilityIdentifier:subLabelStr]&lt;/code&gt; 用来给 &lt;code&gt;_accessibilityIdentifier&lt;/code&gt; 赋值生成好的标签。&lt;/p&gt;
&lt;p&gt;对于获取不到变量名的临时变量和视图层级中一些系统私有的视图变量，才去之前分析中提到的方案特殊处理。好一长串的 &lt;code&gt;if-else&lt;/code&gt; 啊，为了处理这些特殊情况写一坨脏代码我也是醉了。最后别忘处理下无意义的字符串，比如 “null”。&lt;/p&gt;
&lt;p&gt;在 UIAutomation 生成控件树时，大部分 &lt;code&gt;UIImageView&lt;/code&gt; 和 &lt;code&gt;UITableViewCell&lt;/code&gt; 无法通过 hook &lt;code&gt;accessibilityIdentifier&lt;/code&gt; 来在控件树中获取到自动化测试标签，或者获得的标签不是属性名而是图片资源名。解决方案是 hook accessibilityLabel 方法，并在其中为 &lt;code&gt;UIImageView&lt;/code&gt; 和 &lt;code&gt;UITableViewCell&lt;/code&gt; 加自动化测试标签。&lt;/p&gt;
&lt;p&gt;为了将 &lt;code&gt;UIImage&lt;/code&gt; 的图片资源名和实例绑定，我又 hook 了 &lt;code&gt;UIImage&lt;/code&gt; 的 &lt;code&gt;imageNamed:&lt;/code&gt; 类方法：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)tb_imageNamed:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)imageName&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; tb_imageNamed:imageName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    image.accessibilityIdentifier = imageName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面说下获取变量名的 &lt;code&gt;findNameWithInstance:&lt;/code&gt; 方法的实现：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIResponder&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;TBUIAutoTest&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)nameWithInstance:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)instance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numIvars = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *key=&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ivar * ivars = class_copyIvarList([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &amp;amp;numIvars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numIvars; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Ivar thisIvar = ivars[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *type = ivar_getTypeEncoding(thisIvar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *stringType =  [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithCString:type encoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![stringType hasPrefix:&lt;span class=&quot;string&quot;&gt;@&quot;@&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((object_getIvar(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, thisIvar) == instance)) &amp;#123;&lt;span class=&quot;comment&quot;&gt;//此处 crash 不要慌！&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            key = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithUTF8String:ivar_getName(thisIvar)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(ivars);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)findNameWithInstance:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *) instance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; nextResponder = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; nextResponder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *name = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; nameWithInstance:instance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!name) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [nextResponder findNameWithInstance:instance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([name hasPrefix:&lt;span class=&quot;string&quot;&gt;@&quot;_&quot;&lt;/span&gt;]) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;//去掉变量名的下划线前缀&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name = [name substringFromIndex:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为我们并不知道某个视图对象在哪个类中充当了属性或成员变量，所以 &lt;code&gt;findNameWithInstance:&lt;/code&gt; 方法会沿着响应链向上递归查找，范围不仅涵盖 &lt;code&gt;UIView&lt;/code&gt;，连 &lt;code&gt;UIViewController&lt;/code&gt; 都不能放过。每找一层就要调用 &lt;code&gt;nameWithInstance:&lt;/code&gt; 方法用 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 遍历成员变量列表的方式查找变量名。&lt;/p&gt;
&lt;p&gt;别忘去掉开头的下划线，因为在Runtime中保存的其实是成员变量的名称，默认都是带有下划线前缀的。&lt;/p&gt;
&lt;p&gt;因为 hook 的方法不是 &lt;code&gt;accessibilityLabel&lt;/code&gt;，所以不能通过 Xcode 中的 View Debug 页面来查看加标签的效果。最好的方法还是通过 UIAutomation 抓取控件树，这样的效果比较真实。为了便于在真机上查看标签内容，我为所有视图增加了长按手势，长按视图后弹警告框显示自动化测试标签的内容。 &lt;/p&gt;
&lt;p&gt;hook  &lt;code&gt;addSubview:&lt;/code&gt; 方法，在其中添加长按手势。 &lt;code&gt;longPress:&lt;/code&gt; 方法中主要是让长按的视图高亮并弹 Alert 显示自动化测试标签的内容，代码就不贴了。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)tb_addSubview:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!view) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; tb_addSubview:view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UILongPressGestureRecognizer&lt;/span&gt; *longPress = [[&lt;span class=&quot;built_in&quot;&gt;UILongPressGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(longPress:)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    longPress.delegate = [TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt; sharedInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addGestureRecognizer:longPress];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建 &lt;code&gt;TBUIAutoTest&lt;/code&gt; 单例作为所有手势的委托，并在其中实现一些手势捕获优先级的逻辑，以此解决手势冲突带来的问题:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TBUIAutoTest&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)sharedInstance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt; *_instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _instance = [TB&lt;span class=&quot;built_in&quot;&gt;UIAutoTest&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)gestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)otherGestureRecognizer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)gestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)gestureRecognizer shouldRequireFailureOfGestureRecognizer:(&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *)otherGestureRecognizer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([otherGestureRecognizer.view isDescendantOfView:gestureRecognizer.view]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![otherGestureRecognizer isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UILongPressGestureRecognizer&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;感受-amp-总结&quot;&gt;&lt;a href=&quot;#感受-amp-总结&quot; class=&quot;headerlink&quot; title=&quot;感受&amp;amp;总结&quot;&gt;&lt;/a&gt;感受&amp;amp;总结&lt;/h2&gt;&lt;p&gt;&lt;del&gt;我是杨(gu)阿莫，今天我给大家要讲的是一个月前测试帅哥要求加自动化测试标签后老大开会讨论方案组内高工一致不赞同手动加并要求自动加并在最后老大钦点这个事情就交给我了的故事。这其中还经历了方案的各种改，五子棋同学的实力参(jiao)谋(ji)，以及拉屎时把本该思考人生的时间花在了改进方案。这个月博客实在不知道该写啥眼看月底了再不更新怕以后再也不想更新了呢所以你会发现这篇文章水水的科科！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;呵呵后来发现&lt;del&gt;大部分人&lt;/del&gt;所有人都看不懂，但这个方案真的好用！&lt;/p&gt;
&lt;p&gt;如果大家有更好的方案，或者觉得我的方案一开始就跑偏了，甚至是已经有一个不用手动加标签代码的现成的超屌超牛逼的 iOS 自动化测试框架，请告诉我！据说整个腾讯都是手动加自动化测试标签，老大说做有挑战的事情才有意思嘛。&lt;/p&gt;
&lt;p&gt;欢迎给 &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TBUIAutoTest&lt;/a&gt; 提 PR 和 Issue！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;UIAutomation 是苹果提供的自动化测试框架，iOS 不像 Android 那样可以在 xml 文件中自动生成唯一的 id 作为标签，需要我们手动为控件添加可访问性（Accessibility）。如何让一个控件的可访问标签在当前页面唯一且不变呢？当然纯手工在代码中插入加标签的逻辑代码肯定是可行的，但费时费力，所以我在这里做一些用程序自动化添加标签尝试性的探索。&lt;/p&gt;
&lt;p&gt;Github 传送门: &lt;a href=&quot;https://github.com/yulingtianxia/TBUIAutoTest&quot;&gt;TBUIAutoTest&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>自制一款 Mac 平台 URL 辅助工具</title>
    <link href="http://yulingtianxia.com/blog/2016/02/27/TFSHelper/"/>
    <id>http://yulingtianxia.com/blog/2016/02/27/TFSHelper/</id>
    <published>2016-02-26T16:35:53.000Z</published>
    <updated>2016-09-21T15:25:54.000Z</updated>
    
    <content type="html">&lt;p&gt;工作时经常会收到同事发来的一些链接，有的带空格的链接会断开，不能直接点击查看，需要手动复制完整链接并粘贴查看。所以我做了个 Mac 系统上的 URL 辅助工具，在复制 URL 时自动将其打开。还实现缓存常用链接、自动/手动连接切换、登录时启动等功能。开发语言为 Swift 3 和 AppleScript。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;因为在腾讯大部分资源都在 TFS（Tencent File System）上，所以我针对 TFS 格式的链接做了些特殊处理。因为 TFS 本质是基于 Windows 上的分布式文件存储系统，从 Mac 上访问其共享的文件需要将 URL 处理成 SMB （服务信息块）协议，然后才能打开。因为是针对 TFS 而做了特殊逻辑处理，我将其命名为 &lt;a href=&quot;https://github.com/yulingtianxia/TFSHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TFSHelper&lt;/a&gt;。可以在 &lt;a href=&quot;https://github.com/yulingtianxia/TFSHelper/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/TFSHelper/releases&lt;/a&gt; 下载 TFSHelper 最新的 Release 版本。&lt;/p&gt;
&lt;h1 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h1&gt;&lt;p&gt;我的思路是先将剪贴板中的 URL 处理后再写入剪贴板，然后用 AppleScript 模拟键盘事件，利用快捷键将剪贴板内容粘贴到 Finder 的连接服务器地址栏，然后模拟按下回车，实现自动连接。其实理论上也可以使用 AppleScript 直接通过 URL 连接到服务器，但是一直都出现 error，只好用这个歪招曲线救国。缓存常用链接使用 LRU 策略，登录时启动其实玩的依旧是套路，这个后面再讲。&lt;/p&gt;
&lt;h2 id=&quot;替换剪贴板内容&quot;&gt;&lt;a href=&quot;#替换剪贴板内容&quot; class=&quot;headerlink&quot; title=&quot;替换剪贴板内容&quot;&gt;&lt;/a&gt;替换剪贴板内容&lt;/h2&gt;&lt;p&gt;如果剪贴板中的文字内容含有符合 TFS 规则的 URL，那就将其提取并使用 &lt;code&gt;convert:&lt;/code&gt; 函数将其处理成 SMB 协议格式；如果已经含有 SMB 协议的 URL，那就提取出来：&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func catchTFSLocation() -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; texts = &lt;span class=&quot;type&quot;&gt;NSPasteboard&lt;/span&gt;.general().readObjects(forClasses: [&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt;.self &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;AnyClass&lt;/span&gt;], options: &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; text &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; texts &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt; = text.&lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;\\\\tencent&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                text = convert(text.substring(&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;.lowerBound))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt; = text.&lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;smb://&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                text = text.substring(&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;range&lt;/span&gt;.lowerBound)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后将处理后的 URL 写入剪贴板，注意这里写入剪贴板的类型为 &lt;code&gt;NSStringPboardType&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;writePasteboard&lt;/span&gt;(_ &lt;span class=&quot;attribute&quot;&gt;location&lt;/span&gt;: String) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSPasteboard&lt;span class=&quot;selector-class&quot;&gt;.general&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.declareTypes&lt;/span&gt;([NSStringPboardType], &lt;span class=&quot;attribute&quot;&gt;owner&lt;/span&gt;: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;NSPasteboard&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.general&lt;/span&gt;()&lt;span class=&quot;selector-class&quot;&gt;.setString&lt;/span&gt;(location, &lt;span class=&quot;attribute&quot;&gt;forType&lt;/span&gt;: NSStringPboardType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;模拟键盘事件&quot;&gt;&lt;a href=&quot;#模拟键盘事件&quot; class=&quot;headerlink&quot; title=&quot;模拟键盘事件&quot;&gt;&lt;/a&gt;模拟键盘事件&lt;/h2&gt;&lt;p&gt;用 Cocoa 执行脚本最常用的方法就是通过 &lt;code&gt;NSTask&lt;/code&gt; 类，屡试不爽：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;simulateKeys&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; task = &lt;span class=&quot;type&quot;&gt;Process&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   task.launchPath = &lt;span class=&quot;string&quot;&gt;&quot;/usr/bin/osascript&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   task.arguments = [&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(Bundle.main.resourcePath!)&lt;/span&gt;/simulateKeys.scpt&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   task.launch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 &lt;code&gt;launchPath&lt;/code&gt; 是能够执行脚本文件的程序路径，也就是解释器咯。参数数组的第 0 个是脚本文件的路径，也可以是脚本内容字符串。这与正常在 terminal 中敲命令是一样的。因为我们的脚本不涉及到数据的输入输出，所以代码比较简单。 这里使用 AppleScript 的好处是方便快捷通俗易懂，其拟人化的语法很是生动：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Finder&quot;&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;tell&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;tell&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;System Events&quot;&lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;tell&lt;/span&gt; process &lt;span class=&quot;string&quot;&gt;&quot;Finder&quot;&lt;/span&gt;		&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;frontmost&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;tell&lt;/span&gt;		key down command	keystroke &lt;span class=&quot;string&quot;&gt;&quot;k&quot;&lt;/span&gt;	keystroke &lt;span class=&quot;string&quot;&gt;&quot;v&quot;&lt;/span&gt;	key up command	keystroke &lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt;	&lt;span class=&quot;built_in&quot;&gt;delay&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;the clipboard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; null&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;tell&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我来翻译下哈：告诉 Finder 起来嗨，站到最前面！按住 command 别撒手，敲个 k 再敲个 v，动次大次！撒手回车等半秒，最后清空剪贴板。&lt;/p&gt;
&lt;p&gt;在写这段脚本前我的确就是照着这个节拍一次次打开设计妹子和产品妹子发来的 TFS 链接的！（当然汉子发的我也得打开，就是节拍慢了许多）关键是得先手动把 URL 格式改了然后再动次大次，别提有多痛苦了~&lt;/p&gt;
&lt;h2 id=&quot;缓存常用链接&quot;&gt;&lt;a href=&quot;#缓存常用链接&quot; class=&quot;headerlink&quot; title=&quot;缓存常用链接&quot;&gt;&lt;/a&gt;缓存常用链接&lt;/h2&gt;&lt;p&gt;唉卧槽这么简单的事儿一个 &lt;code&gt;NSCache&lt;/code&gt; 不就搞定了么？&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;p&gt;本节完。。。&lt;/p&gt;
&lt;p&gt;。。。&lt;/p&gt;
&lt;p&gt;那我还写它干嘛？！&lt;/p&gt;
&lt;p&gt;常用链接会记录最近打开的 5 个 TFS 链接，因为 &lt;code&gt;NSCache&lt;/code&gt; 不是很符合我的要求，所以我自己手动写了个 LRU Cache。相比于 Cocoa 提供的 &lt;code&gt;NSCache&lt;/code&gt;，我写的这个 LRU Cache 支持遍历 key 值，并根据场景需求做了一些定制，比如 get 操作并不会算作使用频次。用法很简单，既可以将其当为数组来获取 key，也能当成字典使用，通过 key 获取 value。因为我让它兼容了两套协议，并实现 &lt;code&gt;SequenceType&lt;/code&gt; 协议能够使用 &lt;code&gt;for...in&lt;/code&gt; 遍历，这些特性都是 &lt;code&gt;NSCache&lt;/code&gt; 所没有的。&lt;/p&gt;
&lt;p&gt;首先解决&lt;strong&gt;既可以将其当为数组来获取 key，也能当成字典使用，通过 key 获取 value&lt;/strong&gt;这个问题。在 &lt;code&gt;LRUCache&lt;/code&gt; 内部维护一个字典和一个数组，对外暴漏 &lt;code&gt;subscript&lt;/code&gt; 接口即可：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LRUCache&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;:&lt;span class=&quot;title&quot;&gt;Hashable&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;NSCoding&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;SequenceType&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileprivate &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _cache = [&lt;span class=&quot;type&quot;&gt;K&lt;/span&gt;:&lt;span class=&quot;type&quot;&gt;V&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileprivate &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _keys = [&lt;span class=&quot;type&quot;&gt;K&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; countLimit:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(index:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;K&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _keys[index]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;subscript&lt;/span&gt;(key:&lt;span class=&quot;type&quot;&gt;K&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;type&quot;&gt;V&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _cache[key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt;(obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; obj == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _cache.removeValue(forKey: key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                useKey(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _cache[key] = obj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileprivate &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;useKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; key: K)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = _keys.index(of: key) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// key 已存在数组中，只需要将其挪至 index 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _keys.insert(_keys.remove(at: index), at: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;// key 不存在数组中，需要将其插入 index 0，并在超出缓存大小阈值时移走最后面的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _keys.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt;= countLimit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _cache.removeValue(forKey: _keys.last!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _keys.removeLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _keys.insert(key, at: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanCache&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cache.removeAll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _keys.removeAll()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;LRU 策略主要体现在维护 &lt;code&gt;_keys&lt;/code&gt; 数组的排序上。每当需要记录某个键被使用时，就调用 &lt;code&gt;useKey:&lt;/code&gt; 方法对 &lt;code&gt;_keys&lt;/code&gt; 和 &lt;code&gt;_cache&lt;/code&gt; 更新。具体策略是：如果缓存中已经有这个 key 了，那就将其移到 &lt;code&gt;_keys&lt;/code&gt; 数组最前面；如果这个 key 本不存在，那么需要查看当前缓存空间是否已经填满，如果没有剩余空间就需要删除 &lt;code&gt;_keys&lt;/code&gt; 数组最后一个元素，并连带删除对应 &lt;code&gt;_cache&lt;/code&gt; 中对应的键值对，最后将新的 key 插入到 &lt;code&gt;_keys&lt;/code&gt; 数组最前面。&lt;/p&gt;
&lt;p&gt;因为我只想在给 &lt;code&gt;LRUCache&lt;/code&gt; 作为字典赋值的时候才算作一次“使用”，所以只在 &lt;code&gt;set&lt;/code&gt; 方法中调用了 &lt;code&gt;useKey:&lt;/code&gt;。如果给 &lt;code&gt;LRUCache&lt;/code&gt; 赋空值并不算做一次“使用”。而对 &lt;code&gt;LRUCache&lt;/code&gt; 所有的取值行为都不算做“使用”，因为为了更新界面等因素，经常会从缓存中取值，这些并不是用户自身的操作。只有当用户真正打开某个 URL 时才算做一次“使用”，而此时刚好是对 &lt;code&gt;LRUCache&lt;/code&gt; 赋值。&lt;/p&gt;
&lt;p&gt;为了能够使用 &lt;code&gt;for...in&lt;/code&gt; 遍历 &lt;code&gt;LRUCache&lt;/code&gt;，需要让其实现 &lt;code&gt;SequenceType&lt;/code&gt; 协议：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Iterator&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;CacheGenerator&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;K&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeIterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Iterator&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CacheGenerator&lt;/span&gt;(keys:_keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为我们遍历的内容是“键”，所以初始化 &lt;code&gt;CacheGenerator&lt;/code&gt; 时传入 &lt;code&gt;_keys&lt;/code&gt;，并在 &lt;code&gt;CacheGenerator&lt;/code&gt; 内部维护一个计数器 &lt;code&gt;counter&lt;/code&gt;，在 &lt;code&gt;next&lt;/code&gt; 方法中以正序返回数组中的键：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CacheGenerator&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;:&lt;span class=&quot;title&quot;&gt;Hashable&lt;/span&gt;&amp;gt; : &lt;span class=&quot;title&quot;&gt;IteratorProtocol&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Element&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; counter: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array:[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(keys:[&lt;span class=&quot;type&quot;&gt;T&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counter = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        array = keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Element&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result:&lt;span class=&quot;type&quot;&gt;Element&lt;/span&gt;? = counter &amp;lt; array.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; ? array[counter] : &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        counter += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然也可以通过改变 &lt;code&gt;counter&lt;/code&gt; 的变化规则来实现逆序、乱序遍历。&lt;/p&gt;
&lt;p&gt;最后，为了能让 &lt;code&gt;LRUCache&lt;/code&gt; 通过 &lt;code&gt;NSUserDefaults&lt;/code&gt; 持久化写入本地，还需要实现 &lt;code&gt;NSCoding&lt;/code&gt; 协议：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// NSCoding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@objc&lt;/span&gt; required init?(coder aDecoder: NSCoder) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _keys = aDecoder.decodeObject(&lt;span class=&quot;string&quot;&gt;forKey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;keys&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! [K]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   _cache = aDecoder.decodeObject(&lt;span class=&quot;string&quot;&gt;forKey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;cache&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! [&lt;span class=&quot;string&quot;&gt;K:&lt;/span&gt;V]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@objc&lt;/span&gt; func encode(with &lt;span class=&quot;string&quot;&gt;aCoder:&lt;/span&gt; NSCoder) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   aCoder.encode(_keys, &lt;span class=&quot;string&quot;&gt;forKey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;keys&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   aCoder.encode(_cache, &lt;span class=&quot;string&quot;&gt;forKey:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;cache&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;登陆时启动&quot;&gt;&lt;a href=&quot;#登陆时启动&quot; class=&quot;headerlink&quot; title=&quot;登陆时启动&quot;&gt;&lt;/a&gt;登陆时启动&lt;/h2&gt;&lt;p&gt;Mac 开发开机启动有好几种方式，可以参考&lt;a href=&quot;http://www.tanhao.me/talk/1287.html/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac OSX的开机启动配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过对于 Swift 开发 Mac App，我更推荐&lt;a href=&quot;https://theswiftdev.com/2015/09/17/first-os-x-tutorial-how-to-launch-an-os-x-app-at-login/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;，其策略是将 App 添加为启动项。原理是通过 &lt;code&gt;SMLoginItemSetEnabled&lt;/code&gt; 方法在主应用的 &lt;code&gt;Contents/Library/LoginItems&lt;/code&gt; 文件夹建立一个后台辅助应用来启动主应用，如果主应用已启动后就会终止后台应用。&lt;/p&gt;
&lt;h2 id=&quot;UI&quot;&gt;&lt;a href=&quot;#UI&quot; class=&quot;headerlink&quot; title=&quot;UI&quot;&gt;&lt;/a&gt;UI&lt;/h2&gt;&lt;p&gt;为了让这个 App 皮实耐操，我决定还是不画主页面，让其附着在菜单栏吧：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/TFSHelper/master/image/screenshot.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将 plist 文件中 &lt;code&gt;Application is background only&lt;/code&gt; 设为 &lt;code&gt;YES&lt;/code&gt; 就不会让应用出现在 Dock 上了。&lt;/p&gt;
&lt;p&gt;这里添加菜单很容易没啥好说的，需要注意的逻辑是在菜单显示前先验证剪贴板链接是否符合要求，然后决定是否显示“打开链接”按钮。&lt;/p&gt;
&lt;p&gt;所有开关设置都会通过 &lt;code&gt;NSUserDefaults&lt;/code&gt; 持久化写入本地，第一次加载应用需要从本地读取，然后更新界面。&lt;/p&gt;
&lt;p&gt;“常用链接”里面的“清空列表”按钮在没有链接缓存的时候需要设为不可用。&lt;/p&gt;
&lt;h2 id=&quot;自动-VS-手动&quot;&gt;&lt;a href=&quot;#自动-VS-手动&quot; class=&quot;headerlink&quot; title=&quot;自动 VS 手动&quot;&gt;&lt;/a&gt;自动 VS 手动&lt;/h2&gt;&lt;p&gt;在设计产品时曾经纠结是应该自动打开链接还是让用户每次手动打开。每种选择都有自己的理由，但如果用户仅是想复制某个 TFS 链接发给别人，自动打开链接体验会很糟糕；如果每次都需要手动点击“打开链接”按钮，又极为不便。为了折衷，便提供了个开关。&lt;/p&gt;
&lt;p&gt;自动打开链接的原理很简单，就是用定时器循环处理剪贴板内容：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Timer&lt;/span&gt;.scheduledTimer(timeInterval: &lt;span class=&quot;number&quot;&gt;0.25&lt;/span&gt;, target: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, selector: #selector(&lt;span class=&quot;type&quot;&gt;AppDelegate&lt;/span&gt;.pollPasteboard(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;:)), userInfo: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, repeats: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pollPasteboard&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; timer: Timer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !autoCatch &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; currentChangeCount = &lt;span class=&quot;type&quot;&gt;NSPasteboard&lt;/span&gt;.general().changeCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; currentChangeCount == previousChangeCount &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   handlePasteboard()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了避免剪贴板内容不变时的重复处理，&lt;code&gt;handlePasteboard&lt;/code&gt; 函数记录了上次的 &lt;code&gt;changeCount&lt;/code&gt;，每次剪贴板被更新时它会递增，初始为 0。这样每次判断下 &lt;code&gt;changeCount&lt;/code&gt; 是否跟上次有变化即可：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func handlePasteboard() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; let result = catchTFSLocation() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        recentUseLinks[result] = URL(fileURLWithPath: result)&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.last&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        writePasteboard(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        DistributedNotificationCenter.default().post(name: Notification.Name(&lt;span class=&quot;string&quot;&gt;&quot;simulateKeys&quot;&lt;/span&gt;), &lt;span class=&quot;selector-tag&quot;&gt;object&lt;/span&gt;: Bundle&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.bundleIdentifier&lt;/span&gt;!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    previousChangeCount = NSPasteboard.general()&lt;span class=&quot;selector-class&quot;&gt;.changeCount&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;手动打开链接更简单了，直接调用 &lt;code&gt;handlePasteboard&lt;/code&gt; 即可。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;诸如 UI 上一些细节实现就不叙述了，比如在显示常用链接时我只显示了路径的最后一段文字，方便查看，否则链接过长影像体验。因为我是为 TFS 格式量身定制的，所以你也可以通过修改我源码中的匹配规则来为你自己所用。Github 链接：&lt;a href=&quot;https://github.com/yulingtianxia/TFSHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/TFSHelper&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;工作时经常会收到同事发来的一些链接，有的带空格的链接会断开，不能直接点击查看，需要手动复制完整链接并粘贴查看。所以我做了个 Mac 系统上的 URL 辅助工具，在复制 URL 时自动将其打开。还实现缓存常用链接、自动/手动连接切换、登录时启动等功能。开发语言为 Swift 3 和 AppleScript。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
      <category term="Algorithm" scheme="http://yulingtianxia.com/tags/Algorithm/"/>
    
      <category term="AppleScript" scheme="http://yulingtianxia.com/tags/AppleScript/"/>
    
  </entry>
  
  <entry>
    <title>如何自制一款寻找相似图片的 Mac 工具</title>
    <link href="http://yulingtianxia.com/blog/2016/01/17/search-for-similar-images/"/>
    <id>http://yulingtianxia.com/blog/2016/01/17/search-for-similar-images/</id>
    <published>2016-01-17T07:13:18.000Z</published>
    <updated>2017-01-23T13:55:05.000Z</updated>
    
    <content type="html">&lt;p&gt;这周花了一天半的时间做了个 Mac OS X 上的小工具，用来查找相似内容的图片。起因是公司的 iOS 项目中已有的图片管理混乱，有些图片文件名不规范，还有一些内容重复但文件名不同的图片。现在视觉要给出一些 3x 分辨率的图片，如何与已有的低分辨率图片匹配，这又是个问题。人工一个个去找固然好，但这种技术含量低的体力活很浪费精力和时间。&lt;/p&gt;
&lt;p&gt;Github 地址：&lt;a href=&quot;https://github.com/yulingtianxia/SimilarImageHunter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/SimilarImageHunter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/SimilarImageHunter/blob/master/images/01.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;最新 Release 下载：&lt;a href=&quot;https://github.com/yulingtianxia/SimilarImageHunter/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/SimilarImageHunter/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我开发的这款工具可以在目标路径中找出与原始路径中图片最为相似的图片。如果目标路径中有多张图片相似度相同且最大，这些图片都会被列出来。树形列表第一列的父节点内容为原始路径中的图片，子节点为目标路径中匹配到的最佳相似内容图片。列表第二列为相似度。双击图片路径即可打开该图片。点击 “HUNT” 按钮开始寻找相似图片，第一次使用时处理图片信息耗时较长，可在中途点击 “CANCEL” 按钮取消当前任务。“CLEAR” 按钮则可清除当前界面信息。&lt;/p&gt;
&lt;h2 id=&quot;获取图片路径&quot;&gt;&lt;a href=&quot;#获取图片路径&quot; class=&quot;headerlink&quot; title=&quot;获取图片路径&quot;&gt;&lt;/a&gt;获取图片路径&lt;/h2&gt;&lt;p&gt;因为会一点 shell，所以第一反应是一行脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight xl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;find $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;*.jpg&#39;&lt;/span&gt; -&lt;span class=&quot;built_in&quot;&gt;or&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;*.png&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来用 &lt;code&gt;NSTask&lt;/code&gt; 跑脚本太 esay 就不细说了。&lt;/p&gt;
&lt;h2 id=&quot;算法实现&quot;&gt;&lt;a href=&quot;#算法实现&quot; class=&quot;headerlink&quot; title=&quot;算法实现&quot;&gt;&lt;/a&gt;算法实现&lt;/h2&gt;&lt;h3 id=&quot;AspectRatio&quot;&gt;&lt;a href=&quot;#AspectRatio&quot; class=&quot;headerlink&quot; title=&quot;AspectRatio&quot;&gt;&lt;/a&gt;AspectRatio&lt;/h3&gt;&lt;p&gt;因为不用考虑一张图片包含另一张图片等复杂情况，此处的场景是寻找内容相同分辨率不同的图片，所以比较图片的宽高比自然是一个重要的环节。在相似度的计算上，我设定宽高比的相似度权重占到总体相似度的30%。（这个阈值以后可能还会调整）&lt;/p&gt;
&lt;h3 id=&quot;像素-RGBA-信息&quot;&gt;&lt;a href=&quot;#像素-RGBA-信息&quot; class=&quot;headerlink&quot; title=&quot;像素 RGBA 信息&quot;&gt;&lt;/a&gt;像素 RGBA 信息&lt;/h3&gt;&lt;p&gt;把不同格式的图片解压成位图，就可以得到所有像素最原始的信息。我这里使用的色彩空间是 RGBA，每个像素用 32 bit 大端模式存储。然后统计每种颜色(RGBA)的像素数量，并计算其占像素总数的比例。比较两张图片相同颜色像素比例的差异就行了。&lt;/p&gt;
&lt;h3 id=&quot;像素位置信息&quot;&gt;&lt;a href=&quot;#像素位置信息&quot; class=&quot;headerlink&quot; title=&quot;像素位置信息&quot;&gt;&lt;/a&gt;像素位置信息&lt;/h3&gt;&lt;p&gt;光有颜色信息还是不够的，因为有一些图片可能宽高比相似，大体的色彩也差不多，但是相同颜色的像素排列却不一样。所以也需要考虑到每个像素所处图片中的位置。这个位置信息也是采用比例的方式来计算，而不是像素到原点的绝对距离。&lt;strong&gt;把像素位置信息加入到比较颜色相似度的过程中，大大提升了准确度。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;构造指纹向量&quot;&gt;&lt;a href=&quot;#构造指纹向量&quot; class=&quot;headerlink&quot; title=&quot;构造指纹向量&quot;&gt;&lt;/a&gt;构造指纹向量&lt;/h3&gt;&lt;p&gt;在实际统计中会发现使用原始的 “RGBA+像素位置” 信息并不理想，因为这会使得统计结果更加分散。更致命的是在实验中我尝试调整了一张图片的尺寸后，其色彩空间也发生了很大变化。比如原图只有 100 种 RGBA 值，而处理后的图片则有 1000 种 RGBA 值！虽然肉眼上看起来两张图片内容一样，但实际上后者却有很多颜色相似的像素被分散开了，而在比较相同颜色的像素比例时，因为后者的像素数量被稀释成了多种相似的颜色，使得计算后的相似度大幅降低。&lt;/p&gt;
&lt;p&gt;所以需要将相似颜色的像素归为一类，RGBA 四个通道共 32 bit，每个通道占 8 bit，数值范围是 0~127，我将其划分为 8 个区间，这样总共只有 8^4 个组合（要知道这在简化之前可是 2^32 个组合！）：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#define&lt;/span&gt; Mask8(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) ( (&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;xFF )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;R&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) ( Mask8(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#define&lt;/span&gt; G(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) ( Mask8(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; ) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#define&lt;/span&gt; B(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) ( Mask8(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;#define&lt;/span&gt; A(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;) ( Mask8(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(UInt32)fingerprintOfColor:(UInt32)color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [self areaOfComponent:&lt;span class=&quot;keyword&quot;&gt;R&lt;/span&gt;(color)]*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;+[self areaOfComponent:G(color)]*&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;+[self areaOfComponent:B(color)]*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;+[self areaOfComponent:A(color)]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(UInt32)areaOfComponent:(UInt32)component&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; component/&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;像素的位置信息也同样需要简化，我采用 9 宫格的方案：即将图片按比例划分成九宫格，并将每个方格从 1 到 9标记。这样就直接把像素的位置比例简化为两个数字（x 和 y），只有 3^2 个组合：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(UInt32)areaOfX:(NSUInteger)x y:(NSUInteger)y width:(NSUInteger)width height:(NSUInteger)height&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UInt32 &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x&amp;lt;=width/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;+=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x&amp;lt;=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*width/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;+=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;+=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (y&amp;lt;=height/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;+=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (y&amp;lt;=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;*height/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;+=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;+=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后将两者相结合，构造一个多维向量，&lt;code&gt;pixels&lt;/code&gt; 为指向图片像素数组 RGBA 信息的 &lt;code&gt;UInt32&lt;/code&gt; 类型指针：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *,&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *&amp;gt; *pixelBucket = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; dictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UInt32&lt;/span&gt; * currentPixel = pixels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; height; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; width; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;UInt32&lt;/span&gt; color = *currentPixel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;UInt32&lt;/span&gt; fingerprint = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; fingerprintOfColor:color]*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;+[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; areaOfX:i y:j width:width height:height];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       pixelBucket[@(fingerprint)] = @(pixelBucket[@(fingerprint)].intValue+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       currentPixel++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;free(pixels);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[pixelBucket enumerateKeysAndObjectsUsingBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; * _Nonnull key, &lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; * _Nonnull obj, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   pixelBucket[key] = @(obj.doubleValue/(height * width));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pixelBucket&lt;/code&gt; 最多有 8^4*9 个键值对，也就是指纹向量最大的维度。&lt;/p&gt;
&lt;h3 id=&quot;计算向量相似性&quot;&gt;&lt;a href=&quot;#计算向量相似性&quot; class=&quot;headerlink&quot; title=&quot;计算向量相似性&quot;&gt;&lt;/a&gt;计算向量相似性&lt;/h3&gt;&lt;p&gt;这里我采用了向量的&lt;a href=&quot;https://zh.wikipedia.org/wiki/余弦相似性&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;余弦相似性&lt;/a&gt;：计算结果越接近于 1，两张图片内容越相似：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block double similarityOfPixelVector = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__block double targetRank = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__block double sourceRank = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[sourcePixelVector enumerateKeysAndObjectsUsingBlock:^(NSNumber * _Nonnull key, NSNumber * _Nonnull obj, BOOL * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   NSNumber *targetObj = targetPixelVector[key]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   if (targetObj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       similarityOfPixelVector += obj.doubleValue*targetObj.doubleValue&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sourceRank += obj.doubleValue * obj.doubleValue&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sourceRank = sqrt(sourceRank)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[targetPixelVector enumerateKeysAndObjectsUsingBlock:^(NSNumber * _Nonnull key, NSNumber * _Nonnull obj, BOOL * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   targetRank += obj.doubleValue * obj.doubleValue&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;targetRank = sqrt(targetRank)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;similarityOfPixelVector = similarityOfPixelVector/(sourceRank*targetRank)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;采用余弦相似性的主要原因是我它的结果范围是 0~1，而且向量越相似结果越接近于 1，刚好满足我的计算要求。而欧氏距离和杰卡德相似性度量都不太满足我的计算方法上的要求。余弦相似性有个缺点就是只能比较向量的角度，而不能比较距离。也就是说，两个向量角度固定后，长度若有变化，向量末端的绝对距离（也就是欧氏距离）也会变，但余弦相似性不变。但这在本例中恰巧克服了这个缺点。因为图片指纹向量所有维度的值之和为 1，也就是说向量的方向固定后，长度也就固定了。如果你还不懂，看下面这张图。将问题简化到三维空间，所有三维向量起点都是原点，终点都在绿色平面上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20160117-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后的图片相似性结合了长宽比相似性与指纹向量相似性：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;double similarityOfAspectRatio = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-fabs(&lt;span class=&quot;name&quot;&gt;sourceAspectRatio-targetAspectRatio&lt;/span&gt;)/sourceAspectRatio&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = similarityOfAspectRatio*weightOfAspectRatio + similarityOfPixelVector*(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-weightOfAspectRatio)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;code&gt;similarityOfAspectRatio&lt;/code&gt; 可能为负值，这并不是我一时疏忽，而是有意为之：我的初衷是想匹配视觉提供的不同分辨率的图片素材，如果连长宽比都差很多，那绝逼不是我要的结果。那为何我不直接加个判断，如果长宽比不一样，就直接判断不符合要求，直接 pass 呢？这里原因有二：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我曾经发现过视觉切图的像素尺寸不精确，尤其是小图。甚至还发现过本应是正方形的图，长和宽竟然不相同。所以这里需要容错，计算长宽比的相似度，即便我想要的结果理论上应该相同，而不是相似。&lt;/li&gt;
&lt;li&gt;为了给出两张图片的相似度，需要有个全面的分析，光用长宽比得不出数据。这点又与初衷违背，牺牲了效率，只为了最后给出结果装个逼。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;UI-实现&quot;&gt;&lt;a href=&quot;#UI-实现&quot; class=&quot;headerlink&quot; title=&quot;UI 实现&quot;&gt;&lt;/a&gt;UI 实现&lt;/h2&gt;&lt;p&gt;我对 Cocoa 也不熟，自然会踩一些坑的。其中主要是为了展现树形列表而踩了 &lt;code&gt;NSOutlineView&lt;/code&gt; 的坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;NSOutlineView&lt;/code&gt; 的数据来源：&lt;a href=&quot;http://stackoverflow.com/questions/6664898/nsoutlineview-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;极简教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/7533682/nstableview-only-displaying-table-view-cell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NSTableView only displaying “Table View Cell”&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;双击文件路径名自动打开图片，使用 &lt;code&gt;NSWorkspace&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;注意用内存缓存上次计算的指纹向量，这样可以大大减少下次 UI 的更新时间。&lt;/p&gt;
&lt;p&gt;毛玻璃效果、后台异步任务、Autolayout 之类的常识这些就不细说了。更多的细节还是看源码吧：&lt;a href=&quot;https://github.com/yulingtianxia/SimilarImageHunter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SimilarImageHunter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于之后的一键替换文件名等功能，虽然是刚需，但是还需等安全可靠的替换策略制定出之后才可以祭出。&lt;/p&gt;
&lt;p&gt;我现在看太阳都是绿色的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这周花了一天半的时间做了个 Mac OS X 上的小工具，用来查找相似内容的图片。起因是公司的 iOS 项目中已有的图片管理混乱，有些图片文件名不规范，还有一些内容重复但文件名不同的图片。现在视觉要给出一些 3x 分辨率的图片，如何与已有的低分辨率图片匹配，这又是个问题。人工一个个去找固然好，但这种技术含量低的体力活很浪费精力和时间。&lt;/p&gt;
&lt;p&gt;Github 地址：&lt;a href=&quot;https://github.com/yulingtianxia/SimilarImageHunter&quot;&gt;https://github.com/yulingtianxia/SimilarImageHunter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/SimilarImageHunter/blob/master/images/01.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Algorithm" scheme="http://yulingtianxia.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 引用计数原理</title>
    <link href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/"/>
    <id>http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/</id>
    <published>2015-12-06T08:32:07.000Z</published>
    <updated>2016-08-27T03:30:16.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;本文所使用的源码为 objc4-647 和 CF-1153.18&lt;/li&gt;
&lt;li&gt;实际上这是我本周实习周报的一部分，写的比较仓促，如有差错还请多多指正。&lt;/li&gt;
&lt;li&gt;不讲用法，只说原理。&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;引用计数如何存储&quot;&gt;&lt;a href=&quot;#引用计数如何存储&quot; class=&quot;headerlink&quot; title=&quot;引用计数如何存储&quot;&gt;&lt;/a&gt;引用计数如何存储&lt;/h1&gt;&lt;p&gt;有些对象如果支持使用 TaggedPointer，苹果会直接将其指针值作为引用计数返回；如果当前设备是 64 位环境并且使用 Objective-C 2.0，那么“一些”对象会使用其 &lt;code&gt;isa&lt;/code&gt; 指针的一部分空间来存储它的引用计数；否则 Runtime 会使用一张散列表来管理引用计数。&lt;/p&gt;
&lt;p&gt;其实还有一种情况会改变引用计数的存储策略，那就是是否使用垃圾回收（用&lt;code&gt;UseGC&lt;/code&gt;属性判断），但这种早已弃用的东西就不要管了，而且初始化垃圾回收机制的 &lt;code&gt;void gc_init(BOOL wantsGC)&lt;/code&gt; 方法一直被传入 &lt;code&gt;NO&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;TaggedPointer&quot;&gt;&lt;a href=&quot;#TaggedPointer&quot; class=&quot;headerlink&quot; title=&quot;TaggedPointer&quot;&gt;&lt;/a&gt;TaggedPointer&lt;/h2&gt;&lt;p&gt;判断当前对象是否在使用 TaggedPointer 是看标志位是否为 1 ：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; SUPPORT_MSB_TAGGED_POINTERS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TAG_MASK (1ULL&amp;lt;&amp;lt;63)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; TAG_MASK 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_object::isTaggedPointer() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; SUPPORT_TAGGED_POINTERS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ((uintptr_t)&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &amp;amp; TAG_MASK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; 其实就是 &lt;code&gt;objc_object *&lt;/code&gt; 的简写（&lt;code&gt;typedef struct objc_object *id;&lt;/code&gt;），它的 &lt;code&gt;isTaggedPointer()&lt;/code&gt; 方法经常会在操作引用计数时用到，因为这决定了存储引用计数的策略。&lt;/p&gt;
&lt;h2 id=&quot;isa-指针（NONPOINTER-ISA）&quot;&gt;&lt;a href=&quot;#isa-指针（NONPOINTER-ISA）&quot; class=&quot;headerlink&quot; title=&quot;isa 指针（NONPOINTER_ISA）&quot;&gt;&lt;/a&gt;isa 指针（NONPOINTER_ISA）&lt;/h2&gt;&lt;p&gt;用 64 bit 存储一个内存地址显然是种浪费，毕竟很少有那么大内存的设备。于是可以优化存储方案，用一部分额外空间存储其他内容。&lt;code&gt;isa&lt;/code&gt; 指针第一位为 1 即表示使用优化的 &lt;code&gt;isa&lt;/code&gt; 指针，这里列出不同架构下的 64 位环境中 &lt;code&gt;isa&lt;/code&gt; 指针结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;isa_t&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;isa_t&lt;/span&gt;() &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;isa_t&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; value) : bits(value) &amp;#123; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; bits;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; SUPPORT_NONPOINTER_ISA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; __arm64__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ISA_MASK        0x00000001fffffff8ULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ISA_MAGIC_MASK  0x000003fe00000001ULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ISA_MAGIC_VALUE 0x000001a400000001ULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; indexed           : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; has_assoc         : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; has_cxx_dtor      : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; shiftcls          : &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// MACH_VM_MAX_ADDRESS 0x1a0000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; magic             : &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; weakly_referenced : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; deallocating      : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; has_sidetable_rc  : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; extra_rc          : &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#       &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; RC_ONE   (1ULL&amp;lt;&amp;lt;45)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#       &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; RC_HALF  (1ULL&amp;lt;&amp;lt;18)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;elif&lt;/span&gt; __x86_64__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ISA_MASK        0x00007ffffffffff8ULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ISA_MAGIC_MASK  0x0000000000000001ULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; ISA_MAGIC_VALUE 0x0000000000000001ULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; indexed           : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; has_assoc         : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; has_cxx_dtor      : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; shiftcls          : &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// MACH_VM_MAX_ADDRESS 0x7fffffe00000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; weakly_referenced : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; deallocating      : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; has_sidetable_rc  : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; extra_rc          : &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#       &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; RC_ONE   (1ULL&amp;lt;&amp;lt;50)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#       &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; RC_HALF  (1ULL&amp;lt;&amp;lt;13)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Available bits in isa field are architecture-specific.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;error&lt;/span&gt; unknown architecture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;# &lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// SUPPORT_NONPOINTER_ISA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;SUPPORT_NONPOINTER_ISA&lt;/code&gt; 用于标记是否支持优化的 &lt;code&gt;isa&lt;/code&gt; 指针，其字面含义意思是 &lt;code&gt;isa&lt;/code&gt; 的内容不再是类的指针了，而是包含了更多信息，比如引用计数，析构状态，被其他 weak 变量引用情况。判断方法也是根据设备类型：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Define SUPPORT_NONPOINTER_ISA=1 to enable extra data in the isa field.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; !__LP64__  ||  TARGET_OS_WIN32  ||  TARGET_IPHONE_SIMULATOR  ||  __x86_64__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SUPPORT_NONPOINTER_ISA 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SUPPORT_NONPOINTER_ISA 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;综合看来目前只有 arm64 架构的设备支持，下面列出了 &lt;code&gt;isa&lt;/code&gt; 指针中变量对应的含义：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;indexed&lt;/td&gt;
&lt;td&gt;0 表示普通的 &lt;code&gt;isa&lt;/code&gt; 指针，1 表示使用优化，存储引用计数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;has_assoc&lt;/td&gt;
&lt;td&gt;表示该对象是否包含 associated object，如果没有，则析构时会更快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;has_cxx_dtor&lt;/td&gt;
&lt;td&gt;表示该对象是否有 C++ 或 ARC 的析构函数，如果没有，则析构时更快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shiftcls&lt;/td&gt;
&lt;td&gt;类的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;magic&lt;/td&gt;
&lt;td&gt;固定值为 0xd2，用于在调试时分辨对象是否未完成初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;weakly_referenced&lt;/td&gt;
&lt;td&gt;表示该对象是否有过 &lt;code&gt;weak&lt;/code&gt; 对象，如果没有，则析构时更快&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deallocating&lt;/td&gt;
&lt;td&gt;表示该对象是否正在析构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;has_sidetable_rc&lt;/td&gt;
&lt;td&gt;表示该对象的引用计数值是否过大无法存储在 &lt;code&gt;isa&lt;/code&gt; 指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extra_rc&lt;/td&gt;
&lt;td&gt;存储引用计数值减一后的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 64 位环境下，优化的 &lt;code&gt;isa&lt;/code&gt; 指针并不是就一定会存储引用计数，毕竟用 19bit （iOS 系统）保存引用计数不一定够。需要注意的是这 19 位保存的是&lt;strong&gt;引用计数的值减一&lt;/strong&gt;。&lt;code&gt;has_sidetable_rc&lt;/code&gt; 的值如果为 1，那么引用计数会存储在一个叫 &lt;code&gt;SideTable&lt;/code&gt; 的类的属性中，后面会详细讲。&lt;/p&gt;
&lt;h2 id=&quot;散列表&quot;&gt;&lt;a href=&quot;#散列表&quot; class=&quot;headerlink&quot; title=&quot;散列表&quot;&gt;&lt;/a&gt;散列表&lt;/h2&gt;&lt;p&gt;散列表来存储引用计数具体是用 &lt;code&gt;DenseMap&lt;/code&gt; 类来实现，这个类中包含好多映射实例到其引用计数的键值对，并支持用 &lt;code&gt;DenseMapIterator&lt;/code&gt; 迭代器快速查找遍历这些键值对。接着说键值对的格式：键的类型为 &lt;code&gt;DisguisedPtr&amp;lt;objc_object&amp;gt;&lt;/code&gt;，&lt;code&gt;DisguisedPtr&lt;/code&gt; 类是对 &lt;code&gt;objc_object *&lt;/code&gt; 指针及其一些操作进行的封装，目的就是为了让它给人看起来不会有内存泄露的样子（真是心机裱），其内容可以理解为对象的内存地址；值的类型为 &lt;code&gt;__darwin_size_t&lt;/code&gt;，在 darwin 内核一般等同于 &lt;code&gt;unsigned long&lt;/code&gt;。其实这里保存的值也是等于&lt;strong&gt;引用计数减一&lt;/strong&gt;。使用散列表保存引用计数的设计很好，即使出现故障导致对象的内存块损坏，只要引用计数表没有被破坏，依然可以顺藤摸瓜找到内存块的位置。&lt;/p&gt;
&lt;p&gt;之前说引用计数表是个散列表，这里简要说下散列的方法。有个专门处理键的 &lt;code&gt;DenseMapInfo&lt;/code&gt; 结构体，它针对 &lt;code&gt;DisguisedPtr&lt;/code&gt; 做了些优化匹配键值速度的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; DenseMapInfo&amp;lt;DisguisedPtr&amp;lt;T&amp;gt;&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; DisguisedPtr&amp;lt;T&amp;gt; getEmptyKey() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return DisguisedPtr&amp;lt;T&amp;gt;((T*)(&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; DisguisedPtr&amp;lt;T&amp;gt; getTombstoneKey() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return DisguisedPtr&amp;lt;T&amp;gt;((T*)(&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHashValue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; T *PtrVal)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return ptr_hash((&lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt;)PtrVal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEqual&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DisguisedPtr&amp;lt;T&amp;gt; &amp;amp;LHS, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DisguisedPtr&amp;lt;T&amp;gt; &amp;amp;RHS)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return LHS == RHS; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然这里的哈希算法会根据是否为 64 位平台来进行优化，算法具体细节就不深究了，我总觉得苹果在这里的 hardcode 是随便写的：&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if __LP64__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static inline uint32_t ptr_hash(uint64_t &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ^= &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; *= &lt;span class=&quot;number&quot;&gt;0x8a970be7488fda55&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ^= __builtin_bswap64(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (uint32_t)&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static inline uint32_t ptr_hash(uint32_t &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ^= &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; *= &lt;span class=&quot;number&quot;&gt;0x5052acdb&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ^= __builtin_bswap32(&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再介绍下 &lt;code&gt;SideTable&lt;/code&gt; 这个类，它用于管理引用计数表和 &lt;code&gt;weak&lt;/code&gt; 表，并使用 &lt;code&gt;spinlock_lock&lt;/code&gt; 自旋锁来防止操作表结构时可能的竞态条件。它用一个 64*128 大小的 &lt;code&gt;uint8_t&lt;/code&gt; 静态数组作为 buffer 来保存所有的 &lt;code&gt;SideTable&lt;/code&gt; 实例。并提供三个公有属性：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;spinlock_t&lt;/span&gt; slock;&lt;span class=&quot;comment&quot;&gt;//保证原子操作的自选锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RefcountMap refcnts;&lt;span class=&quot;comment&quot;&gt;//保存引用计数的散列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;weak_table_t&lt;/span&gt; weak_table;&lt;span class=&quot;comment&quot;&gt;//保存 weak 引用的全局散列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还提供了一个工厂方法，用于根据对象的地址在 buffer 中寻找对应的 &lt;code&gt;SideTable&lt;/code&gt; 实例：&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; SideTable *tableForPointer(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *p)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;weak&lt;/code&gt; 表的作用是在对象执行 &lt;code&gt;dealloc&lt;/code&gt; 的时候将所有指向该对象的 &lt;code&gt;weak&lt;/code&gt; 指针的值设为 &lt;code&gt;nil&lt;/code&gt;，避免悬空指针。这是 &lt;code&gt;weak&lt;/code&gt; 表的结构：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;weak_table_t&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;weak_entry_t&lt;/span&gt; *weak_entries;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt;    num_entries;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; mask;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; max_hash_displacement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;苹果使用一个全局的 &lt;code&gt;weak&lt;/code&gt; 表来保存所有的 &lt;code&gt;weak&lt;/code&gt; 引用。并将对象作为键，&lt;code&gt;weak_entry_t&lt;/code&gt; 作为值。&lt;code&gt;weak_entry_t&lt;/code&gt; 中保存了所有指向该对象的 &lt;code&gt;weak&lt;/code&gt; 指针。&lt;/p&gt;
&lt;h1 id=&quot;获取引用计数&quot;&gt;&lt;a href=&quot;#获取引用计数&quot; class=&quot;headerlink&quot; title=&quot;获取引用计数&quot;&gt;&lt;/a&gt;获取引用计数&lt;/h1&gt;&lt;p&gt;在非 ARC 环境可以使用 &lt;code&gt;retainCount&lt;/code&gt; 方法获取某个对象的引用计数，其会调用 &lt;code&gt;objc_object&lt;/code&gt; 的 &lt;code&gt;rootRetainCount()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSUInteger)retainCount &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;((id)self)&lt;/span&gt;-&amp;gt;&lt;/span&gt;rootRetainCount();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 ARC 时代除了使用 Core Foundation 库的 &lt;code&gt;CFGetRetainCount()&lt;/code&gt; 方法，也可以使用 Runtime 的 &lt;code&gt;_objc_rootRetainCount(id obj)&lt;/code&gt; 方法来获取引用计数，此时需要引入 &lt;code&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/code&gt; 头文件。这个函数也是调用 &lt;code&gt;objc_object&lt;/code&gt; 的 &lt;code&gt;rootRetainCount()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;inline uintptr_t &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;objc_object:&lt;/span&gt;:rootRetainCount()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!UseGC)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (isTaggedPointer()) return (uintptr_t)this&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sidetable_lock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isa_t &lt;span class=&quot;keyword&quot;&gt;bits &lt;/span&gt;= LoadExclusive(&amp;amp;isa.&lt;span class=&quot;keyword&quot;&gt;bits);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    if (&lt;span class=&quot;keyword&quot;&gt;bits.indexed) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uintptr_t rc = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;bits.extra_rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        if (&lt;span class=&quot;keyword&quot;&gt;bits.has_sidetable_rc) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rc += sidetable_getExtraRC_nolock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sidetable_unlock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return rc&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sidetable_unlock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return sidetable_retainCount()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;rootRetainCount()&lt;/code&gt; 方法对引用计数存储逻辑进行了判断，因为 TaggedPointer 前面已经说过了，可以直接获取引用计数；64 位环境优化的 &lt;code&gt;isa&lt;/code&gt; 指针前面也说过了，所以这里的重头戏是在 TaggedPointer 无法使用时调用的 &lt;code&gt;sidetable_retainCount()&lt;/code&gt; 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uintptr_t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_object::sidetable_retainCount()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SideTable *&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; = SideTable::tableForPointer(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size_t refcnt_result = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spinlock_lock(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;-&amp;gt;slock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RefcountMap::iterator it = &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;-&amp;gt;refcnts.find(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (it != &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;-&amp;gt;refcnts.end()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// this is valid for SIDE_TABLE_RC_PINNED too&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        refcnt_result += it-&amp;gt;second &amp;gt;&amp;gt; SIDE_TABLE_RC_SHIFT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spinlock_unlock(&amp;amp;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;-&amp;gt;slock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return refcnt_result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;sidetable_retainCount()&lt;/code&gt; 方法的逻辑就是先从 &lt;code&gt;SideTable&lt;/code&gt; 的静态方法获取当前实例对应的 &lt;code&gt;SideTable&lt;/code&gt; 对象，其 &lt;code&gt;refcnts&lt;/code&gt; 属性就是之前说的存储引用计数的散列表，这里将其类型简写为 &lt;code&gt;RefcountMap&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;symbol&quot;&gt;objc:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:DenseMap&amp;lt;DisguisedPtr&amp;lt;objc_object&amp;gt;&lt;/span&gt;,size_t,&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&amp;gt; RefcountMap;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在引用计数表中用迭代器查找当前实例对应的键值对，获取引用计数值，并在此基础上 &lt;strong&gt;+1&lt;/strong&gt; 并将结果返回。这也就是为什么之前说&lt;strong&gt;引用计数表存储的值为实际引用计数减一&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;需要注意的是为什么这里把键值对的值做了向右移位操作（&lt;code&gt;it-&amp;gt;second &amp;gt;&amp;gt; SIDE_TABLE_RC_SHIFT&lt;/code&gt;）:&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;ifdef&lt;/span&gt; __LP64__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; WORD_BITS 64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#   &lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; WORD_BITS 32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The order of these bits is important.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SIDE_TABLE_WEAKLY_REFERENCED (1UL&amp;lt;&amp;lt;0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SIDE_TABLE_DEALLOCATING      (1UL&amp;lt;&amp;lt;1)  &lt;span class=&quot;comment&quot;&gt;// MSB-ward of weak bit&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SIDE_TABLE_RC_ONE            (1UL&amp;lt;&amp;lt;2)  &lt;span class=&quot;comment&quot;&gt;// MSB-ward of deallocating bit&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SIDE_TABLE_RC_PINNED         (1UL&amp;lt;&amp;lt;(WORD_BITS-1))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SIDE_TABLE_RC_SHIFT 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SIDE_TABLE_FLAG_MASK (SIDE_TABLE_RC_ONE-1)RefcountMap&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出值的第一个 bit 表示该对象是否有过 &lt;code&gt;weak&lt;/code&gt; 对象，如果没有，在析构释放内存时可以更快；第二个 bit 表示该对象是否正在析构。从第三个 bit 开始才是存储引用计数数值的地方。所以这里要做向右移两位的操作，而对引用计数的 +1 和 -1 可以使用 &lt;code&gt;SIDE_TABLE_RC_ONE&lt;/code&gt;,还可以用 &lt;code&gt;SIDE_TABLE_RC_PINNED&lt;/code&gt; 来判断是否引用计数值有可能溢出。&lt;/p&gt;
&lt;p&gt;当然不能够完全信任这个 &lt;code&gt;_objc_rootRetainCount(id obj)&lt;/code&gt; 函数，对于已释放的对象以及不正确的对象地址，有时也返回 “1”。它所返回的引用计数只是某个给定时间点上的值，该方法并未考虑到系统稍后会把自动释放吃池清空，因而不会将后续的释放操作从返回值里减去。clang 会尽可能把 &lt;code&gt;NSString&lt;/code&gt; 实现成单例对象，其引用计数会很大。如果使用了 TaggedPointer，&lt;code&gt;NSNumber&lt;/code&gt; 的内容&lt;strong&gt;有可能&lt;/strong&gt;就不再放到堆中，而是直接写在宽敞的64位栈指针值里。其看上去和真正的 &lt;code&gt;NSNumber&lt;/code&gt; 对象一样，只是使用 TaggedPointer 优化了下，但其引用计数可能不准确。&lt;/p&gt;
&lt;h1 id=&quot;修改引用计数&quot;&gt;&lt;a href=&quot;#修改引用计数&quot; class=&quot;headerlink&quot; title=&quot;修改引用计数&quot;&gt;&lt;/a&gt;修改引用计数&lt;/h1&gt;&lt;h2 id=&quot;retain-和-release&quot;&gt;&lt;a href=&quot;#retain-和-release&quot; class=&quot;headerlink&quot; title=&quot;retain 和 release&quot;&gt;&lt;/a&gt;retain 和 release&lt;/h2&gt;&lt;p&gt;在非 ARC 环境下可以使用 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;release&lt;/code&gt; 方法对引用计数进行加一减一操作，它们分别调用了 &lt;code&gt;_objc_rootRetain(id obj)&lt;/code&gt; 和 &lt;code&gt;_objc_rootRelease(id obj)&lt;/code&gt; 函数，不过后两者在 ARC 环境下也可使用。最后这两个函数又会调用 &lt;code&gt;objc_object&lt;/code&gt; 的下面两个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; id &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_object::rootRetain()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!UseGC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isTaggedPointer()) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (id)&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sidetable_retain();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; bool &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_object::rootRelease()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!UseGC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (isTaggedPointer()) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sidetable_release(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样的实现跟获取引用计数类似，先是看是否支持 TaggedPointer（毕竟数据存在栈指针而不是堆中，栈的管理本来就是自动的），否则去操作 &lt;code&gt;SideTable&lt;/code&gt; 中的 &lt;code&gt;refcnts&lt;/code&gt; 属性，这与获取引用计数策略类似。&lt;code&gt;sidetable_retain()&lt;/code&gt; 将 引用计数加一后返回对象，&lt;code&gt;sidetable_release()&lt;/code&gt; 返回是否要执行 &lt;code&gt;dealloc&lt;/code&gt; 方法：&lt;/p&gt;
&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_object::sidetable_release(&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; performDealloc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#if SUPPORT_NONPOINTER_ISA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!isa.indexed);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SideTable *table = SideTable::tableForPointer(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; do_dealloc = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (spinlock_trylock(&amp;amp;table-&amp;gt;slock)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        RefcountMap::iterator it = table-&amp;gt;refcnts.find(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (it == table-&amp;gt;refcnts.end()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            do_dealloc = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            table-&amp;gt;refcnts[this] = SIDE_TABLE_DEALLOCATING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (it-&amp;gt;second &amp;lt; SIDE_TABLE_DEALLOCATING) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// SIDE_TABLE_WEAKLY_REFERENCED may be set. Don&#39;t change it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            do_dealloc = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            it-&amp;gt;second |= SIDE_TABLE_DEALLOCATING;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (! (it-&amp;gt;second &amp;amp; SIDE_TABLE_RC_PINNED)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            it-&amp;gt;second -= SIDE_TABLE_RC_ONE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        spinlock_unlock(&amp;amp;table-&amp;gt;slock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (do_dealloc  &amp;amp;&amp;amp;  performDealloc) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ((void(*)(objc_object *, SEL))objc_msgSend)(this, SEL_dealloc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; do_dealloc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sidetable_release_slow(table, performDealloc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看到这里知道为什么在存储引用计数时&lt;strong&gt;总是真正的引用计数值减一&lt;/strong&gt;了吧。因为 release 本来是要将引用计数减一，所以存储引用计数时先预留了个“一”，在减一之前先看看存储的引用计数值是否为 0 （&lt;code&gt;it-&amp;gt;second &amp;lt; SIDE_TABLE_DEALLOCATING&lt;/code&gt;），如果是，那就将对象标记为“正在析构”（&lt;code&gt;it-&amp;gt;second |= SIDE_TABLE_DEALLOCATING&lt;/code&gt;）,并发送 &lt;code&gt;dealloc&lt;/code&gt; 消息，返回 &lt;code&gt;YES&lt;/code&gt;；否则就将引用计数减一（&lt;code&gt;it-&amp;gt;second -= SIDE_TABLE_RC_ONE&lt;/code&gt;）。这样做避免了负数的产生。&lt;/p&gt;
&lt;p&gt;除此之外，Core Foundation 库中也提供了增减引用计数的方法。比如在使用 Toll-Free Bridge 转换时使用的 &lt;code&gt;CFBridgingRetain&lt;/code&gt; 和 &lt;code&gt;CFBridgingRelease&lt;/code&gt; 方法，其本质是使用 &lt;code&gt;__bridge_retained&lt;/code&gt; 和 &lt;code&gt;__bridge_transfer&lt;/code&gt; 告诉编译器此处需要如何修改引用计数：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NS_INLINE&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CF_RETURNS_RETAINED&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CFTypeRef&lt;/span&gt; __nullable &lt;span class=&quot;built_in&quot;&gt;CFBridgingRetain&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; __nullable X) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (__bridge_retained &lt;span class=&quot;built_in&quot;&gt;CFTypeRef&lt;/span&gt;)X;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NS_INLINE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; __nullable &lt;span class=&quot;built_in&quot;&gt;CFBridgingRelease&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;CFTypeRef&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CF_CONSUMED&lt;/span&gt; __nullable X) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (__bridge_transfer &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)X;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外 Objective-C 很多实现是靠 Core Foundation Runtime 来实现， Objective-C Runtime 源码中有些地方明确注明：”&lt;code&gt;// Replaced by CF&lt;/code&gt;“，那就是意思说这块任务被 Core Foundation 库接管了。当然 Core Foundation 有一部分是开源的。还有一些 Objective-C Runtime 函数的实现被诸如 &lt;code&gt;ObjectAlloc&lt;/code&gt; 和 &lt;code&gt;NSZombie&lt;/code&gt; 这样的内存管理工具所替代：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Replaced by ObjectAlloc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)allocWithZone:(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; _&lt;span class=&quot;built_in&quot;&gt;NSZone&lt;/span&gt; *)zone &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _objc_rootAllocWithZone(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, (malloc_zone_t *)zone);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Replaced by CF (throws an NSException)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Replaced by NSZombies&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_rootDealloc(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;alloc-new-copy-mutableCopy&quot;&gt;&lt;a href=&quot;#alloc-new-copy-mutableCopy&quot; class=&quot;headerlink&quot; title=&quot;alloc, new, copy, mutableCopy&quot;&gt;&lt;/a&gt;alloc, new, copy, mutableCopy&lt;/h2&gt;&lt;p&gt;根据编译器的约定，这以这四个单词开头的方法都会使引用计数加一。而 &lt;code&gt;new&lt;/code&gt; 相当于调用 &lt;code&gt;alloc&lt;/code&gt; 后再调用 &lt;code&gt;init&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_objc_rootAlloc(Class cls)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; callAlloc(cls, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*checkNil*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*allocWithZone*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)alloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _objc_rootAlloc(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)new &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [callAlloc(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*checkNil*/&lt;/span&gt;) init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出 &lt;code&gt;alloc&lt;/code&gt; 和 &lt;code&gt;new&lt;/code&gt; 最终都会调用 &lt;code&gt;callAlloc&lt;/code&gt;，默认使用 Objective-C 2.0 且忽视垃圾回收和 NSZone，那么后续的调用顺序依次是为：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;class_createInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_class_createInstanceFromZone()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;calloc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;calloc()&lt;/code&gt; 函数相比于 &lt;code&gt;malloc()&lt;/code&gt; 函数的优点是它将分配的内存区域初始化为0，相当于 &lt;code&gt;malloc()&lt;/code&gt; 后再用 &lt;code&gt;memset()&lt;/code&gt; 方法初始化一遍。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;copy&lt;/code&gt; 和 &lt;code&gt;mutableCopy&lt;/code&gt; 都是基于 &lt;code&gt;NSCopying&lt;/code&gt; 和 &lt;code&gt;NSMutableCopying&lt;/code&gt; 方法约定，分别调用各类自己实现的 &lt;code&gt;copyWithZone:&lt;/code&gt; 和 &lt;code&gt;mutableCopyWithZone:&lt;/code&gt; 方法。这些方法无论实现方式是深拷贝还是浅拷贝，都会增加引用计数。（有些类的策略是懒拷贝，只增加引用计数但并不真的拷贝，等对象内容发生变化时再拷贝一份出来，比如 &lt;code&gt;NSArray&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;retain&lt;/code&gt; 方法加符号断点会发现 &lt;code&gt;alloc&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, &lt;code&gt;mutableCopy&lt;/code&gt; 这四个方法都会通过 Core Foundation 的 &lt;code&gt;CFBasicHashAddValue()&lt;/code&gt; 函数来调用 &lt;code&gt;retain&lt;/code&gt; 方法。其实 CF 有个修改和查看引用计数的入口函数 &lt;code&gt;__CFDoExternRefOperation&lt;/code&gt;，在 &lt;code&gt;CFRuntime.c&lt;/code&gt; 文件中实现。&lt;/p&gt;
&lt;h2 id=&quot;autorelease&quot;&gt;&lt;a href=&quot;#autorelease&quot; class=&quot;headerlink&quot; title=&quot;autorelease&quot;&gt;&lt;/a&gt;autorelease&lt;/h2&gt;&lt;p&gt;本想贴上一堆 Runtime 中关于自动释放池的源码然后说上一大堆，然后发现了太阳神的这篇&lt;a href=&quot;http://blog.sunnyxx.com/2014/10/15/behind-autorelease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑幕背后的Autorelease&lt;/a&gt;把我想说的都说了，把我不知道的也说了，简直太屌了。&lt;/p&gt;
&lt;p&gt;其实通过看源码可以知道好多细节，没事点进去各种宏定义往往会得到惊喜：哇，原来是这么回事，XX 就是 XX 之类。。。&lt;/p&gt;
&lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.sealiesoftware.com/blog/archive/2013/09/24/objc_explain_Non-pointer_isa.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.opensource.apple.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.opensource.apple.com&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本文所使用的源码为 objc4-647 和 CF-1153.18&lt;/li&gt;
&lt;li&gt;实际上这是我本周实习周报的一部分，写的比较仓促，如有差错还请多多指正。&lt;/li&gt;
&lt;li&gt;不讲用法，只说原理。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
      <category term="Reference Counting" scheme="http://yulingtianxia.com/tags/Reference-Counting/"/>
    
  </entry>
  
  <entry>
    <title>腾讯实习第一个月工作总结</title>
    <link href="http://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/"/>
    <id>http://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/</id>
    <published>2015-11-13T15:55:38.000Z</published>
    <updated>2016-05-11T14:31:51.000Z</updated>
    
    <content type="html">&lt;p&gt;来腾讯实习正好一个月了，因为项目已经进入了成熟期，接了两个需求，改了二十几个 bug。所以把这期间的一些思考写下来，发了邮件分享给组内同事们。我把一些自己觉得不合适的内容刨除出去，选取邮件的部分内容写在这里：）&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;让-UIAlertController-兼容-iOS7&quot;&gt;&lt;a href=&quot;#让-UIAlertController-兼容-iOS7&quot; class=&quot;headerlink&quot; title=&quot;让 UIAlertController 兼容 iOS7&quot;&gt;&lt;/a&gt;让 UIAlertController 兼容 iOS7&lt;/h1&gt;&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;公司项目中用到了 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/09/29/uialertcontroller-in-ios8/&quot;&gt;&lt;code&gt;UIAlertController&lt;/code&gt;&lt;/a&gt; 来实现自定义 actionsheet 文字颜色的需求，而 &lt;code&gt;UIAlertController&lt;/code&gt; &lt;strong&gt;只能在 iOS8 及更高版本系统使用，在iOS7下会 crash&lt;/strong&gt;。老大让我写个组件兼容下 iOS7，于是 &lt;code&gt;TBAlertController&lt;/code&gt; 诞生了。&lt;/p&gt;
&lt;p&gt;下面给出的关于 &lt;code&gt;TBAlertController&lt;/code&gt; 的代码片段都不是真实源码，只为说明实现的具体思想。&lt;/p&gt;
&lt;h2 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h2&gt;&lt;p&gt;为了多快好省的解决当前的问题，我依然使用系统自带的 &lt;code&gt;UIAlertController&lt;/code&gt; 和 &lt;code&gt;UIActionSheet&lt;/code&gt; 分别兼容 iOS8、9 和 iOS7。并且接口与代码中已经存在的 &lt;code&gt;UIAlertController&lt;/code&gt; 接口一致，这样只需要将代码中所有的 “UIAlertController” 和 “UIAlertAction” 改为 “TBAlertController” 和 “TBAlertAction” 即可。这样&lt;strong&gt;更符合设计模式中“对扩展开放，对修改关闭”的开放原则。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然最长远的打算应该是自己写个 AlertController，可以随意定制想要的 style，而不受系统控件的风格限制。&lt;/p&gt;
&lt;h2 id=&quot;技术重点&quot;&gt;&lt;a href=&quot;#技术重点&quot; class=&quot;headerlink&quot; title=&quot;技术重点&quot;&gt;&lt;/a&gt;技术重点&lt;/h2&gt;&lt;p&gt;&lt;code&gt;UIAlertController&lt;/code&gt; 与 &lt;code&gt;UIActionSheet&lt;/code&gt; 接口上最大的不同之处就是处理按钮点击事件时前者在 block 中实现，后者以 delegate 回调的形式实现。而且还需要高度模仿 &lt;code&gt;UIAlertController&lt;/code&gt; 的接口，使原有代码修改量达到最少。而我若想实现一个组件兼容二者，那就必须将它们“装箱”封装。同理，&lt;code&gt;UIAlertAction&lt;/code&gt; 也需要类似的处理。&lt;/p&gt;
&lt;h2 id=&quot;解决思路&quot;&gt;&lt;a href=&quot;#解决思路&quot; class=&quot;headerlink&quot; title=&quot;解决思路&quot;&gt;&lt;/a&gt;解决思路&lt;/h2&gt;&lt;h3 id=&quot;构建-TBAlertAction-替代-UIAlertAction&quot;&gt;&lt;a href=&quot;#构建-TBAlertAction-替代-UIAlertAction&quot; class=&quot;headerlink&quot; title=&quot;构建 TBAlertAction 替代 UIAlertAction&quot;&gt;&lt;/a&gt;构建 TBAlertAction 替代 UIAlertAction&lt;/h3&gt;&lt;p&gt;首先，参照 &lt;code&gt;UIAlertAction&lt;/code&gt; 的接口，造一个 &lt;code&gt;TBAlertAction&lt;/code&gt; 出来。思想是 iOS8以上直接使用 &lt;code&gt;UIAlertAction&lt;/code&gt; 来替代，iOS7 则特殊处理，将重要信息保存下来：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TBAlertAction&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (nullable, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) TBAlertActionStyle style;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; enabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (nullable,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^handler)(TBAlertAction *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TBAlertAction&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)actionWithTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)title style:(TBAlertActionStyle)style handler:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^)(TBAlertAction *))handler &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIAlertActionStyle&lt;/span&gt; actionStyle = (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)style;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; actionWithTitle:title style:actionStyle handler:(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^ __nullable)(&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; *))handler];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TBAlertAction *action = [[TBAlertAction alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        action.title = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        action.style = style;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        action.handler = handler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        action.enabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; action;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;code&gt;handler&lt;/code&gt; block 很重要，在 iOS7 中使用 &lt;code&gt;UIActionSheet&lt;/code&gt; 时是在 delegate 回调方法中处理按钮点击事件的，而处理的事务逻辑此时已经写在 &lt;code&gt;handler&lt;/code&gt; 中了，后续只需在 delegate 回调方法中正确的执行对应的 block 就行了。&lt;/p&gt;
&lt;h3 id=&quot;构建-TBAlertController-属性&quot;&gt;&lt;a href=&quot;#构建-TBAlertController-属性&quot; class=&quot;headerlink&quot; title=&quot;构建 TBAlertController 属性&quot;&gt;&lt;/a&gt;构建 TBAlertController 属性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;TBAlertController&lt;/code&gt; 也是采取装箱策略，模仿 &lt;code&gt;UIAlertController&lt;/code&gt; 的接口，并添加了一个 &lt;code&gt;adaptiveAlert&lt;/code&gt; 替身和 &lt;code&gt;actions&lt;/code&gt; 数组。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/TBAlertController.png&quot; alt=&quot;TBAlertController 属性&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _adaptiveAlert = [[&lt;span class=&quot;built_in&quot;&gt;UIAlertController&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _adaptiveAlert = [[&lt;span class=&quot;built_in&quot;&gt;UIActionSheet&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _actions = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ((&lt;span class=&quot;built_in&quot;&gt;UIActionSheet&lt;/span&gt; *)_adaptiveAlert).delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; forKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;view.tintColor&quot;&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;NSKeyValueObservingOptionNew&lt;/span&gt;|&lt;span class=&quot;built_in&quot;&gt;NSKeyValueObservingOptionOld&lt;/span&gt; context:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)dealloc &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; removeObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; forKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;view.tintColor&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)alertControllerWithTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)title message:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)message preferredStyle:(TBAlertControllerStyle)preferredStyle &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBAlertController *controller = [[TBAlertController alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        controller.adaptiveAlert = [&lt;span class=&quot;built_in&quot;&gt;UIAlertController&lt;/span&gt; alertControllerWithTitle:title message:message preferredStyle:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)preferredStyle];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (preferredStyle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TBAlertControllerStyleActionSheet: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                controller.adaptiveAlert = [[&lt;span class=&quot;built_in&quot;&gt;UIActionSheet&lt;/span&gt; alloc] initWithTitle:title delegate:controller cancelButtonTitle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; destructiveButtonTitle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; otherButtonTitles:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TBAlertControllerStyleAlert: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                controller.adaptiveAlert = [[&lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; alloc] initWithTitle:title message:message delegate:controller cancelButtonTitle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; otherButtonTitles: &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; controller;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段实例化 &lt;code&gt;TBAlertController&lt;/code&gt; 的方法很好理解，总之就是针对不同情况将 &lt;code&gt;adaptiveAlert&lt;/code&gt; 赋予不同的实例。还顺带用 KVO 监听了下 tintColor，这是为了实现当初使用 &lt;code&gt;UIAlertController&lt;/code&gt; 的目的-改变字体颜色。&lt;/p&gt;
&lt;h3 id=&quot;构建-TBAlertController-方法&quot;&gt;&lt;a href=&quot;#构建-TBAlertController-方法&quot; class=&quot;headerlink&quot; title=&quot;构建 TBAlertController 方法&quot;&gt;&lt;/a&gt;构建 TBAlertController 方法&lt;/h3&gt;&lt;p&gt;&lt;code&gt;addAction:&lt;/code&gt; 方法的实现类似，也是针对不同情况向 &lt;code&gt;actions&lt;/code&gt; 数组添加不同内容：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addAction:(TBAlertAction *)action &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (iOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adaptiveAlert addAction:(&lt;span class=&quot;built_in&quot;&gt;UIAlertAction&lt;/span&gt; *)action];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actions addObject:action];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; buttonIndex = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adaptiveAlert addButtonWithTitle:action.title];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *textColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (action.style) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TBAlertActionStyleDefault: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textColor = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tintColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TBAlertActionStyleCancel: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adaptiveAlert setCancelButtonIndex:buttonIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textColor = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tintColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; TBAlertActionStyleDestructive: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.adaptiveAlert setDestructiveButtonIndex:buttonIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; redColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                textColor = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tintColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        [((UIButton *)((UIView *)self.adaptiveAlert).subviews.lastObject) setTitleColor:textColor forState:0xFFFFFFFF];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要注意的是针对不同 style 的按钮要设置好对应的 &lt;code&gt;buttonindex&lt;/code&gt; 和 &lt;code&gt;titleColor&lt;/code&gt;。因为苹果可能会拒绝修改系统控件样式的 app 上架，所以我将那行设置颜色的代码注释掉了。&lt;/p&gt;
&lt;p&gt;然后在 delegate 中取到对应的 block 并执行：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma - UIAlertViewDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)alertView:(&lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; *)alertView clickedButtonAtIndex:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)buttonIndex &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)weakSelf = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actions[buttonIndex].handler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actions[buttonIndex].handler(weakSelf.adaptiveAlert);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;hook-presentViewController-方法&quot;&gt;&lt;a href=&quot;#hook-presentViewController-方法&quot; class=&quot;headerlink&quot; title=&quot;hook presentViewController: 方法&quot;&gt;&lt;/a&gt;hook presentViewController: 方法&lt;/h3&gt;&lt;p&gt;最后封装下 &lt;code&gt;presentViewController:&lt;/code&gt; 就可以了，因为要做到接口与 &lt;code&gt;UIAlertController&lt;/code&gt; 一模一样，减少已有代码修改量，需要 hook 到系统的 &lt;code&gt;presentViewController:&lt;/code&gt; 方法，并折腾一番：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (void)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static &lt;span class=&quot;keyword&quot;&gt;dispatch_once_t &lt;/span&gt;onceToken&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dispatch_once(&amp;amp;onceToken, &lt;/span&gt;^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class aClass = [self class]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SEL &lt;span class=&quot;keyword&quot;&gt;originalSelector &lt;/span&gt;= @selector(presentViewController:animated:completion:)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SEL &lt;span class=&quot;keyword&quot;&gt;swizzledSelector &lt;/span&gt;= @selector(tb_presentViewController:animated:completion:)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method &lt;span class=&quot;keyword&quot;&gt;originalMethod &lt;/span&gt;= class_getInstanceMethod(aClass, &lt;span class=&quot;keyword&quot;&gt;originalSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        Method &lt;span class=&quot;keyword&quot;&gt;swizzledMethod &lt;/span&gt;= class_getInstanceMethod(aClass, &lt;span class=&quot;keyword&quot;&gt;swizzledSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;didAddMethod &lt;/span&gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        class_addMethod(aClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;originalSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                        method_getImplementation(&lt;span class=&quot;keyword&quot;&gt;swizzledMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                        method_getTypeEncoding(&lt;span class=&quot;keyword&quot;&gt;swizzledMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;keyword&quot;&gt;didAddMethod) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            class_replaceMethod(aClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;swizzledSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                                method_getImplementation(&lt;span class=&quot;keyword&quot;&gt;originalMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                                method_getTypeEncoding(&lt;span class=&quot;keyword&quot;&gt;originalMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method_exchangeImplementations(&lt;span class=&quot;keyword&quot;&gt;originalMethod, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#pragma mark - Method Swizzling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)tb_presentViewController:(UIViewController *)viewControllerToPresent animated:(&lt;span class=&quot;keyword&quot;&gt;BOOL)flag &lt;/span&gt;completion:(void (^)(void))completion &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if ([viewControllerToPresent isKindOfClass:[TBAlertController class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TBAlertController* controller = (TBAlertController *)viewControllerToPresent&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (iOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ((UIAlertController *)controller.adaptiveAlert).view.tintColor = controller.tintColor&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [self tb_presentViewController:((TBAlertController *)viewControllerToPresent).adaptiveAlert animated:flag completion:completion]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ([controller.adaptiveAlert isKindOfClass:[UIAlertView class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.tbAlertController = controller&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                controller.ownerController = self&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [controller.adaptiveAlert &lt;span class=&quot;keyword&quot;&gt;show];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else if ([controller.adaptiveAlert isKindOfClass:[UIActionSheet class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                self.tbAlertController = controller&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                controller.ownerController = self&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [controller.adaptiveAlert &lt;span class=&quot;keyword&quot;&gt;showInView:self.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [self tb_presentViewController:viewControllerToPresent animated:flag completion:completion]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Objective-C 中，hook 被称为一种叫做“Method Swizzling”的技术，每种动态语言的 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Runtime&lt;/a&gt; 系统都支持这些特性。在这里，我在 hook 到的方法里先实例化一个 &lt;code&gt;TBAlertController&lt;/code&gt;，然后判断系统版本，分别将 &lt;code&gt;UIAlertController&lt;/code&gt; 或 &lt;code&gt;UIAlertView&lt;/code&gt;、&lt;code&gt;UIActionSheet&lt;/code&gt;展示出来。&lt;/p&gt;
&lt;h3 id=&quot;还需要注意的地方&quot;&gt;&lt;a href=&quot;#还需要注意的地方&quot; class=&quot;headerlink&quot; title=&quot;还需要注意的地方&quot;&gt;&lt;/a&gt;还需要注意的地方&lt;/h3&gt;&lt;p&gt;这里需要注意两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;UIAlertController&lt;/code&gt; 时，必需在添加完所有 Action 之后才能设定它的 &lt;code&gt;view.tintColor&lt;/code&gt; 属性，否则会在 iOS8 下出现问题：取消按钮与其他按钮连成一片。而在 iOS9 下面则不会出现此问题。这也是为什么我会在 hook 到 &lt;code&gt;presentViewController:&lt;/code&gt; 时才设定它的  &lt;code&gt;tintColor&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;一旦 &lt;code&gt;adaptiveAlert&lt;/code&gt; 替身被展现在屏幕上， &lt;code&gt;TBAlertController&lt;/code&gt; 这个箱子就可能会被释放掉。因为很可能其他人创建 &lt;code&gt;TBAlertController&lt;/code&gt; 实例的时候只是个局部变量，一旦出了作用域，它就会被释放掉，而一旦它被提前释放，delegate 回调方法就永远不会执行，前面的努力都白费了，正如下面这样：&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TBAlertController *operationAlertController = [TBAlertController &lt;span class=&quot;string&quot;&gt;alertControllerWithTitle:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;是否取消关注&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;nil &lt;span class=&quot;string&quot;&gt;preferredStyle:&lt;/span&gt;TBAlertControllerStyleActionSheet];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[operationAlertController &lt;span class=&quot;string&quot;&gt;addAction:&lt;/span&gt;[TBAlertAction &lt;span class=&quot;string&quot;&gt;actionWithTitle:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;是&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;style:&lt;/span&gt;TBAlertActionStyleDestructive &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;^(TBAlertAction * _Nonnull action) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [self &lt;span class=&quot;string&quot;&gt;alertControllerHandler:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;clickedButtonAtIndex:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [operationAlertController &lt;span class=&quot;string&quot;&gt;addAction:&lt;/span&gt;[TBAlertAction &lt;span class=&quot;string&quot;&gt;actionWithTitle:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;否&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;style:&lt;/span&gt;TBAlertActionStyleCancel &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;nil]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   operationAlertController.view.tintColor = [UIColor blackColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   [[[TBRootViewController sharedInstance] getCurrentNavigationController] &lt;span class=&quot;string&quot;&gt;presentViewController:&lt;/span&gt;operationAlertController &lt;span class=&quot;string&quot;&gt;animated:&lt;/span&gt;YES &lt;span class=&quot;string&quot;&gt;completion:&lt;/span&gt;nil];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我总不能强制要求所有使用 &lt;code&gt;TBAlertController&lt;/code&gt; 的人都要用一个属性来强引用它吧?所以我为 &lt;code&gt;UIViewController&lt;/code&gt; 添加了一个类别，目的是为其增加一个属性 &lt;code&gt;tbAlertController&lt;/code&gt;（因为 OC 的类别无法为添加的属性自动生成 getter 和 setter，需要使用关联对象动态添加），利用它来保持对“箱子” &lt;code&gt;TBAlertController&lt;/code&gt; 的强引用，防止其内存被过早释放。并在 hook 时的 &lt;code&gt;tb_presentViewController:&lt;/code&gt; 方法中添加这样一行：&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self.tbAlertController &lt;/span&gt;= controller&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时又涉及到了另一个问题：内存泄露。因为我们无法确定其他人在实例化 &lt;code&gt;TBAlertAction&lt;/code&gt; 时传入的 block 中做了什么，因为它很有可能捕获到了 &lt;code&gt;self&lt;/code&gt;！而此时 &lt;code&gt;self&lt;/code&gt; 很可能强引用了一个 &lt;code&gt;UIViewController&lt;/code&gt;，然后其 &lt;code&gt;tbAlertController&lt;/code&gt; 属性又强引用了 &lt;code&gt;TBAlertController&lt;/code&gt;，这个 &lt;code&gt;TBAlertController&lt;/code&gt; 的 &lt;code&gt;actions&lt;/code&gt; 数组中的一个 &lt;code&gt;TBAlertAction&lt;/code&gt; 强引用了这个 block。好长的一个保留环啊！那么如何打破这个环呢？我总不能要求使用者必需在 block 内外做个 &lt;a href=&quot;http://ashfurrow.com/blog/weakstrong-dance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weak/Strong Dance&lt;/a&gt; 吧！毕竟“谁创建，谁释放”的规则我们还是要遵守的，必需在组件内部解决可能发生的内存泄露问题。于是我给 &lt;code&gt;TBAlertController&lt;/code&gt; 又添加了一个属性 &lt;code&gt;ownerController&lt;/code&gt;，注意内存管理语义是 &lt;code&gt;weak&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (nullable,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *ownerController;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后在 &lt;code&gt;tb_presentViewController:&lt;/code&gt; 方法中再添加一行代码，将 &lt;code&gt;TBAlertController&lt;/code&gt; 的 &lt;code&gt;ownerController&lt;/code&gt; 设为调用 &lt;code&gt;presentViewController:&lt;/code&gt; 方法的 controller：&lt;br&gt;&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;controller.ownerController = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后在 &lt;code&gt;UIAlertView&lt;/code&gt; 或 &lt;code&gt;UIActionSheet&lt;/code&gt; 消失时将 &lt;code&gt;tbAlertController&lt;/code&gt; 设为 &lt;code&gt;nil&lt;/code&gt; 就打破保留环了，它原本指向 &lt;code&gt;TBAlertController&lt;/code&gt; 自己，设为 &lt;code&gt;nil&lt;/code&gt; 后，没有对象引用 &lt;code&gt;TBAlertController&lt;/code&gt; 实例了，其引用计数为零，然后被释放：&lt;br&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)actionSheet:(&lt;span class=&quot;built_in&quot;&gt;UIActionSheet&lt;/span&gt; *)actionSheet didDismissWithButtonIndex:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)buttonIndex &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.ownerController.tbAlertController = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;除此之外还有很多细节没有在这里阐述，比如对属性的封装，还有对 &lt;code&gt;addTextFieldWithConfigurationHandler:&lt;/code&gt; 等接口的封装等。&lt;/p&gt;
&lt;p&gt;其实早已有人做过类似的事情，将系统组件封装成兼容的版本：&lt;a href=&quot;https://github.com/steipete/PSTAlertController&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PSTAlertController&lt;/a&gt;。但其接口与原生的 &lt;code&gt;UIAlertController&lt;/code&gt; 差很多，需要手动替换很多已有的代码。&lt;/p&gt;
&lt;h2 id=&quot;感悟-amp-总结&quot;&gt;&lt;a href=&quot;#感悟-amp-总结&quot; class=&quot;headerlink&quot; title=&quot;感悟&amp;amp;总结&quot;&gt;&lt;/a&gt;感悟&amp;amp;总结&lt;/h2&gt;&lt;p&gt;在这里还想说下关于 block 中的 &lt;a href=&quot;http://ashfurrow.com/blog/weakstrong-dance/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Weak/Strong Dance&lt;/a&gt; 的问题。我看到项目中好多带有 block 的代码都使用一些宏定义，比如 &lt;a href=&quot;http://blog.aceontech.com/post/111694918560/weakifyself-a-more-elegant-solution-to&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@weakify(self): A more elegant solution to weakSelf in Objective-C&lt;/a&gt;，而个别 block 其实是不需要使用 weakSelf 的，这些 block 的拥有者并没被 &lt;code&gt;self&lt;/code&gt; 在其生存周期始终强引用着，所以没必要用 weakSelf。反而在少数极端情况下（例如异步延时执行 block）因为捕获的是 weakSelf，而在 block 执行前 self 已经是 &lt;code&gt;nil&lt;/code&gt;。此时不要指望 block 中的 strongSelf 会帮到什么忙，因为它力所能及的只是在 block 执行过程中保证对 weakSelf 的强引用。如若 weakSelf 不再指向 &lt;code&gt;self&lt;/code&gt; 而是 &lt;code&gt;nil&lt;/code&gt;，block 中的内容肯定不会正常执行（这不代表一定会 crash，向 &lt;code&gt;nil&lt;/code&gt; 发送消息会执行默认的行为）。&lt;/p&gt;
&lt;h1 id=&quot;LLDB-调试-UI-的技巧&quot;&gt;&lt;a href=&quot;#LLDB-调试-UI-的技巧&quot; class=&quot;headerlink&quot; title=&quot;LLDB 调试 UI 的技巧&quot;&gt;&lt;/a&gt;LLDB 调试 UI 的技巧&lt;/h1&gt;&lt;h2 id=&quot;问题背景-1&quot;&gt;&lt;a href=&quot;#问题背景-1&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Xcode 添加 View Debugging 之前，我们有两种方式来调试 UI 界面。一种是花钱买 &lt;a href=&quot;http://revealapp.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reveal&lt;/a&gt; 享受视图层级可视化调试，另一种是用 lldb（更早是 gdb）命令来调试。而如今 Xcode 已经提供了部分审查视图元素和层级的功能，也可以在调试时显示每个视图的 frame 外框和视图的渲染状况等。这已经满足了很大部分的 UI 调试需求。&lt;a href=&quot;https://www.jetbrains.com/objc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppCode&lt;/a&gt; 则选择了与 &lt;a href=&quot;http://revealapp.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reveal&lt;/a&gt; 集成，虽然 jetbrains 大法好，但也有不给力的时候。&lt;/p&gt;
&lt;h2 id=&quot;用-LLDB-改变视图&quot;&gt;&lt;a href=&quot;#用-LLDB-改变视图&quot; class=&quot;headerlink&quot; title=&quot;用 LLDB 改变视图&quot;&gt;&lt;/a&gt;用 LLDB 改变视图&lt;/h2&gt;&lt;p&gt;在 &lt;strong&gt;iOS7 上 Xcode 并不支持捕获可视化的视图层级，我们只能用 lldb 的命令来输出视图层级&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight inform7&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;po &lt;span class=&quot;comment&quot;&gt;[&lt;span class=&quot;comment&quot;&gt;[&lt;span class=&quot;comment&quot;&gt;[UIApplication sharedApplication]&lt;/span&gt; keyWindow]&lt;/span&gt; recursiveDescription]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;po&lt;/code&gt; 是 &lt;code&gt;p object&lt;/code&gt; 的缩写，而 &lt;code&gt;p&lt;/code&gt; 又是 &lt;code&gt;print&lt;/code&gt; 的缩写，&lt;code&gt;print&lt;/code&gt; 又是 &lt;code&gt;expression --&lt;/code&gt;的缩写。&lt;code&gt;expression&lt;/code&gt; 就是 &lt;code&gt;e&lt;/code&gt; 命令，而 &lt;code&gt;--&lt;/code&gt; 代表标识的结束。上面这条命令的参数是一个全局变量，所以可以在任何时候访问，无需在特定位置加断点，只需点暂停按钮即可。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;e&lt;/code&gt; 命令，可以&lt;em&gt;在调试时改变变量的值，比如某个视图的透明度、背景颜色等，还可以临时创建新的视图或者视图控制器，甚至可以完成视图控制器的 push 操作&lt;/em&gt;。虽然此时程序（某个进程）是被我们暂停了的，但是后台的渲染服务是由后台的另一个进程完成的，所以可以&lt;strong&gt;强制触发渲染服务&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;e (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)[CATransaction &lt;span class=&quot;built_in&quot;&gt;flush&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用-Chisel-简化-LLDB-命令&quot;&gt;&lt;a href=&quot;#使用-Chisel-简化-LLDB-命令&quot; class=&quot;headerlink&quot; title=&quot;使用 Chisel 简化 LLDB 命令&quot;&gt;&lt;/a&gt;使用 Chisel 简化 LLDB 命令&lt;/h2&gt;&lt;p&gt;虽然调试器也有一定的代码补全功能，但是毕竟程序员的时间是宝贵的， Xcode 的调试器毕竟还没做到 zsh 那样屌炸天，我们需要更多的“缩写”命令。Facebook 的程序员们最先按捺不住（毕竟人家做个客户端就要动辄几百号人），开发了一个基于 lldb 的工具：&lt;a href=&quot;https://github.com/facebook/chisel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chisel&lt;/a&gt;。从此，输出视图层级只需要一条命令：&lt;code&gt;pviews&lt;/code&gt;，输出视图控制器层级也是一条命令：&lt;code&gt;pvc&lt;/code&gt;，刷新渲染服务更是一条命令：&lt;code&gt;caflush&lt;/code&gt;。安装 chisel 更是简单，直接用 &lt;a href=&quot;http://brew.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Homebrew&lt;/a&gt; 分分钟搞定，因为 Homebrew 在 OSX 上太火，有人还专门做了个带图形界面的客户端 &lt;a href=&quot;https://www.cakebrew.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cakebrew&lt;/a&gt;，简直骚得不得了。&lt;/p&gt;
&lt;p&gt;当然我们无需查看完整的视图层级树，&lt;code&gt;pviews&lt;/code&gt; 后面可以附带参数，查看当前 view 为根节点下的层级树。默认不带参数就是完整打印。&lt;/p&gt;
&lt;h2 id=&quot;我的实践与感悟&quot;&gt;&lt;a href=&quot;#我的实践与感悟&quot; class=&quot;headerlink&quot; title=&quot;我的实践与感悟&quot;&gt;&lt;/a&gt;我的实践与感悟&lt;/h2&gt;&lt;p&gt;最直观的还是能可视化地查看视图层级，比如某个视图为何不显示？是因为 hidden 了还是 alpha 问题，或是被其他视图遮挡住了？捕获下视图层级一看便知。但其缺点是捕获速度较慢，视图层级较为复杂时，查找明确类型的视图或者明确内存地址的视图对象较为困难。所以 lldb 调试 UI 还是有一定优势的，尤其是在动画繁多界面变化节奏较快时也会需要用到。我在调试“图片选择器触发摄像头拍照后屏幕变黑无反应”的 bug 时就是靠 &lt;code&gt;pvc&lt;/code&gt; 和 &lt;code&gt;pviews&lt;/code&gt; 这两个命令来弄清视图控制器与视图之间复杂的层级。表面上看是图片选择器的原因，因为其他用到摄像头组件的地方并没有这个 bug，其实摄像头组件对外部调用有一些依赖条件，一旦不满足就会产生 bug。最后更改拍照控件的实现，弃用了 &lt;code&gt;UIWindow&lt;/code&gt; 和一些视图控制器，简化层级，从源头上消除了 bug。&lt;/p&gt;
&lt;h1 id=&quot;项目实践管理经验&quot;&gt;&lt;a href=&quot;#项目实践管理经验&quot; class=&quot;headerlink&quot; title=&quot;项目实践管理经验&quot;&gt;&lt;/a&gt;项目实践管理经验&lt;/h1&gt;&lt;p&gt;在公司项目中我发现了有关项目资源管理的一些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图片资源使用文件夹管理&lt;/li&gt;
&lt;li&gt;文案 hardcode&lt;/li&gt;
&lt;li&gt;工程文件 project.pbxproj 冲突合并&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;图片资源管理&quot;&gt;&lt;a href=&quot;#图片资源管理&quot; class=&quot;headerlink&quot; title=&quot;图片资源管理&quot;&gt;&lt;/a&gt;图片资源管理&lt;/h2&gt;&lt;p&gt;我觉得图片最好是放在 xcassets 中，因为好处简直是一大堆。比如对多分辨率多设备的支持，矢量pdf图片的支持，类似安卓“9.png”的图片 slicing 支持，更改图片颜色和 Xcode7 新增的“On Demand Resource”等等。如果图片过多，还可以在 xcassets 中再建立 xcassets 嘛，如果有打包需要可以配合上 Bundle。&lt;/p&gt;
&lt;p&gt;图片一旦用 Asset Catalog 管理后，在程序中加载图片只需要用图片名而无需后缀名，更不用关心几倍分辨率，是用2x 还是 3x？Xcode 全都帮我们搞定了！之前碰到过一个 iOS7 上图片被拉伸的 bug，原因就是没有使用 Asset Catalog 管理图片资源，而是直接用文件夹。而在代码中却写了图片文件的全名，比如 “pic@2x.png”，本来贴心的 Xcode 会为我们在后缀名前自动加上 “@2x” 来寻找图片，于是去查找 “pic@2x@2x.png”，发现并没有这个二倍分辨率图片，Xcode 于是只好继续寻找一倍分辨率的图片，也就是 “pic@2x.png” 被当做了一倍分辨率的图片处理了，所以 &lt;code&gt;UIImage&lt;/code&gt; 的 &lt;code&gt;size&lt;/code&gt; 就变大了。&lt;/p&gt;
&lt;h2 id=&quot;文案管理&quot;&gt;&lt;a href=&quot;#文案管理&quot; class=&quot;headerlink&quot; title=&quot;文案管理&quot;&gt;&lt;/a&gt;文案管理&lt;/h2&gt;&lt;h3 id=&quot;文案是可复用的&quot;&gt;&lt;a href=&quot;#文案是可复用的&quot; class=&quot;headerlink&quot; title=&quot;文案是可复用的&quot;&gt;&lt;/a&gt;文案是可复用的&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;有很多文案可以重用，因为产品设计的文案大都是统一的&lt;/strong&gt;，比如所有需要展示网络出错的文案肯定都是一模一样的，如果每个 Alert 弹出的文案提示都不一样，那才是产品的失责。从不能 A 界面无网络，提示“断网啦”，B 界面无网络时提示“无法访问网络”，这样子的设计很少见。&lt;/p&gt;
&lt;h3 id=&quot;重复的文案在多处-hardcode-会降低效率&quot;&gt;&lt;a href=&quot;#重复的文案在多处-hardcode-会降低效率&quot; class=&quot;headerlink&quot; title=&quot;重复的文案在多处 hardcode 会降低效率&quot;&gt;&lt;/a&gt;重复的文案在多处 hardcode 会降低效率&lt;/h3&gt;&lt;p&gt;基于上面这点“小聪明”，我觉得不同功能界面的文案完全是可以复用的，这在我以往的经验中也得到了验证。而项目当前是直接将文案硬编码到业务逻辑代码中，以后每次修改都要找到对应的逻辑，并进行修改。如果是维护自己代码中的文案或者是业务逻辑较为简单时还可以接受，因为只是一次次的重复劳动罢了，对个人来说微不足道。&lt;/p&gt;
&lt;p&gt;一旦有一天我们的产品将要做国际化，加上英文，可能这对每个人负责的模块来说也只是替换下罢了。然而事情不能是这么任由发展的，先不说国际化中有一些诸如 XLIFF 文件的导入的标准和流程，一旦一个模块的文案全由另外一个不熟悉代码的人来修改，漏改或错改的风险会增加，这无疑增加了测试的时间成本。&lt;/p&gt;
&lt;h3 id=&quot;我的解决方案：文案与代码分离&quot;&gt;&lt;a href=&quot;#我的解决方案：文案与代码分离&quot; class=&quot;headerlink&quot; title=&quot;我的解决方案：文案与代码分离&quot;&gt;&lt;/a&gt;我的解决方案：文案与代码分离&lt;/h3&gt;&lt;p&gt;为什么不建立一个对照表，将所有的文案列出来呢？比如TB001号文案内容是“取消”，我敢说肯定很多 AlertView 的按钮都会用到，直接在代码里使用这个编号对应的的 &lt;code&gt;NSString&lt;/code&gt;变量（或许干脆变量名就是 &lt;code&gt;tb001&lt;/code&gt;）。产品那边提供文案时也列一张映射表，将各个模块页面的文案都对应上编号，然后编号又映射到具体文案内容。&lt;/p&gt;
&lt;h3 id=&quot;解决方案的分析&quot;&gt;&lt;a href=&quot;#解决方案的分析&quot; class=&quot;headerlink&quot; title=&quot;解决方案的分析&quot;&gt;&lt;/a&gt;解决方案的分析&lt;/h3&gt;&lt;p&gt;可能这么做最开始会有一定的工作量，但趁着文案种类没有暴增时，这件事情做的越早越好。这会提高全组人的效率，因为以后再修改文案时，直接修改那个保存文案编码与内容的文件即可。如果需要变更代码中的编码，此时才需要涉及到查看代码逻辑，然而这种情况我相信是少数。&lt;/p&gt;
&lt;h2 id=&quot;project-pbxproj文件&quot;&gt;&lt;a href=&quot;#project-pbxproj文件&quot; class=&quot;headerlink&quot; title=&quot;project.pbxproj文件&quot;&gt;&lt;/a&gt;project.pbxproj文件&lt;/h2&gt;&lt;p&gt;关于工程文件 project.pbxproj 确实诟病已久，多人协作时总会蛋疼。每次有文件的增删操作时我们总是需要解决 svn 上与本地版本的冲突。我对它研究并不多，但发现了有人提供了一个解决方案：&lt;a href=&quot;https://github.com/truebit/xUnique&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xUnique&lt;/a&gt;，目前处于观望状态，还不敢尝试。&lt;/p&gt;
&lt;p&gt;但我的设想是能够用一个脚本，每次 commit project.pbxproj 文件时可以自动屏蔽掉一些内容，比如证书等。但这种设想没有经过验证，可能还是无法解决根本问题。毕竟 project.pbxproj 文件格式可能还会有变化，苹果总是喜欢优化它被诟病的东西。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;来腾讯实习正好一个月了，因为项目已经进入了成熟期，接了两个需求，改了二十几个 bug。所以把这期间的一些思考写下来，发了邮件分享给组内同事们。我把一些自己觉得不合适的内容刨除出去，选取邮件的部分内容写在这里：）&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>关于 @synchronized，这儿比你想知道的还要多</title>
    <link href="http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/"/>
    <id>http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/</id>
    <published>2015-11-01T03:58:23.000Z</published>
    <updated>2016-05-11T14:32:38.000Z</updated>
    
    <content type="html">&lt;p&gt;本文翻译自 &lt;a href=&quot;http://rykap.com/about/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ryan Kaplan&lt;/a&gt; 的 &lt;a href=&quot;http://rykap.com/objective-c/2015/05/09/synchronized.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;More than you want to know about @synchronized&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;因为原文一些内容写的不太准确，我按照我的理解做出了批注和补充。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如果你已经使用 Objective-C 编写过任何并发程序，那么想必是见过 &lt;code&gt;@synchronized&lt;/code&gt; 这货了。&lt;code&gt;@synchronized&lt;/code&gt; 结构所做的事情跟锁（lock）类似：它防止不同的线程同时执行同一段代码。但在某些情况下，相比于使用 &lt;code&gt;NSLock&lt;/code&gt; 创建锁对象、加锁和解锁来说，&lt;code&gt;@synchronized&lt;/code&gt; 用着更方便，可读性更高。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：这与苹果官方文档对 &lt;code&gt;@synchronized&lt;/code&gt; 的介绍有少许出入，但意思差不多。苹果官方文档更强调它“防止不同的线程同时获取相同的锁”，因为文档在集中介绍多线程编程各种锁的作用，所以更强调“相同的锁”而不是“同一段代码”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你之前没用过 &lt;code&gt;@synchronized&lt;/code&gt;，接下来有个使用它的例子。这篇文章实质上是谈谈有关我对 &lt;code&gt;@synchronized&lt;/code&gt; 实现原理的一个简短研究。&lt;/p&gt;
&lt;h2 id=&quot;用到-synchronized-的例子&quot;&gt;&lt;a href=&quot;#用到-synchronized-的例子&quot; class=&quot;headerlink&quot; title=&quot;用到 @synchronized 的例子&quot;&gt;&lt;/a&gt;用到 @synchronized 的例子&lt;/h2&gt;&lt;p&gt;假设我们正在用 Objective-C 实现一个线程安全的队列，我们一开始可能会这么干：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@implementation&lt;/span&gt; ThreadSafeQueue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray *_elements;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLock *_lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = &lt;span class=&quot;selector-attr&quot;&gt;[super init]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _elements = &lt;span class=&quot;selector-attr&quot;&gt;[NSMutableArray array]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _lock = &lt;span class=&quot;selector-attr&quot;&gt;[[NSLock alloc]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;init&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(id)element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[_lock lock]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[_elements addObject:element]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[_lock unlock]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 &lt;code&gt;ThreadSafeQueue&lt;/code&gt; 类有个 &lt;code&gt;init&lt;/code&gt; 方法，它初始化了一个 &lt;code&gt;_elements&lt;/code&gt; 数组和一个 &lt;code&gt;NSLock&lt;/code&gt; 实例。这个类还有个 &lt;code&gt;push:&lt;/code&gt; 方法，它先获取锁、然后向数组中插入元素、最终释放锁。可能会有许多线程同时调用 &lt;code&gt;push:&lt;/code&gt; 方法，但是 &lt;code&gt;[_elements addObject:element]&lt;/code&gt; 这行代码在任何时候将只会在一个线程上运行。步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;线程 A 调用 &lt;code&gt;push:&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;线程 B 调用 &lt;code&gt;push:&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;线程 B 调用 &lt;code&gt;[_lock lock]&lt;/code&gt; - 因为当前没有其他线程持有锁，线程 B 获得了锁&lt;/li&gt;
&lt;li&gt;线程 A 调用 &lt;code&gt;[_lock lock]&lt;/code&gt;，但是锁已经被线程 B 占了所以方法调用并没有返回-这会暂停线程 A 的执行&lt;/li&gt;
&lt;li&gt;线程 B 向 &lt;code&gt;_elements&lt;/code&gt; 添加元素后调用 &lt;code&gt;[_lock unlock]&lt;/code&gt;。当这些发生时，线程 A 的 &lt;code&gt;[_lock lock]&lt;/code&gt; 方法返回，并继续将自己的元素插入 &lt;code&gt;_elements&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们可以用 &lt;code&gt;@synchronized&lt;/code&gt; 结构更简要地实现这些：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@implementation&lt;/span&gt; ThreadSafeQueue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray *_elements;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = &lt;span class=&quot;selector-attr&quot;&gt;[super init]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _elements = &lt;span class=&quot;selector-attr&quot;&gt;[NSMutableArray array]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;increment&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@synchronized&lt;/span&gt; (self) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-attr&quot;&gt;[_elements addObject:element]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在前面的例子中，”synchronized block” 与 &lt;code&gt;[_lock lock]&lt;/code&gt; 和 &lt;code&gt;[_lock unlock]&lt;/code&gt; 效果相同。你可以把它当成是锁住 &lt;code&gt;self&lt;/code&gt;，仿佛 &lt;code&gt;self&lt;/code&gt; 就是个 &lt;code&gt;NSLock&lt;/code&gt;。锁在左括号 &lt;code&gt;{&lt;/code&gt; 后面的任何代码运行之前被获取到，在右括号 &lt;code&gt;}&lt;/code&gt; 后面的任何代码运行之前被释放掉。这爽就爽在妈妈再也不用担心我忘记调用 &lt;code&gt;unlock&lt;/code&gt; 了！&lt;/p&gt;
&lt;p&gt;你可以给任何 Objective-C 对象上加个 &lt;code&gt;@synchronized&lt;/code&gt;。那么我们也可以在上面的例子中用 &lt;code&gt;@synchronized(_elements)&lt;/code&gt; 来替代 &lt;code&gt;@synchronized(self)&lt;/code&gt;，效果是相同的。&lt;/p&gt;
&lt;h2 id=&quot;回到研究上来&quot;&gt;&lt;a href=&quot;#回到研究上来&quot; class=&quot;headerlink&quot; title=&quot;回到研究上来&quot;&gt;&lt;/a&gt;回到研究上来&lt;/h2&gt;&lt;p&gt;我对 &lt;code&gt;@synchronized&lt;/code&gt; 的实现十分好奇并搜了一些它的细节。我&lt;a href=&quot;http://stackoverflow.com/questions/1215330/how-does-synchronized-lock-unlock-in-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;找到了&lt;/a&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1215765/changing-the-locking-object-insde-synchronized-section&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一些&lt;/a&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;答案&lt;/a&gt;，但这些解释都没有达到我想要的深度。锁是如何与你传入 &lt;code&gt;@synchronized&lt;/code&gt; 的对象关联上的？&lt;code&gt;@synchronized&lt;/code&gt;会保持（retain，增加引用计数）被锁住的对象么？假如你传入 &lt;code&gt;@synchronized&lt;/code&gt; 的对象在 &lt;code&gt;@synchronized&lt;/code&gt; 的 block 里面被释放或者被赋值为 &lt;code&gt;nil&lt;/code&gt; 将会怎么样？这些全都是我想回答的问题。而我这次的收获，会要你好看😏。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@synchronized&lt;/code&gt; 的&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档&lt;/a&gt;告诉我们 &lt;code&gt;@synchronized&lt;/code&gt; block 在被保护的代码上暗中添加了一个异常处理。为的是同步某对象时如若抛出异常，锁会被释放掉。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1215330/how-does-synchronized-lock-unlock-in-objective-c/6047218#6047218&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SO 上的这篇帖子&lt;/a&gt; 说 &lt;code&gt;@synchronized&lt;/code&gt; block 会变成 &lt;code&gt;objc_sync_enter&lt;/code&gt; 和 &lt;code&gt;objc_sync_exit&lt;/code&gt; 的成对儿调用。我们不知道这些函数是干啥的，但基于这些事实我们可以认为编译器将这样的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@synchronized&lt;/span&gt;(obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; work&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转化成这样的东东：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_enter(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;variable&quot;&gt;@finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_exit(obj);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;objc_sync_enter&lt;/code&gt; 和 &lt;code&gt;objc_sync_exit&lt;/code&gt; 是什么鬼？它们是如何实现的？在 Xcode 中按住 Command 键单击它们，然后进到了 &lt;code&gt;&amp;lt;objc/objc-sync.h&amp;gt;&lt;/code&gt;，里面有我们感兴趣的这两个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/** &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Begin synchronizing &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &#39;obj&#39;.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Allocates recursive pthread_mutex associated &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &#39;obj&#39; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; needed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param obj The object &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; begin synchronizing &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @&lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt; OBJC_SYNC_SUCCESS once lock &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; acquired.  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OBJC_EXPORT  int objc_sync_enter(&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt; obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __OSX_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_2_0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/** &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * End synchronizing &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &#39;obj&#39;. &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @param obj The objet &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; synchronizing &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * @&lt;span class=&quot;literal&quot;&gt;return&lt;/span&gt; OBJC_SYNC_SUCCESS &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; OBJC_SYNC_NOT_OWNING_THREAD_ERROR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OBJC_EXPORT  int objc_sync_exit(&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt; obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __OSX_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_2_0);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件底部的一句话提醒着我们：苹果工程师也是人啊哈哈&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The wait/notify functions have never worked correctly and no longer exist.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OBJC_EXPORT  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; objc_sync_wait(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; milliSecondsMaxWait) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UN&lt;span class=&quot;built_in&quot;&gt;AVAILABLE_ATTRIBUTE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OBJC_EXPORT  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; objc_sync_notify(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UN&lt;span class=&quot;built_in&quot;&gt;AVAILABLE_ATTRIBUTE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OBJC_EXPORT  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; objc_sync_notifyAll(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UN&lt;span class=&quot;built_in&quot;&gt;AVAILABLE_ATTRIBUTE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注: 此处原文摘抄的源码较旧，所以我替换上了最新的头文件源码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不过，&lt;code&gt;objc_sync_enter&lt;/code&gt; 的文档告诉我们一些新东西： &lt;code&gt;@synchronized&lt;/code&gt; 结构在工作时为传入的对象分配了一个递归锁。分配工作何时发生，如何发生呢？它怎样处理 &lt;code&gt;nil&lt;/code&gt;？幸运的是 Objective-C runtime 是开源的，所以我们可以马上阅读源码并找到答案！&lt;/p&gt;
&lt;p&gt;注：递归锁在被同一线程重复获取时不会产生死锁。你可以在&lt;a href=&quot;https://en.wikipedia.org/wiki/Reentrant_mutex#Example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这&lt;/a&gt;找到一个它工作原理的精巧案例。有个叫做 &lt;code&gt;NSRecursiveLock&lt;/code&gt; 的现成的类也是这样的，你可以试试。&lt;/p&gt;
&lt;p&gt;你可以在&lt;a href=&quot;http://www.opensource.apple.com/source/objc4/objc4-646/runtime/objc-sync.mm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;找到 &lt;code&gt;objc-sync&lt;/code&gt; 的全部源码，但我要带着你看源码，让你屌的飞起。我们先从文件顶部的数据结构开始看。在代码块的下方我将立刻做出解释，所以尝试理解代码时别花太长时间哦。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; SyncData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id object;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;recursive_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; SyncData* nextData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; threadCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; SyncData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; SyncList &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SyncData *data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;spinlock_t&lt;/span&gt; lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; SyncList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Use multiple parallel lists to decrease contention among unrelated objects.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; COUNT 16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; HASH(obj) ((((uintptr_t)(obj)) &amp;gt;&amp;gt; 5) &amp;amp; (COUNT - 1))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LOCK_FOR_OBJ(obj) sDataLists[HASH(obj)].lock&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; LIST_FOR_OBJ(obj) sDataLists[HASH(obj)].data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; SyncList sDataLists[COUNT];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一开始，我们有一个 &lt;code&gt;struct SyncData&lt;/code&gt; 的定义。这个结构体包含一个 &lt;code&gt;object&lt;/code&gt;（嗯就是我们给 &lt;code&gt;@synchronized&lt;/code&gt; 传入的那个对象）和一个有关联的 &lt;code&gt;recursive_mutex_t&lt;/code&gt;，它就是那个跟 &lt;code&gt;object&lt;/code&gt; 关联在一起的锁。每个 &lt;code&gt;SyncData&lt;/code&gt; 也包含一个指向另一个 &lt;code&gt;SyncData&lt;/code&gt; 对象的指针，叫做 &lt;code&gt;nextData&lt;/code&gt;，所以你可以把每个 &lt;code&gt;SyncData&lt;/code&gt; 结构体看做是链表中的一个元素。最后，每个 &lt;code&gt;SyncData&lt;/code&gt; 包含一个 &lt;code&gt;threadCount&lt;/code&gt;，这个 &lt;code&gt;SyncData&lt;/code&gt; 对象中的锁会被一些线程使用或等待，&lt;code&gt;threadCount&lt;/code&gt; 就是此时这些线程的数量。它很有用处，因为 &lt;code&gt;SyncData&lt;/code&gt; 结构体会被缓存，&lt;code&gt;threadCount==0&lt;/code&gt; 就暗示了这个 &lt;code&gt;SyncData&lt;/code&gt; 实例可以被复用。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;struct SyncList&lt;/code&gt; 的定义。正如我在上面提过，你可以把 &lt;code&gt;SyncData&lt;/code&gt; 当做是链表中的节点。每个 &lt;code&gt;SyncList&lt;/code&gt; 结构体都有个指向 &lt;code&gt;SyncData&lt;/code&gt; 节点链表头部的指针，也有一个用于防止多个线程对此列表做并发修改的锁。&lt;/p&gt;
&lt;p&gt;上面代码块的最后一行是 &lt;code&gt;sDataLists&lt;/code&gt; 的声明 - 一个 &lt;code&gt;SyncList&lt;/code&gt; 结构体数组，大小为16。通过定义的一个哈希算法将传入对象映射到数组上的一个下标。值得注意的是这个哈希算法设计的很巧妙，是将对象指针在内存的地址转化为无符号整型并右移五位，再跟 &lt;code&gt;0xF&lt;/code&gt; 做按位与运算，这样结果不会超出数组大小。 &lt;code&gt;LOCK_FOR_OBJ(obj)&lt;/code&gt; 和 &lt;code&gt;LIST_FOR_OBJ(obj)&lt;/code&gt; 这俩宏就更好理解了，先是哈希出对象的数组下标，然后取出数组对应元素的 &lt;code&gt;lock&lt;/code&gt; 或 &lt;code&gt;data&lt;/code&gt;。一切都是这么顺理成章哈。&lt;/p&gt;
&lt;p&gt;当你调用 &lt;code&gt;objc_sync_enter(obj)&lt;/code&gt; 时，它用 &lt;code&gt;obj&lt;/code&gt; 内存地址的哈希值查找合适的 &lt;code&gt;SyncData&lt;/code&gt;，然后将其上锁。当你调用 &lt;code&gt;objc_sync_exit(obj)&lt;/code&gt; 时，它查找合适的 &lt;code&gt;SyncData&lt;/code&gt; 并将其解锁。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：上面的源码和几段解释有些原文解释不清和疏漏的地方，我看了源码后按照自己的理解进行了补充和修正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;噢耶！现在我们知道了 &lt;code&gt;@synchronized&lt;/code&gt; 如何将一个锁和你正在同步的对象关联起来，我希望聊聊当一个对象在 &lt;code&gt;@synchronized&lt;/code&gt; block 当中被释放或设为 &lt;code&gt;nil&lt;/code&gt; 时会发生什么。&lt;/p&gt;
&lt;p&gt;如果你看了源码，你会注意到 &lt;code&gt;objc_sync_enter&lt;/code&gt; 里面没有 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;release&lt;/code&gt;。所以它要么没有保持传递给它的对象，要么或是在 ARC 下被编译。我们可以用下面的代码来做个测试：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; *test = [&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This should always be `1`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, @([test retainCount]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@synchronized&lt;/span&gt; (test) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// This will be `2` if `@synchronized` somehow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// retains `test`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, @([test retainCount]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两次输出结果都是 &lt;code&gt;1&lt;/code&gt;。那么 &lt;code&gt;objc_sync_enter&lt;/code&gt; 貌似是没保持被传入的对象啊。这就有趣了。如果你正在同步的对象被释放了，然后有可能另一个新的对象在此处（被释放对象的内存地址）被分配内存。有可能某个其他的线程试着去同步那个新的对象（就是那个在被释放的旧对象的内存地址上刚刚新创建的对象）。在这种情况下，另一个线程将会阻塞，直到当前线程结束它的同步 block。这看起来并不是很糟。这听起来像是这种事情实现者早就知道并予以接受。我没有遇到过任何好的替代方案。&lt;/p&gt;
&lt;p&gt;假如对象在 “synchronized block” 中被设成 &lt;code&gt;nil&lt;/code&gt; 呢？我们回顾下我们“拿衣服（naive）”的实现吧：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *test = &lt;span class=&quot;string&quot;&gt;@&quot;test&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Allocates a lock for test and locks it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_enter(test);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;@finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Passed `nil`, so the lock allocated in `objc_sync_enter`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// above is never unlocked or deallocated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_exit(test);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;objc_sync_enter&lt;/code&gt; 被调用时传入的是 &lt;code&gt;test&lt;/code&gt; 而 &lt;code&gt;objc_sync_exit&lt;/code&gt; 被调用时传入的是 &lt;code&gt;nil&lt;/code&gt;。而传入 &lt;code&gt;nil&lt;/code&gt; 的时候 &lt;code&gt;objc_sync_exit&lt;/code&gt; 是个空操作，所以将不会有人释放锁。这真操蛋！&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;Objective-C&lt;/code&gt; 容易受这种情况的影响，我们知道么？下面的代码调用 &lt;code&gt;@synchronized&lt;/code&gt; 并在 &lt;code&gt;@synchronized&lt;/code&gt; block 中将一个指针设为 &lt;code&gt;nil&lt;/code&gt;。然后在后台线程对指向同一个对象的指针调用 &lt;code&gt;@synchronized&lt;/code&gt;。如果在 &lt;code&gt;@synchronized&lt;/code&gt; block 中设置一个对象为 &lt;code&gt;nil&lt;/code&gt; 会让锁死锁，那么在第二个 &lt;code&gt;@synchronized&lt;/code&gt; 中的代码将永远不会执行。我们将不会在控制台中看见任何东西打印出来。&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = @(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *thisPtrWillGoToNil = &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@synchronized (thisPtrWillGoToNil) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * Here we &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; thing &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; we&#39;re synchronizing &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; `nil`. If&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * implemented naively, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; object would be passed &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; `objc_sync_enter`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; `nil` would be passed &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; `objc_sync_exit`, causing a lock &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * never be released.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thisPtrWillGoToNil = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSCAssert(![NSThread isMainThread], @&lt;span class=&quot;string&quot;&gt;&quot;Must be run on background thread&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * If, &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; mentioned &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; comment &lt;span class=&quot;keyword&quot;&gt;above&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; synchronized lock &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; never&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * released, &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; we expect &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; wait forever &lt;span class=&quot;keyword&quot;&gt;below&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; we &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; acquire&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; lock associated &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;`.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * This doesn&#39;t happen, so we conclude &lt;span class=&quot;keyword&quot;&gt;that&lt;/span&gt; `@synchronized` must deal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; this correctly.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @synchronized (&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;This line does indeed get printed to stdout&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 当我们执行上面的代码时，那行代码&lt;strong&gt;确实&lt;/strong&gt;打印到控制台了！所以 Objective-C 很好地处理了这种情形。我打赌是编译器做了类似下面的事情来解决这事儿的。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSString *test = @&lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id &lt;span class=&quot;keyword&quot;&gt;synchronizeTarget &lt;/span&gt;= (id)test&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_enter(&lt;span class=&quot;keyword&quot;&gt;synchronizeTarget);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    test = nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; @finally &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_sync_exit(&lt;span class=&quot;keyword&quot;&gt;synchronizeTarget); &lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用这种方式实现的话，传递给 &lt;code&gt;objc_sync_enter&lt;/code&gt; 和 &lt;code&gt;objc_sync_exit&lt;/code&gt; 总是相同的对象。他们在传入 &lt;code&gt;nil&lt;/code&gt; 时都是空操作。这带来了个棘手的 debug 场景：如果你向 &lt;code&gt;@synchronized&lt;/code&gt; 传递 &lt;code&gt;nil&lt;/code&gt;，那么你就不会得到任何锁而且你的代码将不会是线程安全的！如果你想知道为什么你正收到出乎意料的竞态（race），确保你没向你的 &lt;code&gt;@synchronized&lt;/code&gt; 传入 &lt;code&gt;nil&lt;/code&gt;。你可以在 &lt;code&gt;objc_sync_nil&lt;/code&gt; 上设置一个符号断点来达到此目的。&lt;code&gt;objc_sync_nil&lt;/code&gt; 是一个空方法，当 &lt;code&gt;objc_sync_enter&lt;/code&gt; 函数被传入 &lt;code&gt;nil&lt;/code&gt; 时会被调用，折让 debug 更容易些。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：下面是 &lt;code&gt;objc_sync_enter&lt;/code&gt; 的源码，主要逻辑很容易看懂，加深理解 &lt;code&gt;objc_sync_nil&lt;/code&gt;：&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; objc_sync_enter(id obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;OBJC_SYNC_SUCCESS&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;SyncData&lt;/span&gt;* data = id2data(obj, &lt;span class=&quot;type&quot;&gt;ACQUIRE&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        require_action_string(data != &lt;span class=&quot;type&quot;&gt;NULL&lt;/span&gt;, done, &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;OBJC_SYNC_NOT_INITIALIZED&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;id2data failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = recursive_mutex_lock(&amp;amp;data-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        require_noerr_string(&lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;, done, &lt;span class=&quot;string&quot;&gt;&quot;mutex_lock failed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // @synchronized(&lt;span class=&quot;keyword&quot;&gt;nil&lt;/span&gt;) does nothing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;DebugNilSync&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _objc_inform(&lt;span class=&quot;string&quot;&gt;&quot;NIL SYNC DEBUG: @synchronized(nil); set a breakpoint on objc_sync_nil to debug&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        objc_sync_nil();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;done: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这回答了我眼下的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你调用 &lt;code&gt;sychronized&lt;/code&gt; 的每个对象，Objective-C runtime 都会为其分配一个递归锁并存储在哈希表中。&lt;/li&gt;
&lt;li&gt;如果在 &lt;code&gt;sychronized&lt;/code&gt; 内部对象被释放或被设为 &lt;code&gt;nil&lt;/code&gt; 看起来都 OK。不过这没在文档中说明，所以我不会再生产代码中依赖这条。&lt;/li&gt;
&lt;li&gt;注意不要向你的 &lt;code&gt;sychronized&lt;/code&gt; block 传入 &lt;code&gt;nil&lt;/code&gt;！这将会从代码中移走线程安全。你可以通过在 &lt;code&gt;objc_sync_nil&lt;/code&gt; 上加断点来查看是否发生了这样的事情。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;研究的下一步将是研究下 “synchronized block” 输出的汇编，看看它是否跟我上面的例子相似。我打赌 &lt;code&gt;@synchronized&lt;/code&gt; block 的汇编输出不会跟任何我们设计的 Objective-C 代码相同，上面的代码充其量是 &lt;code&gt;@synchronized&lt;/code&gt; 的工作模型。你能想到更好的模型么？我的模型在哪些情形下会有瑕疵么？告诉我吧！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自 &lt;a href=&quot;http://rykap.com/about/&quot;&gt;Ryan Kaplan&lt;/a&gt; 的 &lt;a href=&quot;http://rykap.com/objective-c/2015/05/09/synchronized.html&quot;&gt;More than you want to know about @synchronized&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;因为原文一些内容写的不太准确，我按照我的理解做出了批注和补充。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="翻译" scheme="http://yulingtianxia.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>尝试实现 Web 上的看图模式</title>
    <link href="http://yulingtianxia.com/blog/2015/10/20/Try-to-implement-picture-browser-mode-on-webview/"/>
    <id>http://yulingtianxia.com/blog/2015/10/20/Try-to-implement-picture-browser-mode-on-webview/</id>
    <published>2015-10-20T13:49:18.000Z</published>
    <updated>2016-05-11T14:31:49.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS 上有很多浏览器都有“看图模式”这一功能，实现这一功能可能有很多种途径，最近接触到了这方面的工作，所以在此把我的思路记录下来。过程虽然比较简短，但日后可能会用到，如有更好的方案也可以对比下，取长补短。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这次并不会用到什么新特性（比如 &lt;code&gt;WKWebView&lt;/code&gt;）。而且方案很简单，分三步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取网页中的图片（链接）&lt;/li&gt;
&lt;li&gt;将图片（链接）传给图片查看器&lt;/li&gt;
&lt;li&gt;完成点击图片的回调及动画&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里不可避免的会要用到 Javascript 来获取 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 元素内容，添加点击事件等。第一步很简单，几行 js 代码搞定：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAllImageUrl&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imgs = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; urlArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;imgs.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; src = imgs[i].src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       urlArray.push(src);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; urlArray.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二步也不难，因为图片查看器可以用现成的第三方库，比如 &lt;code&gt;IDMPhotoBrowser&lt;/code&gt;，只需要传入一个 &lt;code&gt;NSURL&lt;/code&gt; 数组就行。&lt;/p&gt;
&lt;p&gt;第三步需要绕个弯子。&lt;/p&gt;
&lt;p&gt;首先是用 js 给图片添加点击事件，这个简单：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setImage&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; imgs = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;imgs.length;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       imgs[i].setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;onClick&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;imageClick(&quot;&lt;/span&gt;+i+&lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是动画，还好 &lt;code&gt;IDMPhotoBrowser&lt;/code&gt; 提供了一个动画的接口：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(id)&lt;/span&gt;initWithPhotos:&lt;span class=&quot;params&quot;&gt;(NSArray *)&lt;/span&gt;photosArray animatedFromView:&lt;span class=&quot;params&quot;&gt;(UIView*)&lt;/span&gt;view&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要传入一个 &lt;code&gt;view&lt;/code&gt; 来作为动画的起始参数。我的做法是在 &lt;code&gt;webView&lt;/code&gt; 上添加一个占位视图，并正好覆盖在被点击图片之上，将其作为动画的起始参数。这就需要从网页上获取被点击图片的 &lt;code&gt;frame&lt;/code&gt;，还有图片的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getImageRect&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; imgs = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = imgs[i].getBoundingClientRect().left+&lt;span class=&quot;string&quot;&gt;&quot;::&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;+imgs[i].getBoundingClientRect().top+&lt;span class=&quot;string&quot;&gt;&quot;::&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;+imgs[i].width+&lt;span class=&quot;string&quot;&gt;&quot;::&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;+imgs[i].height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getImageData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; imgs = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;img&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; img=imgs[i]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; canvas=&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;canvas&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; context=canvas.getContext(&lt;span class=&quot;string&quot;&gt;&quot;2d&quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   canvas.width=img.width; canvas.height=img.height; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   context.drawImage(img,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,img.width,img.height); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; canvas.toDataURL(&lt;span class=&quot;string&quot;&gt;&quot;image/png&quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在获取图片内容时我并没有通过图片的 url 在 OC 代码中重新下载一次图片，而是选择将 web 中已经下载好的图片转成 png 格式传给 OC。但 &lt;code&gt;stringByEvaluatingJavaScriptFromString:&lt;/code&gt; 方法返回的都是字符串，而且 js 返回的数据编码还是 base64 格式的。这里用到 &lt;code&gt;skpsmtpmessage&lt;/code&gt; 这个第三方库将其解码为 &lt;code&gt;NSData&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;NSString&lt;/span&gt; *javascript = [NSString &lt;span class=&quot;keyword&quot;&gt;stringWithFormat:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                                &lt;span class=&quot;comment&quot;&gt;@&quot;getImageData(%d);&quot;, imgIndex];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;NSString&lt;/span&gt; *&lt;span class=&quot;keyword&quot;&gt;stringData &lt;/span&gt;= [webView &lt;span class=&quot;keyword&quot;&gt;stringByEvaluatingJavaScriptFromString:javascript];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;stringData &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;stringData &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;substringFromIndex:22]; &lt;/span&gt;// &lt;span class=&quot;keyword&quot;&gt;strip &lt;/span&gt;the &lt;span class=&quot;keyword&quot;&gt;string &lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;data:image/png:base64,&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;NSData&lt;/span&gt; *&lt;span class=&quot;meta&quot;&gt;data&lt;/span&gt; = [NSData decodeWebSafeBase64ForString:&lt;span class=&quot;keyword&quot;&gt;stringData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;UIImage&lt;/span&gt; *image = [UIImage imageWithData:&lt;span class=&quot;meta&quot;&gt;data&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;嗯，最后完成图片点击事件的函数，在其中获取被点击图片的 frame，并拼凑成以 “clickgirl” 开头的 &lt;code&gt;url&lt;/code&gt;，当然如果你喜欢用 “sexualgirl” 之类的也可以：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;imageClick&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = getImageRect(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;clickgirl::&quot;&lt;/span&gt;+i+&lt;span class=&quot;string&quot;&gt;&quot;::&quot;&lt;/span&gt;+&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.location = &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的 &lt;code&gt;url&lt;/code&gt; 在 &lt;code&gt;UIWebViewDelegate&lt;/code&gt; 的 &lt;code&gt;- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&lt;/code&gt; 中会获取到，我贴上完整代码，顺便去掉下讨厌的百度推广。不要忘了在 &lt;code&gt;browser&lt;/code&gt; 出现后将占位图片移除：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)webView:(&lt;span class=&quot;built_in&quot;&gt;UIWebView&lt;/span&gt; *)webView shouldStartLoadWithRequest:(&lt;span class=&quot;built_in&quot;&gt;NSURLRequest&lt;/span&gt; *)request navigationType:(&lt;span class=&quot;built_in&quot;&gt;UIWebViewNavigationType&lt;/span&gt;)navigationType &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *requestString = [[request URL] absoluteString];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([requestString hasPrefix:&lt;span class=&quot;string&quot;&gt;@&quot;http://pos.baidu.com&quot;&lt;/span&gt;]) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// ignore baidu ad&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *components = [requestString componentsSeparatedByString:&lt;span class=&quot;string&quot;&gt;@&quot;::&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([components[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;clickgirl&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; imgIndex = [components[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] intValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;([components[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] floatValue], [components[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] floatValue], [components[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] floatValue], [components[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] floatValue]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; *showView = [[&lt;span class=&quot;built_in&quot;&gt;UIImageView&lt;/span&gt; alloc] initWithFrame:frame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *javascript = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;string&quot;&gt;@&quot;getImageData(%d);&quot;&lt;/span&gt;, imgIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *stringData = [webView stringByEvaluatingJavaScriptFromString:javascript];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        stringData = [stringData substringFromIndex:&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// strip the string &quot;data:image/png:base64,&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *data = [&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; decodeWebSafeBase64ForString:stringData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        showView.image = image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_webView addSubview:showView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *urls = [_webView stringByEvaluatingJavaScriptFromString:&lt;span class=&quot;string&quot;&gt;@&quot;getAllImageUrl();&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ID&lt;span class=&quot;built_in&quot;&gt;MPhotoBrowser&lt;/span&gt; *browser = [[ID&lt;span class=&quot;built_in&quot;&gt;MPhotoBrowser&lt;/span&gt; alloc] initWithPhotos:[ID&lt;span class=&quot;built_in&quot;&gt;MPhoto&lt;/span&gt; photosWithURLs:[urls componentsSeparatedByString:&lt;span class=&quot;string&quot;&gt;@&quot;,&quot;&lt;/span&gt;]] animatedFromView:showView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [browser setInitialPageIndex:imgIndex];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        browser.useWhiteBackgroundColor = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:browser animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [showView removeFromSuperview];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实有些网站只是在手机站上加了百度推广之类的，而在 PC 端可能并没有。至于符合查看手机上 web 的布局，可以在调试时打开 Mac 上的 Safari，点击“开发”菜单（我相信你肯定早已开启开发模式），选择你调试的那台设备，然后会看到你正在调试的程序和 &lt;code&gt;webview&lt;/code&gt; 当前打开的域名。点击后可以展开 Web 检查器，使用方法跟 Mac 上 Safari 的 Web 检查器一样：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20151022-0@2x.png&quot; alt=&quot;Web 检查器&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样就可以查看手机上的 Web 元素，方便我们 js 代码的编写。&lt;/p&gt;
&lt;p&gt;其实在做公司项目时看了下 &lt;code&gt;IDMPhotoBrowser&lt;/code&gt; 的代码，并做了一点儿优化和定制，尤其是在动画方面，这个控件还有很多流程和性能优化的空间。&lt;/p&gt;
&lt;p&gt;最后放上 Demo 的 Github：&lt;a href=&quot;https://github.com/yulingtianxia/WebViewImageClick&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/WebViewImageClick&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 上有很多浏览器都有“看图模式”这一功能，实现这一功能可能有很多种途径，最近接触到了这方面的工作，所以在此把我的思路记录下来。过程虽然比较简短，但日后可能会用到，如有更好的方案也可以对比下，取长补短。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>When to Use Swift Structs and Classes</title>
    <link href="http://yulingtianxia.com/blog/2015/08/12/When-to-Use-Swift-Structs-and-Classes/"/>
    <id>http://yulingtianxia.com/blog/2015/08/12/When-to-Use-Swift-Structs-and-Classes/</id>
    <published>2015-08-12T02:05:20.000Z</published>
    <updated>2016-05-11T14:32:38.000Z</updated>
    
    <content type="html">&lt;p&gt;本文翻译自 Mike Ash 的 &lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2015-07-17-when-to-use-swift-structs-and-classes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Friday Q&amp;amp;A 2015-07-17: When to Use Swift Structs and Classes&lt;/a&gt;  &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Swift 圈中有一个被反复讨论的话题已经成为了:何时使用&lt;code&gt;class&lt;/code&gt;,何时使用&lt;code&gt;struct&lt;/code&gt;.我觉得今天我也要给出我的个人观点.&lt;/p&gt;
&lt;h2 id=&quot;值-VS-引用&quot;&gt;&lt;a href=&quot;#值-VS-引用&quot; class=&quot;headerlink&quot; title=&quot;值 VS 引用&quot;&gt;&lt;/a&gt;值 VS 引用&lt;/h2&gt;&lt;p&gt;答案真的很简单了:当你需要用值语义的时候使用&lt;code&gt;struct&lt;/code&gt;,需要用引用语义使用&lt;code&gt;class&lt;/code&gt;.就是这样!&lt;/p&gt;
&lt;p&gt;我们下周再见…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;等下&lt;/strong&gt;&lt;br&gt;干啥?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;还没回答我的问题呢&lt;/strong&gt;&lt;br&gt;你啥意思?答案不明摆着么?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;哦,但是…&lt;/strong&gt;&lt;br&gt;啥?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是值/引用语义?&lt;/strong&gt;&lt;br&gt;哦我明白了,我可能接下来会探讨下.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;还有他们是如何关联到&lt;code&gt;class&lt;/code&gt;和&lt;code&gt;struct&lt;/code&gt;上的&lt;/strong&gt;&lt;br&gt;嗯&lt;/p&gt;
&lt;p&gt;所有都归根结底到数据以及数据存储的位置.我们把东西存在局部变量,参数,属性和全局变量中.从根本上又划分为两种不同的&lt;em&gt;方式&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;对于值语义来说,数据直接存在于存储单元中.对于引用语义,数据存在于其他地方,存储单元存储一个对数据的&lt;em&gt;引用&lt;/em&gt;.当你存储数据的时候这种差异不一定明显.要注意的是拷贝存储的时候.对于值语义,你得到的是数据一份新拷贝.对于引用语义,你得到的是一份指向相同数据引用的新拷贝.&lt;/p&gt;
&lt;p&gt;真是抽象,我们来看个例子吧.我们暂时先把 Swift 这茬放下,我们先看个 Objective-C 的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;@interface&lt;/span&gt; SomeClass : NSObject &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;@implementation&lt;/span&gt; SomeClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct SomeStruct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SomeClass *reference = [[SomeClass alloc] init]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reference.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SomeClass *reference2 = reference&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reference.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;The number in reference2 is %d&quot;&lt;/span&gt;, reference2.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct SomeStruct value = &amp;#123;&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct SomeStruct value2 = value&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;The number in value2 is %d&quot;&lt;/span&gt;, value2.&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印结果:&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; reference2 &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; value2 &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为啥不一样呢?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SomeClass *reference = [[SomeClass alloc] init]&lt;/code&gt; 这行代码在内存中创建了一个 &lt;code&gt;SomeClass&lt;/code&gt; 的新实例,然后在变量中放置了一个对那个实例的引用. &lt;code&gt;reference2 = reference&lt;/code&gt; 这行代码在新变量中放置了对相同对象的引用. &lt;code&gt;reference.number = 43&lt;/code&gt; 这行代码修改的是两个变量当前一起指向的对象中存储的数字.结果就是日志打印的是对象中的值,即&lt;code&gt;43&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct SomeStruct value = {}&lt;/code&gt; 这行代码在变量中创建了一个 &lt;code&gt;SomeStruct&lt;/code&gt; 的新实例. &lt;code&gt;value2 = value&lt;/code&gt; 将实例拷贝到第二个变量.每个变量有各自的数据块.&lt;/p&gt;
&lt;p&gt;Swift 对应的例子:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class SomeClass &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; number: Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct SomeStruct &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; number: Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; reference = SomeClass()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reference&lt;span class=&quot;selector-class&quot;&gt;.number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; reference2 = reference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reference&lt;span class=&quot;selector-class&quot;&gt;.number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The number in reference2 is \(reference2.number)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; value = SomeStruct()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value&lt;span class=&quot;selector-class&quot;&gt;.number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; value2 = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;value&lt;span class=&quot;selector-class&quot;&gt;.number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;The number in value2 is \(value2.number)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果跟以前一样:&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; reference2 &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; value2 &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;值类型的经验&quot;&gt;&lt;a href=&quot;#值类型的经验&quot; class=&quot;headerlink&quot; title=&quot;值类型的经验&quot;&gt;&lt;/a&gt;值类型的经验&lt;/h2&gt;&lt;p&gt;值类型并不是新鲜事物,但是对于很多人来说觉得它是新的.这是怎么回事呢?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct&lt;/code&gt; 在绝大部分 Objective-C 代码中并不是很常用.我们偶尔以 &lt;code&gt;CGRect&lt;/code&gt; 和 &lt;code&gt;CGPoint&lt;/code&gt; 等方式接触到它们,但很少会自己去写.首先,它们不是很实用.用 Objective-C 在 &lt;code&gt;struct&lt;/code&gt; 中正确地存储对象的引用的确很难,尤其是使用 ARC 的时候.&lt;/p&gt;
&lt;p&gt;很多其他语言干脆没有类似 &lt;code&gt;struct&lt;/code&gt; 的东东.许多语言如同 Python 和 JavaScript 一样”万物皆对象”,只有引用类型.如果你是从这类语言转型到 Swift 的, 你可能对 &lt;code&gt;struct&lt;/code&gt; 的概念就更陌生了.&lt;/p&gt;
&lt;p&gt;等一下!有种情况下几乎所有语言都使用的值类型:数字!稍微有点编程经验的程序员都不会对下面的行为感到惊讶,这跟语言无关:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; x = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; x2 = x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;x=\(x) x2=\(x2)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// prints: x=43 x2=42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很对我们来说如此显而易见和自然以至于我们甚至没意识到结果的差异,但它就在我们眼前.你从开始编程之日起一直在使用值类型,即使你没意识到.&lt;/p&gt;
&lt;p&gt;很多语言实际上将数字实现为引用类型,因为它们是”万物皆对象”哲学的死忠粉.然而,它们是&lt;em&gt;不可变&lt;/em&gt;类型,值类型与不可变引用类型之间的差异很难察觉.它们表现得与值类型相同,尽管实现方式可能不同.&lt;/p&gt;
&lt;p&gt;这是理解值和引用类型重要的一环.当数据变化时,差异主要关系到语法方面.假如数据是不可变的,那么值和引用的差别就消失了,或至少变成了仅是性能问题而不是语法差异.&lt;/p&gt;
&lt;p&gt;实际上 Objective-C 的 &lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2012-07-27-lets-build-tagged-pointers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tagged pointers&lt;/a&gt; 对此提到过.一个对象遇上了 tagged pointer 的处理,然后存储在指针的值中,就成了值类型.拷贝操作这时拷贝的就是对象内容了.表面上没差异,因为 Objective-C 函数库小心翼翼地仅将不可变类型放到 tagged pointer 中.有些 &lt;code&gt;NSNumber&lt;/code&gt; 对象是引用类型而有些是值类型,但用起来没什么差别.&lt;/p&gt;
&lt;h2 id=&quot;做出抉择&quot;&gt;&lt;a href=&quot;#做出抉择&quot; class=&quot;headerlink&quot; title=&quot;做出抉择&quot;&gt;&lt;/a&gt;做出抉择&lt;/h2&gt;&lt;p&gt;既然我们知道了值类型的工作原理,我们改为自己的数据类型选择那种方式呢?&lt;/p&gt;
&lt;p&gt;这两种类型根本的区别就是当对其使用&lt;code&gt;=&lt;/code&gt;时会发生什么.值类型是被拷贝,而引用类型只是得到另一个新引用.&lt;/p&gt;
&lt;p&gt;因此在选择使用哪种类型时面对的根本问题是:拷贝它有意义么?拷贝操作是你想要变得简单,并经常使用的么?&lt;/p&gt;
&lt;p&gt;我们先看些极端的,显而易见的例子.整型数明显是可以拷贝的,应该是值类型.网络套接字感觉是不能被拷贝,应该是引用类型.像是用 x,y 对儿的点坐标是可拷贝的,应该是值类型.用来表示磁盘的控制器感觉上不太容易被拷贝,应该是引用类型.&lt;/p&gt;
&lt;p&gt;有些类型可以被拷贝,但它们不总是你希望的那样.建议把它们设为引用类型.比如屏幕上的一个按钮从概念上讲是可以拷贝的.副本按钮不会跟原来的按钮完全一样.点击副本按钮将不会激活原来的按钮.副本不会占用相同的屏幕位置.如果你将按钮传递到周围或放到一个新的变量里,你大概将想引用原本的按钮,除非明确被请求要做一份拷贝.这意味着你的按钮类型应该是一个引用类型.&lt;/p&gt;
&lt;p&gt;视图和窗口控制器是类似的例子.它们可能想象上是能拷贝的,但它几乎从来都不是你想要的那样.它们应该是引用类型.&lt;/p&gt;
&lt;p&gt;用于 Model 的类型该怎么搞?比方你有个 &lt;code&gt;User&lt;/code&gt; 类型来表示系统中的用户,或者 &lt;code&gt;Crime&lt;/code&gt; 类型来表示用户的活动.这些都是可完美拷贝的,所以它们或许应该是值类型.然而,你可能希望你程序中某处对 &lt;code&gt;User&lt;/code&gt; 的 &lt;code&gt;Crime&lt;/code&gt; 上的更新在程序的其他地方也可见.这就建议 &lt;code&gt;User&lt;/code&gt; 应该被某种用户控制器来管理,而且它应该是引用类型.&lt;/p&gt;
&lt;p&gt;集合是个有趣的例子.这包括比如数组和字典之类的东西,以及字符串.它们是可拷贝的么?显而易见.你想要做的拷贝操作是否易发生且经常发生呢?这不好说.&lt;/p&gt;
&lt;p&gt;大多数语言对此说”不”,而是实现为引用类型. Objective-C,Java,Python,JavaScript 和几乎其他所有我能想到的语言都是这么干的.(一个主要的例外就是 C++ 的 STL 中的集合类型,但是 C++ 是语言世界中胡言乱语的疯子,它不走寻常路.)&lt;/p&gt;
&lt;p&gt;Swift 说”不错”,这意味着如 &lt;code&gt;Array&lt;/code&gt;,&lt;code&gt;Dictionary&lt;/code&gt; 和 &lt;code&gt;String&lt;/code&gt; 都是 &lt;code&gt;struct&lt;/code&gt; 而不是 &lt;code&gt;class&lt;/code&gt;. 它们在赋值和作为参数传递时被拷贝.只要拷贝的开销小,这就是个彻底明智的选择,而Swift费了很大力气去实现这点.&lt;/p&gt;
&lt;h2 id=&quot;嵌套类型&quot;&gt;&lt;a href=&quot;#嵌套类型&quot; class=&quot;headerlink&quot; title=&quot;嵌套类型&quot;&gt;&lt;/a&gt;嵌套类型&lt;/h2&gt;&lt;p&gt;嵌套使用值类型和引用类型会有四种组合方式.只是其中一个比较有趣.&lt;/p&gt;
&lt;p&gt;如果一个引用类型包含了另一个引用类型,没有什么有趣的发生.任何指向其内部或外部值的引用通常都能修改它.每个人都会看到发生的变更.&lt;/p&gt;
&lt;p&gt;如果一个值类型包含了另一个值类型,这实际上只是让其占用空间更多.内部值是外部值的一部分.如果你将外部值放进某个新的存储区,所有的值都会被拷贝,包括内部值.如果你将内部值放入某个新的存储,它会被拷贝.&lt;/p&gt;
&lt;p&gt;一个引用类型包含了一个值类型实际上让被引用的值占用空间更大了.拥有对外部值的引用就可以操作全部值,包括被嵌入的值.被嵌入值的所有变更对指向外部值的引用是可见的.如果你将内部值放入某个新的存储区,它会被拷贝至那里.&lt;/p&gt;
&lt;p&gt;一个值类型包含着一个引用类型那就不这么简单了.你实际上暗地里破坏了你想要用的值类型语义.这样做或好后坏,取决于你怎样去做.当你把一个引用类型放入到一个值类型中,当你把它放入新的存储区时外部值会被拷贝,但是拷贝后的副本有一个指向&lt;em&gt;相同内嵌的原始对象&lt;/em&gt;的引用.这有个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Inner &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;struct Outer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; inner = Inner()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; outer = Outer()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; outer2 = outer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outer&lt;span class=&quot;selector-class&quot;&gt;.value&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;outer&lt;span class=&quot;selector-class&quot;&gt;.inner&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.value&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;outer2.value=\(outer2.value) outer2.inner.value=\(outer2.inner.value)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出是:&lt;/p&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;.inner.&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;43&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然 &lt;code&gt;outer2&lt;/code&gt; 得到一份 &lt;code&gt;value&lt;/code&gt; 的拷贝,但它只拷贝了 &lt;code&gt;inner&lt;/code&gt; 的*引用,于是这两个 &lt;code&gt;struct&lt;/code&gt; 最终共享同一个 &lt;code&gt;Inner&lt;/code&gt; 实例.因此对 &lt;code&gt;outer.inner.value&lt;/code&gt; 的更新会影响到 &lt;code&gt;outer2.inner.value&lt;/code&gt;. 唉呀妈呀!&lt;/p&gt;
&lt;p&gt;这种做法真的很方便.用这个方法可以创建个能够执行写时拷贝的 &lt;code&gt;struct&lt;/code&gt;,还能实现让值语义实际上不到处拷贝一坨坨的数据.这就是 Swift 中的集合的工作原理,你自己也可以实现自己的集合类型.想要知道更多详细信息,可以看看 &lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2015-04-17-lets-build-swiftarray.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Let’s Build Swift.Array&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这么做也可能变得极其危险.比方说你创建了个 &lt;code&gt;Person&lt;/code&gt; 类型.它被用作 Model 类当然也是可拷贝的,所以可以用 &lt;code&gt;struct&lt;/code&gt; 实现咯.突发一阵对 OC 的怀旧,你决定用 &lt;code&gt;NSString&lt;/code&gt; 作为 &lt;code&gt;Person&lt;/code&gt; 的 &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight capnproto&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var name: NSString&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你创建按了一对儿 &lt;code&gt;Person&lt;/code&gt; 实例,拼接字符串构建出 &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt; = NSMutableString()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;.appendString(&lt;span class=&quot;string&quot;&gt;&quot;Bob&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;.appendString(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;.appendString(&lt;span class=&quot;string&quot;&gt;&quot;Josephsonson&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let bob = Person(&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;.appendString(&lt;span class=&quot;string&quot;&gt;&quot;, Jr.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let bobjr = Person(&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后输出它们:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bob.name)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(bobjr.name)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果产生了:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Bob &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Josephsonson, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Jr.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Bob &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Josephsonson, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Jr.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;靠!&lt;/p&gt;
&lt;p&gt;发生了什么?区别于 Swift 的 &lt;code&gt;String&lt;/code&gt; 类型, &lt;code&gt;NSString&lt;/code&gt; 是一个引用类型.它是不可变的,但它有个可变的子类, &lt;code&gt;NSMutableString&lt;/code&gt;. 当 &lt;code&gt;bob&lt;/code&gt; 创建时,它创建了一个对 &lt;code&gt;name&lt;/code&gt; 字符串的引用.当那个字符串随后被修改时,变更会通过 &lt;code&gt;bob&lt;/code&gt; 展现出来.要注意到即使 &lt;code&gt;bob&lt;/code&gt; 是被 &lt;code&gt;let&lt;/code&gt; 约束的值类型,但实际上改变了 &lt;code&gt;bob&lt;/code&gt;.这&lt;em&gt;算不上真的&lt;/em&gt;修改了 &lt;code&gt;bob&lt;/code&gt;,只是修改了 &lt;code&gt;bob&lt;/code&gt; 中引用的一个值,但因为那个值是 &lt;code&gt;bob&lt;/code&gt; 数据的一部分,从语义上让人感到像是对 &lt;code&gt;bob&lt;/code&gt; 作了修改.&lt;/p&gt;
&lt;p&gt;这种事情在 Objective-C 中&lt;em&gt;一直&lt;/em&gt;在发生.每个有经验的 Objective-C 程序员都有到处写防御拷贝的习惯.因为一个 &lt;code&gt;NSString&lt;/code&gt; 实例可能实际上却是 &lt;code&gt;NSMutableString&lt;/code&gt;, 为了避免灾难,你要将属性定义为 &lt;code&gt;copy&lt;/code&gt;,或者在初始化时显式调用 &lt;code&gt;copy&lt;/code&gt; 方法.这同样适用于 Cocoa 中各种各样的集合类型.&lt;/p&gt;
&lt;p&gt;在 Swift 中解决方案更简单些:使用值类型而不是引用类型.在这种情况下,让 &lt;code&gt;name&lt;/code&gt; 成为 &lt;code&gt;String&lt;/code&gt;.再也不用担心无意中把引用共享咯.&lt;/p&gt;
&lt;p&gt;在其他情况下,解决方案可能更简单.比如,你创建了一个包含视图的 &lt;code&gt;struct&lt;/code&gt;,而视图是引用类型且不能改成值类型.这&lt;em&gt;或许&lt;/em&gt;是个好的迹象表明你不该用 &lt;code&gt;struct&lt;/code&gt;, 因为你不管怎样都不能维持值语义.&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;当移动值类型时它们会被拷贝,然而引用类型只是得到了一个对相同底层对象新引用.这意味着对引用类型的修改在每个引用上都看的到,然而对值类型的修改只会影响你修改的那块存储区.当选择使用哪种类型时,思考下如何拷贝你的类型比较恰当,如果需要深层拷贝就倾向于选择值类型.最后,谨防值类型中嵌入的引用类型,稍有不慎就会遭殃.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自 Mike Ash 的 &lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2015-07-17-when-to-use-swift-structs-and-classes.html&quot;&gt;Friday Q&amp;amp;A 2015-07-17: When to Use Swift Structs and Classes&lt;/a&gt;  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
      <category term="翻译" scheme="http://yulingtianxia.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>初识Core Data(4)</title>
    <link href="http://yulingtianxia.com/blog/2015/07/25/%E5%88%9D%E8%AF%86Core-Data-4/"/>
    <id>http://yulingtianxia.com/blog/2015/07/25/初识Core-Data-4/</id>
    <published>2015-07-25T05:23:17.000Z</published>
    <updated>2016-05-11T14:31:49.000Z</updated>
    
    <content type="html">&lt;p&gt;这其实是一篇 WWDC 2015 Session 220 的学习笔记,顺便整理了下 Core Data 批量操作和聚合操作的小技巧.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;批量操作&quot;&gt;&lt;a href=&quot;#批量操作&quot; class=&quot;headerlink&quot; title=&quot;批量操作&quot;&gt;&lt;/a&gt;批量操作&lt;/h2&gt;&lt;p&gt;Core Data 把数据库封装成了”object graph(对象图)”,虽然对于面向对象编程来说有了管理 Model 间继承与关系的便利性,但同样也牺牲了性能.比如批量操作时就需要将每条记录作为 &lt;code&gt;NSManagedObject&lt;/code&gt; 对象读取到内存中,修改之后再存入数据库.然而用 SQL 语句执行既方便又高效.  &lt;/p&gt;
&lt;p&gt;于是苹果在 iOS8 发布时顺便弄了个”Batch Updates”,在 iOS9 发布时又弄了个”Batch Deletions”.这两个”新技术”说白了就是直接操作持久层数据库,然后还需要手动更新/删除内存中的 context 好使得我们的 UI 从 context 读取的内容不会出错.这样做的好处就是省去了向内存的一次写操作和查找操作,而越过 context 直接操作持久层,最后我们需要自己手动将持久层的变更结果(&lt;code&gt;BatchResult&lt;/code&gt;)重新写入 context.只有当需要更新/删除大批量数据的时候才需要用到这两个技术.&lt;/p&gt;
&lt;p&gt;然而苹果至今未提供二者的文档,关于”Batch Updates”我在&lt;a href=&quot;http://yulingtianxia.com/blog/2014/08/05/coredatachu-li-hai-liang-shu-ju/&quot;&gt;CoreData处理海量数据&lt;/a&gt;中给出了用法和例子.看了 WWDC2015 Session 220 后觉得 “Batch Deletions” 应该与 “Batch Updates” 用法类似,并且坑爹. PS: 我在 iOS9 上测试 “Batch Updates” 发现了一个 bug, 每次更新 context 都会漏掉一条记录,这让我十分郁闷.  &lt;/p&gt;
&lt;h2 id=&quot;聚合操作&quot;&gt;&lt;a href=&quot;#聚合操作&quot; class=&quot;headerlink&quot; title=&quot;聚合操作&quot;&gt;&lt;/a&gt;聚合操作&lt;/h2&gt;&lt;p&gt;说完了批量操作,再谈谈聚合操作.在 SQL 语法中有一类聚合函数,比如 &lt;code&gt;count()&lt;/code&gt;,&lt;code&gt;sum()&lt;/code&gt;,&lt;code&gt;max()&lt;/code&gt;,&lt;code&gt;min()&lt;/code&gt;,&lt;code&gt;avg()&lt;/code&gt; 等,它们一般搭配着 &lt;code&gt;group by&lt;/code&gt; 甚至 &lt;code&gt;having&lt;/code&gt; 来使用.然而在号称”object graph”的 Core Data 中,这种聚合操作在 &lt;code&gt;NSFetchRequest&lt;/code&gt; 中也是有替代品的.下面的例子取自&lt;a href=&quot;http://www.cimgf.com/2015/06/25/core-data-and-aggregate-fetches-in-swift/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CORE DATA AND AGGREGATE FETCHES IN SWIFT&lt;/a&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.cimgf.com/wp-content/uploads/2015/06/AcmeHatCoDataTable.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;我们想计算出每条产品线的销售量和退货量,可以用下面的 SQL 语句搞定:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; ProductLine, &lt;span class=&quot;keyword&quot;&gt;SUM&lt;/span&gt;(Sold) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; SoldCount, &lt;span class=&quot;keyword&quot;&gt;SUM&lt;/span&gt;(Returned) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ReturnedCount &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; Products &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;BY&lt;/span&gt; ProductLine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;NSFetchRequest&lt;/code&gt; 有个 &lt;code&gt;propertiesToGroupBy&lt;/code&gt; 属性,正好对应着 &lt;code&gt;group by&lt;/code&gt; 语句:&lt;/p&gt;
&lt;figure class=&quot;highlight lasso&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Build out our fetch request the usual way&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; request = NSFetchRequest(entityName: &lt;span class=&quot;built_in&quot;&gt;self&lt;/span&gt;.entityName)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This is the column we are grouping by. Notice this is the only non aggregate column.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request.propertiesToGroupBy = &lt;span class=&quot;meta&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;productLine&quot;&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面还需要映射 SQL 语句中聚合函数及其计算后的结果,此时我们需要用到 &lt;code&gt;NSExpressionDescription&lt;/code&gt; 和 &lt;code&gt;NSExpression&lt;/code&gt; 来替换 SQL 中的 &lt;code&gt;ProductLine, SUM(Sold) as SoldCount, SUM(Returned) as ReturnedCount&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; an &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; AnyObject since it needs &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; contain multiple types&lt;span class=&quot;comment&quot;&gt;--strings and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// NSExpressionDescriptions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expressionDescriptions = [AnyObject]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// We want productLine &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; be one &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;columns&lt;/span&gt; returned, so just &lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; it &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescriptions.append(&lt;span class=&quot;string&quot;&gt;&quot;productLine&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; an expression description &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; our SoldCount &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expressionDescription = NSExpressionDescription()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription.name = &lt;span class=&quot;string&quot;&gt;&quot;SoldCount&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt; an expression &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; specify what &lt;span class=&quot;keyword&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;action&lt;/span&gt; we want &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; take &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; which column. &lt;span class=&quot;keyword&quot;&gt;In&lt;/span&gt; this &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; the sold &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription.expression = NSExpression(&lt;span class=&quot;keyword&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;@sum.sold&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Specify the &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; we expect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription.expressionResultType = .Integer32AttributeType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Append the description &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; our &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescriptions.append(expressionDescription)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Create&lt;/span&gt; an expression description &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; our ReturnedCount &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription = NSExpressionDescription()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Name&lt;/span&gt; the &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription.name = &lt;span class=&quot;string&quot;&gt;&quot;ReturnedCount&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Use&lt;/span&gt; an expression &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; specify what &lt;span class=&quot;keyword&quot;&gt;aggregate&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;action&lt;/span&gt; we want &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; take &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; which column. &lt;span class=&quot;keyword&quot;&gt;In&lt;/span&gt; this &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; the returned &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription.expression = NSExpression(&lt;span class=&quot;keyword&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;@sum.returned&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Specify the &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; we expect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescription.expressionResultType = .Integer32AttributeType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Append the description &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; our &lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;expressionDescriptions.append(expressionDescription)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;NSExpressionDescription&lt;/code&gt; 是用于表示那些抓取结果中实体中不存在的列名,比如我们这次用的聚合函数所计算的结果并不能在实体中找到对应的列,于是我们就得给它起个新名字,这就相当于 SQL 中的 &lt;code&gt;as&lt;/code&gt;,这里对应着 &lt;code&gt;NSExpressionDescription&lt;/code&gt; 的 &lt;code&gt;name&lt;/code&gt; 属性.而聚合函数表达式就需要用 &lt;code&gt;NSExpression&lt;/code&gt; 对象来表示,比如 &lt;code&gt;NSExpression(format: &amp;quot;@sum.returned&amp;quot;)&lt;/code&gt; 就是对”returned”这列求和.&lt;/p&gt;
&lt;p&gt;像本例中这样初始化 &lt;code&gt;NSExpression&lt;/code&gt; 需要对格式化语法较为熟悉(比如&lt;code&gt;&amp;quot;@sum.returned&amp;quot;&lt;/code&gt;),初学者建议看看官方的例子,使用容易理解的构造方法一步步拼凑成想要的结果:&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CoreData/Articles/cdFetching.html#//apple_ref/doc/uid/TP40002484-SW6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core Data Programming Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将以上这三个”列描述”依次添加到 &lt;code&gt;expressionDescriptions&lt;/code&gt; 数组中,最后要赋值给 &lt;code&gt;NSFetchRequest&lt;/code&gt; 的 &lt;code&gt;propertiesToFetch&lt;/code&gt; 属性:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Hand off our expression descriptions to the propertiesToFetch field. Expressed as strings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// these are [&quot;productLine&quot;, &quot;SoldCount&quot;, &quot;ReturnedCount&quot;] where productLine is the value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// we are grouping by.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;selector-class&quot;&gt;.propertiesToFetch&lt;/span&gt; = expressionDescriptions&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;propertiesToFetch&lt;/code&gt; 属性其实是个 &lt;code&gt;NSPropertyDescription&lt;/code&gt; 类型数组,能表示属性,一对一关系和表达式.既然是个大杂烩,&lt;code&gt;NSPropertyDescription&lt;/code&gt; 也就有一些子类:&lt;code&gt;NSAttributeDescription&lt;/code&gt;,&lt;code&gt;NSExpressionDescription&lt;/code&gt;,&lt;code&gt;NSFetchedPropertyDescription&lt;/code&gt;,&lt;code&gt;NSRelationshipDescription&lt;/code&gt;.我们这里用到的便是 &lt;code&gt;NSExpressionDescription&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;在设定 &lt;code&gt;propertiesToFetch&lt;/code&gt; 属性&lt;strong&gt;之前&lt;/strong&gt;必需要设定好 &lt;code&gt;NSFetchRequest&lt;/code&gt; 的 &lt;code&gt;entity&lt;/code&gt; 属性,否则会抛出 &lt;code&gt;NSInvalidArgumentException&lt;/code&gt; 类型的异常.并且只有当 &lt;code&gt;resultType&lt;/code&gt; 类型设为 &lt;code&gt;NSDictionaryResultType&lt;/code&gt; 时才生效:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Specify we want dictionaries to be returned&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request&lt;span class=&quot;selector-class&quot;&gt;.resultType&lt;/span&gt; = .DictionaryResultType&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终结果:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&quot;SoldCount&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;productLine&quot;&lt;/span&gt;: Bowler, &lt;span class=&quot;string&quot;&gt;&quot;ReturnedCount&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&quot;SoldCount&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;142&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;productLine&quot;&lt;/span&gt;: Stetson, &lt;span class=&quot;string&quot;&gt;&quot;ReturnedCount&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&quot;SoldCount&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;productLine&quot;&lt;/span&gt;: Top Hat, &lt;span class=&quot;string&quot;&gt;&quot;ReturnedCount&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;WWDC2015-Core-Data-的一些新特性&quot;&gt;&lt;a href=&quot;#WWDC2015-Core-Data-的一些新特性&quot; class=&quot;headerlink&quot; title=&quot;WWDC2015 Core Data 的一些新特性&quot;&gt;&lt;/a&gt;WWDC2015 Core Data 的一些新特性&lt;/h2&gt;&lt;p&gt;苹果号称有超过40万个 APP 使用 Core Data,并能让开发者少写50%~70%的代码.并在内存性能上强调卓越的内存拓展和主动式惰性加载,炫耀了它跟 UI 良好的绑定机制,还提供了几种多重写入的合并策略.然而这不能阻止开发者对 Core Data 的吐槽,毕竟建立于持久层之上的”object graph”还做不到像 SQL 那样面面俱到,于是今年针对 Core Data 新增的 API 更像是查缺补漏,并没有带来重大功能更新.&lt;/p&gt;
&lt;h3 id=&quot;NSManagedObject-新增-API&quot;&gt;&lt;a href=&quot;#NSManagedObject-新增-API&quot; class=&quot;headerlink&quot; title=&quot;NSManagedObject 新增 API&quot;&gt;&lt;/a&gt;NSManagedObject 新增 API&lt;/h3&gt;&lt;h4 id=&quot;hasPersistentChangedValues&quot;&gt;&lt;a href=&quot;#hasPersistentChangedValues&quot; class=&quot;headerlink&quot; title=&quot;hasPersistentChangedValues&quot;&gt;&lt;/a&gt;hasPersistentChangedValues&lt;/h4&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hasPersistentChangedValues: Bool &amp;#123; &lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用此属性可确定 &lt;code&gt;NSManagedObject&lt;/code&gt; 的值与 “persistent store” 是否相同.&lt;/p&gt;
&lt;h4 id=&quot;objectIDsForRelationshipNamed&quot;&gt;&lt;a href=&quot;#objectIDsForRelationshipNamed&quot; class=&quot;headerlink&quot; title=&quot;objectIDsForRelationshipNamed&quot;&gt;&lt;/a&gt;objectIDsForRelationshipNamed&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;objectIDsForRelationshipNamed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; key: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; [&lt;span class=&quot;type&quot;&gt;NSManagedObjectID&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;适用于大量的多对多关系.由于我们不想将整个关系网络加载到内存中,所以这个方法仅返回相关联的 ID.下面是一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;relations&lt;/span&gt; = person.objectIDsForRelationshipNamed(&lt;span class=&quot;string&quot;&gt;&quot;family&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fetchFamily&lt;/span&gt; = NSFetchRequest(entityName:&lt;span class=&quot;string&quot;&gt;&quot;Person&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetchFamily.&lt;span class=&quot;attr&quot;&gt;fetchBatchSize&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fetchFamily.&lt;span class=&quot;attr&quot;&gt;predicate&lt;/span&gt; = NSPredicate(format: &lt;span class=&quot;string&quot;&gt;&quot;self IN %@&quot;&lt;/span&gt;, relations)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;batchedRelations&lt;/span&gt; = managedObjectContext.executeFetchRequest(fetchFamily)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for relative &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; batchedRelations &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//work &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; relations &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; rows at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过给出的关系名称 “family” 来获取对应的 ID, 并每次遍历100行记录,实现了内存占用的可控性.&lt;/p&gt;
&lt;h3 id=&quot;NSManagedObjectContext-新增-API&quot;&gt;&lt;a href=&quot;#NSManagedObjectContext-新增-API&quot; class=&quot;headerlink&quot; title=&quot;NSManagedObjectContext 新增 API&quot;&gt;&lt;/a&gt;NSManagedObjectContext 新增 API&lt;/h3&gt;&lt;h4 id=&quot;refreshAllObjects&quot;&gt;&lt;a href=&quot;#refreshAllObjects&quot; class=&quot;headerlink&quot; title=&quot;refreshAllObjects&quot;&gt;&lt;/a&gt;refreshAllObjects&lt;/h4&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;refreshAllObjects&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;正如其名字所描述的那样,它的功能就是刷新 context 中所有对象,但会保留未保存的变更.相比&lt;code&gt;reset&lt;/code&gt; 方法不同的是它会依然保留 &lt;code&gt;NSManagedObject&lt;/code&gt; 对象的有效性,我们无需重新抓取任何对象.正因如此,它很适用于打破一些因遍历双向关系循环而产生的保留环.&lt;/p&gt;
&lt;h4 id=&quot;mergeChangesFromRemoteContextSave&quot;&gt;&lt;a href=&quot;#mergeChangesFromRemoteContextSave&quot; class=&quot;headerlink&quot; title=&quot;mergeChangesFromRemoteContextSave&quot;&gt;&lt;/a&gt;mergeChangesFromRemoteContextSave&lt;/h4&gt;&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; func mergeChangesFromRemoteContextSave(&lt;span class=&quot;title&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;changeNotificationData&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;NSObject&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;], &lt;span class=&quot;title&quot;&gt;intoContexts&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;contexts&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;NSManagedObjectContext&lt;/span&gt;])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 store 中使用多个 coordinator 时,这个方法将会从一个 coordinator 接受一个通知,并将其应用到另一个 coordinator 中的 context 上.这使得我们可以在所有 context 中存有最新的数据,Core Data 会维护好所有的 context.&lt;/p&gt;
&lt;h4 id=&quot;shouldDeleteInaccessibleFaults&quot;&gt;&lt;a href=&quot;#shouldDeleteInaccessibleFaults&quot; class=&quot;headerlink&quot; title=&quot;shouldDeleteInaccessibleFaults&quot;&gt;&lt;/a&gt;shouldDeleteInaccessibleFaults&lt;/h4&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; shouldDeleteInaccessibleFaults: Bool&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Core Data 偶尔会抛异常,但Core Data 不能加载故障, 因为它的主动式惰性加载对象使得内存中只保留对象图中的一部分.所以很有可能当我遍历关系时要试图回到磁盘上查找,但此时对象早已被删除了.于是 &lt;code&gt;shouldDeleteInaccessibleFaults&lt;/code&gt; 属性应运而生,默认值为 &lt;code&gt;YES&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;如果我们在某处遇到了故障,我们会将其标记为已删除.任何丢失的属性将会被设为&lt;code&gt;null&lt;/code&gt;,&lt;code&gt;nil&lt;/code&gt;或&lt;code&gt;0&lt;/code&gt;.这就使得我们的 app 继续运行,并认为发生故障的对象已被删除.这样程序就不会再崩溃.&lt;/p&gt;
&lt;h3 id=&quot;NSPersistentStoreCoordinator-新增-API&quot;&gt;&lt;a href=&quot;#NSPersistentStoreCoordinator-新增-API&quot; class=&quot;headerlink&quot; title=&quot;NSPersistentStoreCoordinator 新增 API&quot;&gt;&lt;/a&gt;NSPersistentStoreCoordinator 新增 API&lt;/h3&gt;&lt;p&gt;增加这两个新的 API 的原因是很多开发者绕过 Core Data 的 API 来直接操作底层数据库文件.因为&lt;code&gt;NSFileManager&lt;/code&gt; 和 POSIX 对数据库都不友好,并且如果此时文件的 open 连接没关闭的话会损坏文件.  &lt;/p&gt;
&lt;h4 id=&quot;destroyPersistentStoreAtURL&quot;&gt;&lt;a href=&quot;#destroyPersistentStoreAtURL&quot; class=&quot;headerlink&quot; title=&quot;destroyPersistentStoreAtURL&quot;&gt;&lt;/a&gt;destroyPersistentStoreAtURL&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;destroyPersistentStoreAtURL&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; url: NSURL, withType storeType: String, options options: [NSObject : AnyObject]?)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传入的选项与 &lt;code&gt;addPersistentStoreWithType&lt;/code&gt; 方法要一样,删除对应类型的 persistent store.&lt;/p&gt;
&lt;h4 id=&quot;replacePersistentStoreAtURL&quot;&gt;&lt;a href=&quot;#replacePersistentStoreAtURL&quot; class=&quot;headerlink&quot; title=&quot;replacePersistentStoreAtURL&quot;&gt;&lt;/a&gt;replacePersistentStoreAtURL&lt;/h4&gt;&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;replacePersistentStoreAtURL&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; destinationURL: NSURL, destinationOptions destinationOptions: [NSObject : AnyObject]?, withPersistentStoreFromURL sourceURL: NSURL, sourceOptions sourceOptions: [NSObject : AnyObject]?, storeType storeType: String)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;与上面的 destroy 一个套路,就是 replace 而已.如果目标位置不存在数据库,那么这个 replace 就相当于拷贝操作了.&lt;/p&gt;
&lt;h3 id=&quot;Unique-Constraints&quot;&gt;&lt;a href=&quot;#Unique-Constraints&quot; class=&quot;headerlink&quot; title=&quot;Unique Constraints&quot;&gt;&lt;/a&gt;Unique Constraints&lt;/h3&gt;&lt;p&gt;很多时候我们在创建一个对象之前会查看它是否已经存在,如果存在的话就会更新它,否则就创建对象.这很可能产生一个竞态条件,如果多线程同时执行下面这段代码, 很可能就创建了多个重复的对象:&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;managedObjectContext.performBlock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;createRequest&lt;/span&gt; = NSFetchRequest(entityName: &lt;span class=&quot;string&quot;&gt;&quot;Recipe&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	createRequest.&lt;span class=&quot;attr&quot;&gt;resultType&lt;/span&gt; = ManagedObjectIDResultType&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;predicate&lt;/span&gt; = NSPredicate(format: &lt;span class=&quot;string&quot;&gt;&quot;source = %@&quot;&lt;/span&gt;, source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;results&lt;/span&gt; = managedObjectContext.executeFetchRequest(createRequest)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (results.count) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//update it!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//create it!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在 Core Data 可以搞定这个事情了.我们设定属性的值唯一,类似于 SQL 中的 &lt;code&gt;unique&lt;/code&gt; 约束.诸如电子邮件,电话号, ISBN 等场景都适用此.同时别忘了 Core Data 的对象图中实体的继承关系,这里规定子类会从父类继承到具有 Unique 约束的属性,并可以将更多的属性设为 Unique.&lt;/p&gt;
&lt;p&gt;为实体设置 Unique 属性十分简单,只需要在 Xcode 中选中对应的实体,打开 “Data Model inspector” 就可以看到 “Constraints”, 点击加号添加就好:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150726-1@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Model-Caching&quot;&gt;&lt;a href=&quot;#Model-Caching&quot; class=&quot;headerlink&quot; title=&quot;Model Caching&quot;&gt;&lt;/a&gt;Model Caching&lt;/h3&gt;&lt;p&gt;这是个轻量级的数据版本自动迁移解决方案.它会缓存旧版本数据中已创建的 &lt;code&gt;NSManagedObject&lt;/code&gt; 对象会被缓存到 store 中,并被迁移到合适的 store 中.&lt;/p&gt;
&lt;h3 id=&quot;Generated-Subclasses&quot;&gt;&lt;a href=&quot;#Generated-Subclasses&quot; class=&quot;headerlink&quot; title=&quot;Generated Subclasses&quot;&gt;&lt;/a&gt;Generated Subclasses&lt;/h3&gt;&lt;p&gt;在 Xcode7 中,自动创建 &lt;code&gt;NSManagedObject&lt;/code&gt; 子类时将不再在对应实体子类文件中自动填充模板代码,而是同时创建Category(Objective-C文件) 或 extension(Swift文件),并将模板代码自动填写进去.这样带来的好处是将我们自己写的代码跟 Xcode 生成的模板代码分开,更易于更新维护.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这其实是一篇 WWDC 2015 Session 220 的学习笔记,顺便整理了下 Core Data 批量操作和聚合操作的小技巧.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Core Data" scheme="http://yulingtianxia.com/tags/Core-Data/"/>
    
  </entry>
  
  <entry>
    <title>SpriteKit在iOS9和OSX10.11中的新特性</title>
    <link href="http://yulingtianxia.com/blog/2015/06/12/SpriteKit%E5%9C%A8iOS9%E5%92%8COSX10-11%E4%B8%AD%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yulingtianxia.com/blog/2015/06/12/SpriteKit在iOS9和OSX10-11中的新特性/</id>
    <published>2015-06-12T08:21:30.000Z</published>
    <updated>2016-05-11T14:32:38.000Z</updated>
    
    <content type="html">&lt;p&gt;这是一篇 WWDC2015 Session 604 的学习笔记,在看 WWDC2014 的 Session 时也总结过一篇&lt;a href=&quot;http://yulingtianxia.com/blog/2014/08/08/spritekitzai-ios8he-osx10-dot-10zhong-de-xin-te-xing/&quot;&gt;SpriteKit在iOS8和OSX10.10中的新特性&lt;/a&gt;,从 iOS7 发布 SpriteKit 以来我一直利用课余时间做些小游戏,感受着 SpriteKit 的一路成长.这次也在第一时间总结了下 今年 WWDC SpriteKit 的新特性.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Viewport-和-SKCameraNode&quot;&gt;&lt;a href=&quot;#Viewport-和-SKCameraNode&quot; class=&quot;headerlink&quot; title=&quot;Viewport 和 SKCameraNode&quot;&gt;&lt;/a&gt;Viewport 和 SKCameraNode&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-1@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;viewport&quot;&gt;  &lt;/p&gt;
&lt;p&gt;Viewport(视口) 指的是当前场景中哪些部分是可见的.也就是说场景很大时,我们要计算哪块区域是要呈现给玩家的,这块区域是可以移动的.就像是摄像头跟着玩家在一张大地图中跑一样,这些工作现在可以交给 SpriteKit 了, &lt;code&gt;SKCameraNode&lt;/code&gt; 就是干这个的.有了它就能确定哪些部分是可见的.它相当于viewport的中心,所以我们可以移动场景的摄像头,而不用像以前那样移动整个场景. SpriteKit 终于也能像其他游戏框架一样移动摄像头啦!&lt;code&gt;SKScene&lt;/code&gt; 中有个 &lt;code&gt;camera&lt;/code&gt; 属性,类型就是 &lt;code&gt;SKCameraNode&lt;/code&gt;.所以我们可以给场景任意一个选择合适的摄像头.更令人欣喜的是 &lt;code&gt;SKCameraNode&lt;/code&gt; 也是个 &lt;code&gt;SKNode&lt;/code&gt;,所以我们可以给摄像头加上动作,约束,旋转和缩放.(这里自行脑补长镜头,视角跟踪,天旋地转,鼠标滚轮)  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-2@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;SKCameraNode&quot;&gt;  &lt;/p&gt;
&lt;p&gt;其实现原理大致是将&lt;code&gt;SKCameraNode&lt;/code&gt;的 &lt;code&gt;xScale&lt;/code&gt;, &lt;code&gt;yScale&lt;/code&gt;, 和 &lt;code&gt;zRotation&lt;/code&gt; 对场景所有节点做逆运算.并且只渲染 viewport 的那部分场景.  &lt;/p&gt;
&lt;p&gt;其实摄像头早就该加了,这是专业的游戏框架不可或缺的元素.  &lt;/p&gt;
&lt;h2 id=&quot;SKAudioNode&quot;&gt;&lt;a href=&quot;#SKAudioNode&quot; class=&quot;headerlink&quot; title=&quot;SKAudioNode&quot;&gt;&lt;/a&gt;SKAudioNode&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-3@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;SKAudioNode&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SKAudioNode&lt;/code&gt; 的加入更是令人激动.我们可以在游戏场景中的某个位置加入声源,让玩家身临其境.此前无论你的音效再怎么狂拽屌炸天,都只能是背景音乐的效果.这次终于能发挥下我们的双耳效应了.想象下在游戏中一辆 F1 赛车从你身边飚过的声音.然而这本身就是游戏框架的标配, SpriteKit 这次只是努力追赶而已.  &lt;/p&gt;
&lt;h2 id=&quot;引用与实例化&quot;&gt;&lt;a href=&quot;#引用与实例化&quot; class=&quot;headerlink&quot; title=&quot;引用与实例化&quot;&gt;&lt;/a&gt;引用与实例化&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-6@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;引用与实例化&quot;&gt;  &lt;/p&gt;
&lt;p&gt;简单来说就是将动作和节点封装成实例,这样可以在其他地方引用它们,以达到组件重用的效果.  &lt;/p&gt;
&lt;h3 id=&quot;SKReferenceNode&quot;&gt;&lt;a href=&quot;#SKReferenceNode&quot; class=&quot;headerlink&quot; title=&quot;SKReferenceNode&quot;&gt;&lt;/a&gt;SKReferenceNode&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-4@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;SKReferenceNode&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SKReferenceNode&lt;/code&gt; 使我们能重复利用&lt;code&gt;SKNode&lt;/code&gt;.在 Xcode7 场景编辑器中直接将想要重用的 sks文件拖拽到场景中, Xcode7 会自动为我们创建 &lt;code&gt;SKReferenceNode&lt;/code&gt;.我们也可以在代码中使用 URL 或文件名手动创建一个 &lt;code&gt;SKReferenceNode&lt;/code&gt; 对象.因为这里是引用, Xcode7 会从 Bundle 中加载最新版本的文件.  &lt;/p&gt;
&lt;p&gt;而在 Xcode6 的场景编辑器中, sks 文件会把它使用的素材都拷贝一份,当我想更改Images.xcassets中素材的名字或内容的时候, sks 文件中的素材并没有发生变化.一开始我很想抓狂,直达后来我找到了修复的方法:在 Finder 中找到 sks 文件,将其拖拽到工程外面的目录并打开,这里最好多打开关闭几次,然后再将其拖拽回原来在项目工程中的位置,然后回到 Xcode6 中查看是否成功.如果这样还不行,就在Xcode6 中删掉 sks 文件并重新导入试试.    &lt;/p&gt;
&lt;p&gt;不得不吐槽下之前的场景编辑器,竟然不能重复使用一些组件,甚至不能引用我做的粒子效果 sks 文件到场景中.但这本来应该是一个游戏场景编辑器本该有的功能啊!  &lt;/p&gt;
&lt;h3 id=&quot;Named-SKActions&quot;&gt;&lt;a href=&quot;#Named-SKActions&quot; class=&quot;headerlink&quot; title=&quot;Named SKActions&quot;&gt;&lt;/a&gt;Named SKActions&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-5@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;Named SKActions&quot;&gt;  &lt;/p&gt;
&lt;p&gt;嗯动作(Action)也能以文件的方式共享了.我们可以创建一个sks 文件用于保存自定义动作. Xcode7 为我们提供了一些基本动作对象,可以拖拽到编辑器中:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-7@2x.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;我们可以用下面这些 &lt;code&gt;SKAction&lt;/code&gt; 新加入的 API 来从 sks 文件中加载自定义动作:  &lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;actionNamed:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;actionNamed:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;actionNamed:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;fromURL:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;actionNamed:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;fromURL:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;duration:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此外,这回 &lt;code&gt;SKAction&lt;/code&gt; 还增添了一些新动作:  &lt;/p&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;play //用于 `SKAudioNode` 的播放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pause //用于 `SKAudioNode` 的暂停&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;changePlaybackRateTo:duration:&lt;/span&gt; //调节 `SKAudioNode` 的播放速率&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;changeVolumeTo:duration:&lt;/span&gt; //调节 `SKAudioNode` 的播放音量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;animateWithNormalTextures:&lt;/span&gt; //使 `SKSpriteNode` 的法线贴图按照给定贴图数组的顺序动起来&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在之前的动作中只提供了贴图切换的动作,而没有法线贴图切换的动作,这就让光照效果只能应用在贴图固定的&lt;code&gt;SKSpriteNode&lt;/code&gt;中.这回我们可以让法线贴图和跟着动起来了!    &lt;/p&gt;
&lt;h2 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-8@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;Metal&quot;&gt;  &lt;/p&gt;
&lt;p&gt;苹果总不会忘记夸赞自己在底层优化所作出的努力. SpriteKit 会自动使用 Metal 技术,将其 CPU 使用率降低,性能更赞之类的. 最关键的是这些事苹果已经帮你做好了,程序员们微笑接受.因为这种优化不需要我们重新编译项目,就能在支持 Metal 的设备上自动使用它.  &lt;/p&gt;
&lt;p&gt;受益于 Swift 类型安全的提升, Objective-C 泛型的加入,还有对 nullability 的改进, SpriteKit 的 API 也跟着做出了一系列优化调整.无论是使用 Swift 还是 Objective-C, 我们都能玩转 SpriteKit.  &lt;/p&gt;
&lt;h2 id=&quot;SceneKit&quot;&gt;&lt;a href=&quot;#SceneKit&quot; class=&quot;headerlink&quot; title=&quot;SceneKit&quot;&gt;&lt;/a&gt;SceneKit&lt;/h2&gt;&lt;p&gt;SpriteKit 和 SceneKit 这对儿难兄难弟虽然一直不受游戏开发者的宠爱,但它们总是喜欢相互搞基.可以在 SceneKit 中渲染 SpriteKit 的内容,反之亦然.今年搞基的方式又多了:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以在 SceneKit 中使用 &lt;code&gt;SKTransition&lt;/code&gt; 进行转场,各种转场效果随你挑.&lt;/li&gt;
&lt;li&gt;SceneKit 也支持 Metal 了,可以一起躺在 Metal 上面搞基了.&lt;/li&gt;
&lt;li&gt;要么都在 Metal 上搞基,要么都在 OpenGL 上开搞,自动匹配相同的”大床”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;GameplayKit&quot;&gt;&lt;a href=&quot;#GameplayKit&quot; class=&quot;headerlink&quot; title=&quot;GameplayKit&quot;&gt;&lt;/a&gt;GameplayKit&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-9@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;GameplayKit&quot;&gt;  &lt;/p&gt;
&lt;p&gt;GameplayKit 是个新推出的框架,它能帮我们构建一些游戏中的逻辑,比如状态机, AI 和路径查找.我本已经迫不及待地想使用它了,可惜在 iOS9 beta 中我用 SpriteKit 写的游戏卡顿严重,我想还是再等等吧.&lt;/p&gt;
&lt;h2 id=&quot;SpriteKit工具&quot;&gt;&lt;a href=&quot;#SpriteKit工具&quot; class=&quot;headerlink&quot; title=&quot;SpriteKit工具&quot;&gt;&lt;/a&gt;SpriteKit工具&lt;/h2&gt;&lt;h3 id=&quot;Texture-atlas&quot;&gt;&lt;a href=&quot;#Texture-atlas&quot; class=&quot;headerlink&quot; title=&quot;Texture atlas&quot;&gt;&lt;/a&gt;Texture atlas&lt;/h3&gt;&lt;p&gt;如果你有游戏编程的经验，那么你一定对图片拼合的概念很熟悉，图片能够在屏幕上独立地变更位置。图片拼合后可以打包整合到一张大图上一次性载入。相比多次载入不同的图片，这样做能够带来很多方面的好处：内存使用，载入时间，渲染性能等等.&lt;/p&gt;
&lt;p&gt;2D游戏引擎如Cocos2D使用了拼合技术，它使用OpenGL来显示图片。  &lt;/p&gt;
&lt;p&gt;但有了 Xcode ,我们将多个图片加入图册中就可以了,无需自己手动创建一张大的贴图,并计算其中每部分的边界.这的确很省事,还记得游戏设计概论课的实验上,我们的游戏素材都需要手动将人物的好几部分拼合到一张大图上,当人物奔跑时就在大图上切换edge并读取. 做过游戏的人都体会过这一点,现在 Xcode 帮我们做了.这项功能之前就有了,今年拿出来忽悠一遍只是因为他们做得更好了.  &lt;/p&gt;
&lt;h3 id=&quot;Texture-atlas-in-Asset-Catalog&quot;&gt;&lt;a href=&quot;#Texture-atlas-in-Asset-Catalog&quot; class=&quot;headerlink&quot; title=&quot;Texture atlas in Asset Catalog&quot;&gt;&lt;/a&gt;Texture atlas in Asset Catalog&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-10@2x.png&quot; alt=&quot;Texture atlas in Asset Catalog&quot;&gt;  &lt;/p&gt;
&lt;p&gt;好处都有啥:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以直接在界面上操作来区分不同设备不同分辨率的图片.&lt;/li&gt;
&lt;li&gt;通过 App thinning 来使游戏体积更小.因为用户从 AppStore 下载游戏时,只会下载他们设备所对应的图片.节省时间和空间.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Texture-atlas-with-On-Demand-Resources&quot;&gt;&lt;a href=&quot;#Texture-atlas-with-On-Demand-Resources&quot; class=&quot;headerlink&quot; title=&quot;Texture atlas with On Demand Resources&quot;&gt;&lt;/a&gt;Texture atlas with On Demand Resources&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-11@2x.png&quot; alt=&quot;Texture atlas with On Demand Resources&quot;&gt;  &lt;/p&gt;
&lt;p&gt;On Demand Resources 之前的 Session 提到过,它是属于 App thinning 中的一部分.通过给图片打上 On Demand Resources 标签,并可以通过网络在后台下载对应标签的图片.比如在游戏中快要进入到第一关,可以在后台使用”Level1”标签获取对应的那些图片.这样游戏的体积也会大大缩小,因为很多图片只是在即将用到的时候被下载下来.一个图片有多个标签时,只需要使用其中任一个标签就可以将其下载.  &lt;/p&gt;
&lt;h3 id=&quot;粒子编辑器&quot;&gt;&lt;a href=&quot;#粒子编辑器&quot; class=&quot;headerlink&quot; title=&quot;粒子编辑器&quot;&gt;&lt;/a&gt;粒子编辑器&lt;/h3&gt;&lt;p&gt;又是老把戏重新炫耀,可以在界面上实时修改参数(据说49个呢)来观察效果,无需写代码无需重新编译,嗯.  &lt;/p&gt;
&lt;h3 id=&quot;Xcode-Quicklook&quot;&gt;&lt;a href=&quot;#Xcode-Quicklook&quot; class=&quot;headerlink&quot; title=&quot;Xcode Quicklook&quot;&gt;&lt;/a&gt;Xcode Quicklook&lt;/h3&gt;&lt;p&gt;继续扯老把戏,比如在 Playground 里面能显示 SpriteKit 程序的效果图.这早就可以了好么?去年还拿这个做例子呢!气球那个!还有在 debug 时显示节点当前的缩略图,我记得这个去年也早就有了:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-12@2x.png&quot; alt=&quot;Quicklook&quot;&gt;  &lt;/p&gt;
&lt;h3 id=&quot;2D-编辑器&quot;&gt;&lt;a href=&quot;#2D-编辑器&quot; class=&quot;headerlink&quot; title=&quot;2D 编辑器&quot;&gt;&lt;/a&gt;2D 编辑器&lt;/h3&gt;&lt;p&gt;新的编辑器可以模拟和预览场景了,会动了.之前 Xcode6 已经支持编辑粒子效果和整个游戏场景,今年 Xcode7 还加入了动画和动作效果.想想一行代码都不用写就能做出会动的场景,越来越靠近 Unity 等专业的游戏平台框架了.(凭我的经验肯定这肯定会让 Mac 煎鸡蛋,因为在之前仅是静态场景下模拟光照就已经发热有些严重了,更别提模拟物理计算让场景内容动起来了)  &lt;/p&gt;
&lt;h3 id=&quot;新的附加部件&quot;&gt;&lt;a href=&quot;#新的附加部件&quot; class=&quot;headerlink&quot; title=&quot;新的附加部件&quot;&gt;&lt;/a&gt;新的附加部件&lt;/h3&gt;&lt;p&gt;之前提到的 SKCameraNode, SKAudioNode 和 SKReferenceNode,Xcode7 都是给予激情支持的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-14@2x.png&quot; alt=&quot;&quot;&gt;  &lt;/p&gt;
&lt;p&gt;这样我们就可以在 Xcode7 中预览时感受摄像头的移动缩放,感受声音由远及近身临其境,当然这在 Unity 中早就有了, SpriteKit 一直在努力追赶.  &lt;/p&gt;
&lt;p&gt;让强迫症激动的是场景编辑器终于支持将 Node 设为自定义类了.这真是太赞了!  &lt;/p&gt;
&lt;h3 id=&quot;动作编辑器&quot;&gt;&lt;a href=&quot;#动作编辑器&quot; class=&quot;headerlink&quot; title=&quot;动作编辑器&quot;&gt;&lt;/a&gt;动作编辑器&lt;/h3&gt;&lt;p&gt;最让人激动的是我们可以在动作编辑器中像做视频一样基于时间线构建出复杂的交互动画!支持 2D 和 3D, 并能实时预览:  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQ20150612-15@2x.png?imageView2/2/w/800/q/75|watermark/2/text/eXVsaW5ndGlhbnhpYQ==/font/Y29taWMgc2FucyBtcw==/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;Action&quot;&gt;  &lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;老实说作为一个游戏引擎, SpriteKit 这次带来的新功能大部分依然是其他各大游戏引擎早就有的标配,但苹果最吸引人的地方就是它学得很快,每次总会给大家带来新的变化,会让它的粉丝们看到希望. SpriteKit 和 SceneKit 这两个苹果自家的游戏引擎一直不温不火,一是不够成熟,二是不能跨平台,但我相信苹果每年都会给它们带来更新更炫的功能,让开发者接受它们.  &lt;/p&gt;
&lt;p&gt;这次没来得及做 Demo, 但等到 iOS9 稳定后,我肯定会继续在&lt;a href=&quot;http://coloratom.yulingtianxia.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ColorAtom&lt;/a&gt; 和 &lt;a href=&quot;http://spiral.yulingtianxia.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spiral&lt;/a&gt; 上分别用 Objective-C 和 Swift 来写一些新的游戏模式作为 SpriteKit 新特性的演示 Demo.  &lt;/p&gt;
&lt;p&gt;最后, Apple 给我们提供了一个 SpriteKit 和 GameplayKit 的 &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/samplecode/DemoBots/Introduction/Intro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇 WWDC2015 Session 604 的学习笔记,在看 WWDC2014 的 Session 时也总结过一篇&lt;a href=&quot;http://yulingtianxia.com/blog/2014/08/08/spritekitzai-ios8he-osx10-dot-10zhong-de-xin-te-xing/&quot;&gt;SpriteKit在iOS8和OSX10.10中的新特性&lt;/a&gt;,从 iOS7 发布 SpriteKit 以来我一直利用课余时间做些小游戏,感受着 SpriteKit 的一路成长.这次也在第一时间总结了下 今年 WWDC SpriteKit 的新特性.&lt;br&gt;
    
    </summary>
    
    
      <category term="SpriteKit" scheme="http://yulingtianxia.com/tags/SpriteKit/"/>
    
  </entry>
  
</feed>
