<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yulingtianxia&#39;s blog</title>
  <subtitle>玉令天下的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yulingtianxia.com/"/>
  <updated>2017-11-17T17:38:39.107Z</updated>
  <id>http://yulingtianxia.com/</id>
  
  <author>
    <name>杨萧玉</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Objective-C Message Throttle and Debounce</title>
    <link href="http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/"/>
    <id>http://yulingtianxia.com/blog/2017/11/05/Objective-C-Message-Throttle-and-Debounce/</id>
    <published>2017-11-04T16:39:44.000Z</published>
    <updated>2017-11-17T17:38:39.107Z</updated>
    
    <content type="html">&lt;p&gt;在实际项目中经常会遇到因方法调用频繁而导致的 UI 闪动问题和性能问题，这时用某种策略需要控制调用频率，以达到节流和防抖的效果。&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 是我实现的一个 Objective-C 消息节流和防抖的轻量级工具库，使用便捷且业务无关。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;读懂本文的前提是对 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 和 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/&quot;&gt;Objective-C 消息发送与转发机制原理&lt;/a&gt;有一定了解。&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;函数节流（throttle）是一个很基础的概念，常常跟函数防抖（debounce）作比较。在处理连续事件时比较常用，可以通过&lt;a href=&quot;http://demo.nimius.net/debounce_throttle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个 Demo&lt;/a&gt; 感受下二者区别。在 JS 中有较多的实现和应用案例，可以查看&lt;a href=&quot;https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt; 更直接地了解下。&lt;/p&gt;
&lt;p&gt;虽然在开发 iOS 和 macOS 的时候不用过多关心连续事件的采样问题，但有时也需要避免某个方法被频繁调用。比如一个很复杂的页面可能会频繁请求网络，每次回包都需更新界面，这时就需要防抖，控制刷新频率。&lt;/p&gt;
&lt;p&gt;在 Objective-C 中，方法调用其实就是消息发送，所以我改了个名字，叫消息节流和防抖。&lt;/p&gt;
&lt;h2 id=&quot;使用姿势&quot;&gt;&lt;a href=&quot;#使用姿势&quot; class=&quot;headerlink&quot; title=&quot;使用姿势&quot;&gt;&lt;/a&gt;使用姿势&lt;/h2&gt;&lt;p&gt;假如我创建了一个 &lt;code&gt;Stub&lt;/code&gt; 类的实例 &lt;code&gt;s&lt;/code&gt;，我想限制它调用 &lt;code&gt;foo:&lt;/code&gt; 方法的频率。先要创建并配置一个 &lt;code&gt;MTRule&lt;/code&gt;，并将规则应用到 &lt;code&gt;MTEngine&lt;/code&gt; 单例中：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Stub *s = [Stub &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MTRule *rule = [MTRule &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rule.target = s; &lt;span class=&quot;comment&quot;&gt;// You can also assign `Stub.class` or `mt_metaClass(Stub.class)`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rule.selector = &lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rule.durationThreshold = &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[MTEngine.defaultEngine &lt;span class=&quot;string&quot;&gt;applyRule:&lt;/span&gt;rule];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;target&lt;/code&gt; 可以是一个实例对象，也可以是一个类或元类。这样可以更灵活地控制限制策略，既可以只控制某个对象的消息发送频率，也可以控制某个类的实例方法和类方法的频率。当然，规则的 &lt;code&gt;target&lt;/code&gt; 为实例对象的优先级比类更高，也不会发生冲突。&lt;/p&gt;
&lt;p&gt;当然还有更简单的用法，跟上面那段代码作用相同：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[s &lt;span class=&quot;string&quot;&gt;limitSelector:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;foo:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;oncePerDuration:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// returns MTRule instance&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;无论是节流还是防抖，都需要设定一个时间 &lt;code&gt;durationThreshold&lt;/code&gt; 阈值来限制频率，都意味着方法在最后会延迟调用。&lt;code&gt;MTRule&lt;/code&gt; 默认的模式是 &lt;code&gt;MTPerformModeDebounce&lt;/code&gt;，也就是防抖模式，需要等消息不再连续频繁发送后才执行。&lt;code&gt;MTPerformModeLast&lt;/code&gt; 和 &lt;code&gt;MTPerformModeFirstly&lt;/code&gt; 对应着节流模式，也就是控制一定时间内只执行一次。区别在于前者执行的是这段时间内最后发送的消息，后者执行第一次发送的消息。&lt;/p&gt;
&lt;p&gt;比如我想要控制界面上某个 Label 内容的更新频率，给用户更好的体验，这时候很适合使用 &lt;code&gt;MTPerformModeLast&lt;/code&gt; 模式：&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.mode = MTPerformModeLast;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然所有规则都是可以动态调整的，也就是在应用规则以后，依然可以改变 &lt;code&gt;MTRule&lt;/code&gt; 对象中各项配置，并会在下次消息发送时生效。如果调皮地将 &lt;code&gt;durationThreshold&lt;/code&gt; 改成非正数，那么等同于立即执行方法，不会限制频率。&lt;/p&gt;
&lt;p&gt;当使用 &lt;code&gt;MTPerformModeDebounce&lt;/code&gt; 和 &lt;code&gt;MTPerformModeLast&lt;/code&gt; 模式的时候，因为执行消息会有延迟，可以指定执行消息的队列 &lt;code&gt;messageQueue&lt;/code&gt;，默认为主队列。&lt;/p&gt;
&lt;p&gt;当想要废除某条规则时，使用一行代码即可：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[MTEngine.defaultEngine discardRule:rule]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应用和废除规则都是线程安全的。&lt;/p&gt;
&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;p&gt;参照 &lt;a href=&quot;https://github.com/steipete/Aspects&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Aspects&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/bang590/JSPatch&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSPatch&lt;/a&gt; 中 Hook 的原理，将限制频率逻辑嵌入消息转发流程中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给类添加一个新的方法 &lt;code&gt;fixed_selector&lt;/code&gt;，对应实现为 &lt;code&gt;rule.selector&lt;/code&gt; 的 &lt;code&gt;IMP&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;利用 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/&quot;&gt;Objective-C runtime 消息转发机制&lt;/a&gt;，将 &lt;code&gt;rule.selector&lt;/code&gt; 对应的 &lt;code&gt;IMP&lt;/code&gt; 改成 &lt;code&gt;_objc_msgForward&lt;/code&gt; 从而触发调用 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;forwardInvocation:&lt;/code&gt; 的实现替换为自己实现的 &lt;code&gt;IMP&lt;/code&gt;，并在自己实现的逻辑中将 &lt;code&gt;invocation.selector&lt;/code&gt; 设为 &lt;code&gt;fixed_selector&lt;/code&gt;。并限制 &lt;code&gt;[invocation invoke]&lt;/code&gt; 的调用频率。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种做法的缺陷是如果同时 hook 了基类和子类的同一个方法，且子类调用了基类的方法，就会导致循环调用。因为调用 &lt;code&gt;super&lt;/code&gt; 方法时，传入的 &lt;code&gt;target&lt;/code&gt; 还是 &lt;code&gt;self&lt;/code&gt; 对象，导致调用了子类的方法。好在这里并不允许同时 hook 一条继承链上的两个类，因为子类和基类限制频率的规则会相互干扰，导致不易发现的 bug。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 从设计上使用 &lt;code&gt;MTEngine&lt;/code&gt; 单例这种中心化的的方式来管理所有规则。Aspects 是将 hook 的上下文插入到对应的 &lt;code&gt;target&lt;/code&gt; 中，这样的好处是需要暴露的接口较少。而 &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MessageThrottle&lt;/a&gt; 需要提供当前所有的规则给使用方。因为方法调用频率的限制会影响其上游代码和下游代码的运行频率，所以中心化管理的做法很有必要。&lt;/p&gt;
&lt;p&gt;由于配置规则的内容较多，如果使用逐个传参的方式，方法名会很长。所以这里用 &lt;code&gt;MTRule&lt;/code&gt; 类封装了规则的上下文，并使用 &lt;code&gt;applyRule:&lt;/code&gt; 和 &lt;code&gt;discardRule:&lt;/code&gt; 方法应用和废除规则。&lt;/p&gt;
&lt;h3 id=&quot;管理-MTRule&quot;&gt;&lt;a href=&quot;#管理-MTRule&quot; class=&quot;headerlink&quot; title=&quot;管理 MTRule&quot;&gt;&lt;/a&gt;管理 &lt;code&gt;MTRule&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;MTEngine&lt;/code&gt; 内部使用键值对存取 &lt;code&gt;MTRule&lt;/code&gt;，这里使用 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 的组合值作为 key。这里只要保证唯一性即可区分不同的规则，格式不固定：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * mt_methodDescription(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; target, SEL selector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *selectorName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (object_isClass(target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *className = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%@ [%@ %@]&quot;&lt;/span&gt;, class_isMetaClass(target) ? &lt;span class=&quot;string&quot;&gt;@&quot;+&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;@&quot;-&quot;&lt;/span&gt;, className, selectorName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;[%p %@]&quot;&lt;/span&gt;, target, selectorName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在应用和废除规则的时候，需要检查规则合法性。这里只是简单检查下库中涉及的类和方法，一些内存管理和runtime 的方法并没有做限制，毕竟用户想作死我也管不着：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; mt_checkRuleValid(MTRule *rule)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rule.target &amp;amp;&amp;amp; rule.selector &amp;amp;&amp;amp; rule.durationThreshold &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *selectorName = &lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(rule.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([selectorName isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;forwardInvocation:&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class cls;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (object_isClass(rule.target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cls = rule.target;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cls = object_getClass(rule.target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *className = &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;(cls);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([className isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;MTRule&quot;&lt;/span&gt;] || [className isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;MTEngine&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;处理-NSInvocation&quot;&gt;&lt;a href=&quot;#处理-NSInvocation&quot; class=&quot;headerlink&quot; title=&quot;处理 NSInvocation&quot;&gt;&lt;/a&gt;处理 &lt;code&gt;NSInvocation&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在进入到消息转发流程调用 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法时会进入到自定义的处理逻辑中，然后决定是否执行 &lt;code&gt;[invocation invoke]&lt;/code&gt;。之前已经将原始 &lt;code&gt;selector&lt;/code&gt; 的 IMP 替换成了 &lt;code&gt;fixedSelector&lt;/code&gt;，所以调用 &lt;code&gt;[invocation invoke]&lt;/code&gt; 之前需要调用 &lt;code&gt;invocation.selector = fixedSelector&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面的函数就是处理 &lt;code&gt;NSInvocation&lt;/code&gt; 对象的逻辑。先用 &lt;code&gt;target&lt;/code&gt; 和 &lt;code&gt;selector&lt;/code&gt; 获取 &lt;code&gt;MTRule&lt;/code&gt; 对象，进而根据不同的 &lt;code&gt;mode&lt;/code&gt; 采取不同的策略。如果 &lt;code&gt;durationThreshold&lt;/code&gt; 非正数就立即执行方法。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; invocation.selector = fixedSelector(&lt;span class=&quot;built_in&quot;&gt;NSInvocation&lt;/span&gt; *invocation, SEL fixedSelector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodDescriptionForInstance = mt_methodDescription(invocation.target, invocation.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *methodDescriptionForClass = mt_methodDescription(object_getClass(invocation.target), invocation.selector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MTRule *rule = MTEngine.defaultEngine.rules[methodDescriptionForInstance];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!rule) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rule = MTEngine.defaultEngine.rules[methodDescriptionForClass];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (rule.durationThreshold &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation setSelector:fixedSelector];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; now = [[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date] timeIntervalSince1970];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (rule.mode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MTPerformModeFirstly:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MTPerformModeLast:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; MTPerformModeDebounce:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码省略了不同 &lt;code&gt;mode&lt;/code&gt; 的处理逻辑，下面会逐个讲解。&lt;/p&gt;
&lt;h4 id=&quot;MTPerformModeFirstly&quot;&gt;&lt;a href=&quot;#MTPerformModeFirstly&quot; class=&quot;headerlink&quot; title=&quot;MTPerformModeFirstly&quot;&gt;&lt;/a&gt;&lt;code&gt;MTPerformModeFirstly&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MTModePerformFirstly&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start                                                                end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                           durationThreshold                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@-------------------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@---------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------------&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                         |          |               |          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;perform immediately       ignore     ignore          ignore&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最简单粗暴的实现方式，忽略第一次发送消息之后 &lt;code&gt;durationThreshold&lt;/code&gt; 时间段内的所有消息。&lt;/p&gt;
&lt;figure class=&quot;highlight inform7&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (now - &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest &amp;gt; &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	invocation.selector = fixedSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;[invocation invoke]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;MTPerformModeLast&quot;&gt;&lt;a href=&quot;#MTPerformModeLast&quot; class=&quot;headerlink&quot; title=&quot;MTPerformModeLast&quot;&gt;&lt;/a&gt;&lt;code&gt;MTPerformModeLast&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MTModePerformLast&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start                                                                end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                           durationThreshold                          |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@-------------------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@---------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------------&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                         |          |               |          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignore                    ignore     ignore          will perform at end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;durationThreshold&lt;/code&gt; 时间内不断更新 &lt;code&gt;lastInvocation&lt;/code&gt; 的值，并在达到阈值 &lt;code&gt;durationThreshold&lt;/code&gt; 后执行 &lt;code&gt;[lastInvocation invoke]&lt;/code&gt;。这样保证了执行的是最后一次发送的消息。需要注意的是，&lt;code&gt;NSInvocation&lt;/code&gt; 对象默认不会持有参数，在异步延迟执行 &lt;code&gt;invoke&lt;/code&gt; 的时候参数可能已经被释放了，进而野指针 crash。所以需要调用 &lt;code&gt;retainArguments&lt;/code&gt; 方法提前持有参数，防止之后被释放掉。如果实际传入的参数与参数类型不符，可能导致 &lt;code&gt;retainArguments&lt;/code&gt; 方法 crash。我曾想过将参数列表保存到一个 &lt;code&gt;NSArray&lt;/code&gt; 里，然后放到 &lt;code&gt;MTRule&lt;/code&gt; 中，这样可以对参数类型做判断，避免 crash，也顺便持有了参数列表。但发现需要覆盖的类型太多，工作量和风险更多。我把这个半成品代码放在了 GitHubGist 上: &lt;a href=&quot;https://gist.github.com/yulingtianxia/1518fc7604ed65aa4ca98abdeee974e1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ConvertInvocationArguments.m&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if (now - &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest &amp;gt; &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastTimeRequest = now;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold * NSEC_PER_SEC)), &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.messageQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	invocation.selector = fixedSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = invocation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation retainArguments];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;MTPerformModeDebounce&quot;&gt;&lt;a href=&quot;#MTPerformModeDebounce&quot; class=&quot;headerlink&quot; title=&quot;MTPerformModeDebounce&quot;&gt;&lt;/a&gt;&lt;code&gt;MTPerformModeDebounce&lt;/code&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;MTModePerformDebounce&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;start                                        end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|           durationThreshold(old)             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@----------------------&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;@----------------------&lt;/span&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|                      |                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ignore                 will perform at end of new duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |---------------------------------------------&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       |           durationThreshold(new)             |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       start                                        end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;虽然流程看上去复杂但其实实现起来也很简单。每次发送消息完再过 &lt;code&gt;durationThreshold&lt;/code&gt; 时间后，检查下 &lt;code&gt;lastInvocation&lt;/code&gt; 有没有变化。如果无变化，则说明这段时间内没有新的消息发送，则可以执行 &lt;code&gt;lastInvocation&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invocation.selector = fixedSelector;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = invocation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation retainArguments];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.durationThreshold * NSEC_PER_SEC)), &lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.messageQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation == invocation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation invoke];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;rule&lt;/span&gt;.lastInvocation = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;规则的应用与废除&quot;&gt;&lt;a href=&quot;#规则的应用与废除&quot; class=&quot;headerlink&quot; title=&quot;规则的应用与废除&quot;&gt;&lt;/a&gt;规则的应用与废除&lt;/h3&gt;&lt;p&gt;在真正应用规则之前，需要检查下规则合法性，然后检查继承链上是否已经应用过规则了。如果有，则需要输出错误信息；否则应用规则。这里使用 POSIX 的互斥锁保证线程安全。&lt;code&gt;mt_overrideMethod()&lt;/code&gt; 函数所作的事情就是开始提到的利用消息转发流程 hook 的三个步骤。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL)applyRule:(MTRule &lt;/span&gt;*)rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;shouldApply &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mt_checkRuleValid(rule)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [self.rules enumerateKeysAndObjectsUsingBlock:^(NSString * _Nonnull key, MTRule * _Nonnull obj, &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;* _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (rule.selector == obj.selector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; object_isClass(rule.target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;amp;&amp;amp; object_isClass(obj.target)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Class clsA = rule.target&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Class clsB = obj.target&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;shouldApply &lt;/span&gt;= !([clsA isSubclassOfClass:clsB] &lt;span class=&quot;title&quot;&gt;||&lt;/span&gt; [clsB isSubclassOfClass:clsA])&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                *stop = &lt;span class=&quot;keyword&quot;&gt;shouldApply;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                NSString *errorDescription = [NSString stringWithFormat:@&lt;span class=&quot;string&quot;&gt;&quot;Error: %@ already apply rule in %@. A message can only have one throttle per class hierarchy.&quot;&lt;/span&gt;, NSStringFromSelector(obj.selector), NSStringFromClass(clsB)]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;%@&quot;&lt;/span&gt;, errorDescription)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;keyword&quot;&gt;shouldApply) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.rules[mt_methodDescription(rule.target, rule.selector)] = rule&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mt_overrideMethod(rule.target, rule.selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;shouldApply;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;废除规则是执行相反的操作。如果 &lt;code&gt;target&lt;/code&gt; 是个实例对象，&lt;code&gt;mt_recoverMethod()&lt;/code&gt; 函数会判断是否有相同 &lt;code&gt;selector&lt;/code&gt; 且 &lt;code&gt;target&lt;/code&gt; 为这个实例对象的类的其他规则。如果有，那将不会移除 hook。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL)discardRule:(MTRule &lt;/span&gt;*)rule&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;shouldDiscard &lt;/span&gt;= NO&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (mt_checkRuleValid(rule)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *description = mt_methodDescription(rule.target, rule.selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;shouldDiscard &lt;/span&gt;= self.rules[description] != nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;keyword&quot;&gt;shouldDiscard) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.rules[description] = nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mt_recoverMethod(rule.target, rule.selector)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;shouldDiscard;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;其实在开发过程中遇到需要限制方法调用频率的场景并不多，只是最近恰巧连续碰到几个刷新 UI 过频繁的问题，才想到应该去造个轮子。因为时间仓促，肯定还有考虑不周和一些 bug，待投入使用后慢慢完善和修复。&lt;/p&gt;
&lt;p&gt;其实想在某个特定函数做节流很简单，但每次都需要做重复劳动，写脏代码，还不如抽象出一个工具类出来。尽量造与业务无关的轮子，锻炼技术，也受益整个业务发展。&lt;/p&gt;
&lt;p&gt;好，装逼到此为止。Github : &lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/MessageThrottle&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在实际项目中经常会遇到因方法调用频繁而导致的 UI 闪动问题和性能问题，这时用某种策略需要控制调用频率，以达到节流和防抖的效果。&lt;a href=&quot;https://github.com/yulingtianxia/MessageThrottle&quot;&gt;MessageThrottle&lt;/a&gt; 是我实现的一个 Objective-C 消息节流和防抖的轻量级工具库，使用便捷且业务无关。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
      <category term="Message Forwarding" scheme="http://yulingtianxia.com/tags/Message-Forwarding/"/>
    
  </entry>
  
  <entry>
    <title>Threading Programming Guide(3)</title>
    <link href="http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/"/>
    <id>http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/</id>
    <published>2017-10-08T09:03:54.000Z</published>
    <updated>2017-10-10T16:02:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第三部分。关于同步的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/&quot;&gt;Threading Programming Guide(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/&quot;&gt;Threading Programming Guide(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;同步&quot;&gt;&lt;a href=&quot;#同步&quot; class=&quot;headerlink&quot; title=&quot;同步&quot;&gt;&lt;/a&gt;同步&lt;/h2&gt;&lt;p&gt;两个线程同时修改同一个资源可能会不小心干扰到对方，多线程存取资源带来了潜在的线程安全问题。比如，一个线程可能会覆盖了另一个线程的修改，或者使应用置于未知混乱状态。如果幸运的话，错乱的资源可能会导致明显的性能问题或 crash 这类相对容易复现和解决的 bug；如果不太走运，面临的就是短时间难以重现的 bug 和对代码的全面排查。&lt;/p&gt;
&lt;p&gt;为了线程安全，要尽量避免共享资源并减少线程间交互。即便有必须交互的地方，也需要使用同步工具来确保安全。&lt;/p&gt;
&lt;p&gt;macOS 和 iOS 提供了许多同步工具，范围涵盖互斥操作工具到应用中的序列化事件。下面会介绍这些工具的使用方法。&lt;/p&gt;
&lt;h3 id=&quot;同步工具&quot;&gt;&lt;a href=&quot;#同步工具&quot; class=&quot;headerlink&quot; title=&quot;同步工具&quot;&gt;&lt;/a&gt;同步工具&lt;/h3&gt;&lt;p&gt;完全避免同步问题是理想方案，但并不现实。下面介绍几类基本的同步工具。&lt;/p&gt;
&lt;h4 id=&quot;原子操作&quot;&gt;&lt;a href=&quot;#原子操作&quot; class=&quot;headerlink&quot; title=&quot;原子操作&quot;&gt;&lt;/a&gt;原子操作&lt;/h4&gt;&lt;p&gt;原子操作是对简单数据类型同步的一种简易形式。优点是不会阻塞竞争的线程。对于简单的操作，比如增加计数器变量的值，原子操作比锁拥有更好的性能。&lt;/p&gt;
&lt;p&gt;macOS 和 iOS 包含许多基本的数学和逻辑运算的操作，可以在 32 位和 64 位上执行。其中就有 compare-and-swap, test-and-set 和 test-and-clear 操作的原子版本。 详见 &lt;code&gt;/usr/include/libkern/OSAtomic.h&lt;/code&gt; 头文件，或 &lt;code&gt;atomic&lt;/code&gt; man page。&lt;/p&gt;
&lt;h4 id=&quot;内存屏障和-Volatile-变量&quot;&gt;&lt;a href=&quot;#内存屏障和-Volatile-变量&quot; class=&quot;headerlink&quot; title=&quot;内存屏障和 Volatile 变量&quot;&gt;&lt;/a&gt;内存屏障和 &lt;code&gt;Volatile&lt;/code&gt; 变量&lt;/h4&gt;&lt;p&gt;编译器为了让性能达到最佳，会经常重排序汇编指令，这就有可能导致存取内存的顺序跟着变化，进而产生错误数据，影响到一些看似各自独立的变量。由于编译器优化造成对变量错误的更新顺序，产生了潜在的错误结果。&lt;/p&gt;
&lt;p&gt;内存屏障（Memory Barrier）是一种非阻塞的同步工具，用来确保以正确的顺序操作内存。Memory Barrier 就像栅栏一样，强制处理器在栅栏之前的所有读写操作都执行后才可以开始执行栅栏之后的操作。内存屏障知识详见维基百科 &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_barrier&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Memory Barrier&lt;/a&gt;。可以在代码中调用 &lt;code&gt;OSMemoryBarrier&lt;/code&gt; 函数添加内存屏障，详见 &lt;code&gt;OSMemoryBarrier&lt;/code&gt; man page。&lt;/p&gt;
&lt;p&gt;Volatile 关键字对单独的变量应用了另一种内存约束。编译器为了优化代码，会将变量的值加载到寄存器中。对于局部变量这没毛病，如果这个变量由别的线程更新了的话，将出现不一致的现象。Volatile 关键字可以用来提醒编译器它后面所定义的变量随时有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。 如果一个变量可能在任何时候被外部资源修改，而编译器可能无法察觉，那么可以将其声明为 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Volatile变量&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;volatile 变量&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于内存屏障和 volatile 变量都降低了编译器对代码的优化，除非万不得已，需慎用。&lt;/p&gt;
&lt;h4 id=&quot;锁&quot;&gt;&lt;a href=&quot;#锁&quot; class=&quot;headerlink&quot; title=&quot;锁&quot;&gt;&lt;/a&gt;锁&lt;/h4&gt;&lt;p&gt;锁是最常用的同步工具之一，可以用它保护代码中的临界区域（critical section）。临界区域中的代码只允许同时被一个线程访问。其他线程对这块代码的修改都会被拒绝，因为会影响其正确性。&lt;/p&gt;
&lt;p&gt;下表列出了程序员最常用的一些锁。macOS 和 iOS 提供了大部分锁的实现，那些没实现的锁也会有说明。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;锁&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mutex&lt;/td&gt;
&lt;td&gt;互斥锁（Mutual exclusion，缩写Mutex）是多线程编程中一种对资源的保护机制，避免多个线程同时访问。如果互斥锁正在使用，其他线程需要等到它被释放后才能获取到。在同一时间只能有一个线程使用互斥锁。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Recursive lock&lt;/td&gt;
&lt;td&gt;也叫重入锁或递归锁，是互斥锁的变种。重入锁允许同一条线程多次获得同一个锁，但也释放锁时也要释放对应的次数。重入锁主要用于递归程序或者多个方法都需要获得锁的场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read-write lock&lt;/td&gt;
&lt;td&gt;读写锁可以认为是一种共享版的互斥锁。如果对一个临界区大部分是读操作而只有少量的写操作，在大规模操作上应用读写锁可以显著降低线程互斥产生的代价。正常操作数据时，可以同时有多个读操作。线程想要做写操作时，需要等到所有的读操作完成并释放锁之后，然后写操作会获取锁并更新数据。在写操作线程阻塞等待锁被释放时，新来的读操作线程在写操作完成前会一直阻塞。系统只支持 POSIX 线程中使用读写锁。关于如何使用这些锁，详见 &lt;code&gt;pthread&lt;/code&gt; man page。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Distributed lock&lt;/td&gt;
&lt;td&gt;提供进程级别的互斥锁，但并不会真的阻塞进程，只是简单地向进程汇报锁正被占用，并让进程自己决定如何处理。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spin lock&lt;/td&gt;
&lt;td&gt;自旋锁会重复查询锁的条件，直到为 true。因为自旋锁属于在『死等』，它最常用在多核处理器系统上，且锁的等待时间很短，时间短到轮询比阻塞线程的开销还小（因为需要阻塞线程切换上下文和更新线程数据结构）。因为它的轮询性质，系统没有提供自旋锁的任何实现，在特定场景下可以自己实现。内核中实现自旋锁详见 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Darwin/Conceptual/KernelProgramming/About/About.html#//apple_ref/doc/uid/TP30000905&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Kernel Programming Guide&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Double-checked lock&lt;/td&gt;
&lt;td&gt;双重检查锁试图减少并发系统中竞争和同步的开销。由于双重检查锁潜在地不安全性，系统不提供直接支持，不鼓励使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：大部分的锁也会纳入内存屏障来确保进入临界区域前的加载和存储指令已经完成。&lt;/p&gt;
&lt;h4 id=&quot;条件变量&quot;&gt;&lt;a href=&quot;#条件变量&quot; class=&quot;headerlink&quot; title=&quot;条件变量&quot;&gt;&lt;/a&gt;条件变量&lt;/h4&gt;&lt;p&gt;Condition 是信号量的另一种类型，它允许线程在某个条件为 true 的时候，向其他线程发信号（signal）。通常用于标示资源的可用性或确保任务以特定的顺序执行。在进入临界区域时如果检查条件变量不为 true，线程会一直阻塞，直到某个其他线程 signal。与互斥锁的不同点在于 condition 允许被多个线程同时访问，它更像是个用某个特定标准筛查线程的门卫。&lt;/p&gt;
&lt;p&gt;一种使用场景是管理即将发生的事件池。当队列中有事件到来时，使用条件变量对发信号（signal）。于是一个被唤醒的线程就可以从队列中获取并处理事件。如果有两个事件大致同时到达队列，会对 condition 发两次信号唤醒两个线程。&lt;/p&gt;
&lt;p&gt;系统用几种不同的技术对 condition 提供支持。写这块代码需要谨慎，后面会给出示例。&lt;/p&gt;
&lt;h4 id=&quot;Perform-Selector&quot;&gt;&lt;a href=&quot;#Perform-Selector&quot; class=&quot;headerlink&quot; title=&quot;Perform Selector&quot;&gt;&lt;/a&gt;Perform Selector&lt;/h4&gt;&lt;p&gt;Cocoa 提供了向一个活跃线程异步分发消息的便捷方式，也就是 &lt;code&gt;NSObject&lt;/code&gt; 类的 &lt;code&gt;performSelector...&lt;/code&gt; 系列方法。使用这些方法向线程发送的执行 &lt;code&gt;selector&lt;/code&gt; 的请求会被目标线程的 run loop 按接收顺序执行。&lt;/p&gt;
&lt;p&gt;详见 &lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/#Cocoa-Perform-Selector-Sources&quot;&gt;Cocoa Perform Selector Sources&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;同步开销与性能&quot;&gt;&lt;a href=&quot;#同步开销与性能&quot; class=&quot;headerlink&quot; title=&quot;同步开销与性能&quot;&gt;&lt;/a&gt;同步开销与性能&lt;/h3&gt;&lt;p&gt;同步机制在帮助确保代码正确性的同时也造成了性能代价。即便没有竞争，使用同步工具也会引发延迟。锁和原子操作为了确保充分保护代码，通常会需要使用内存屏障和内核级同步。如果存在对锁的竞争，线程会阻塞，经历甚至更久的延迟。&lt;/p&gt;
&lt;p&gt;下表列出了非竞争场景下互斥锁和原子操作的一些大致开销。这些测量值取自几千个样本的均值。时间开销会随着处理器负荷、计算机速度以及系统程序的可用内存数量产生巨幅波动。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;大约的开销&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mutex acquisition time&lt;/td&gt;
&lt;td&gt;大约 0.2 ms&lt;/td&gt;
&lt;td&gt;无竞争场景下获取锁的时间。如果锁已经被其他线程持有，获取锁的耗时还会更长。结果取自对均值和中位数的分析，运行系统为 macOS 10.5，配备基于Intel 2 GHz Core Duo 处理器和 1 GB RAM 的 iMac。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Atomic compare-and-swap&lt;/td&gt;
&lt;td&gt;大约 0.05 ms&lt;/td&gt;
&lt;td&gt;无竞争场景下的 compare-and-swap 时间。运行环境同上。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设计并发任务的时候，最重要的因素永远是正确性，但是也应该考虑到性能因素。总不能一味追求正确性而导致多线程执行的代码比单线程还慢吧。&lt;/p&gt;
&lt;p&gt;如果是在单线程应用的基础上进行多线程的改装，应该分别测量下关键任务在单线程和多线程下执行的性能，比对结果后再决定是否使用多线程。&lt;/p&gt;
&lt;p&gt;关于性能和指标采集工具详见 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Performance/Conceptual/PerformanceOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40001410&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Performance Overview&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;线程安全和信号&quot;&gt;&lt;a href=&quot;#线程安全和信号&quot; class=&quot;headerlink&quot; title=&quot;线程安全和信号&quot;&gt;&lt;/a&gt;线程安全和信号&lt;/h3&gt;&lt;p&gt;信号(Signal) 是一种底层 BSD 机制，用于向进程传递信息或以某种方式操作进程。有些程序使用信号来监测某些事件，比如子进程终止。系统使用信号来终止失控的进程和传达其他类型的信息。&lt;/p&gt;
&lt;p&gt;在多线程应用中，信号可能被发送到任何线程。所以实现 signal handler 的首要原则就是不要假定handler 会运行在某个特定线程。也就是说，假如在 A 线程设置 signal handler，信号被发送到 B 线程，A 和 B 不一定相同。&lt;/p&gt;
&lt;p&gt;设置 signal handler 的细节可以查看 &lt;code&gt;signal&lt;/code&gt; 和 &lt;code&gt;sigaction&lt;/code&gt; man page。&lt;/p&gt;
&lt;h3 id=&quot;线程安全设计技巧&quot;&gt;&lt;a href=&quot;#线程安全设计技巧&quot; class=&quot;headerlink&quot; title=&quot;线程安全设计技巧&quot;&gt;&lt;/a&gt;线程安全设计技巧&lt;/h3&gt;&lt;p&gt;同步工具是把双刃剑，能让代码线程安全，但使用过多也会带来性能问题。能平衡好二者利弊靠的是经验，下面会提供一些技巧。&lt;/p&gt;
&lt;h4 id=&quot;完全避免同步&quot;&gt;&lt;a href=&quot;#完全避免同步&quot; class=&quot;headerlink&quot; title=&quot;完全避免同步&quot;&gt;&lt;/a&gt;完全避免同步&lt;/h4&gt;&lt;p&gt;最佳解决方案是从代码和数据结构设计上避免需要同步。同步工具很管用但也影响性能，能从设计根源上避免当然是最好的了。比如实现并发的时候要减少任务之间的相互作用和依赖。如果每个任务都在自己的私有数据集上操作，就不需要使用锁保护数据了。即便在两个任务共享一分公共数据集的情况下，可以考虑分割数据集或为每个任务提供一份数据拷贝。当然拷贝数据集也会有成本，这就需要提前权衡下拷贝成本高还是同步成本高。&lt;/p&gt;
&lt;h4 id=&quot;理解同步的限制&quot;&gt;&lt;a href=&quot;#理解同步的限制&quot; class=&quot;headerlink&quot; title=&quot;理解同步的限制&quot;&gt;&lt;/a&gt;理解同步的限制&lt;/h4&gt;&lt;p&gt;同步工具只有在应用中所有线程都持续使用才能生效。如果创建了互斥锁来限制对某个资源的存取，那么所有线程在试图操作此资源前都必须获得这个的互斥锁。如果做不到这些，互斥锁提供的保护就会失效，这是程序员的错。&lt;/p&gt;
&lt;h4 id=&quot;清楚代码正确性的风险&quot;&gt;&lt;a href=&quot;#清楚代码正确性的风险&quot; class=&quot;headerlink&quot; title=&quot;清楚代码正确性的风险&quot;&gt;&lt;/a&gt;清楚代码正确性的风险&lt;/h4&gt;&lt;p&gt;使用锁和内存屏障时需要认真些，要在代码中加对地方才行。你甚至觉得自己加锁的地方是对的，其实只是错觉。下面一系列例子试图阐述这个问题。表面上看似没毛病的代码，也能挑出瑕疵。基础假设是有一个可变数组，包含了一组不可变的对象。如果想要执行数组中第一个对象的方法，可以用下面代码实现：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLock* arrayLock = GetArrayLock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray* myArray = GetSharedArray()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id anObject&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anObject = [myArray objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject doSomething]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为数组是可变的，在获取数组第一个元素之前，锁会阻止其他线程修改数组。又因为元素对象本身是不可变的，不用对 &lt;code&gt;doSomething&lt;/code&gt; 方法加锁。&lt;/p&gt;
&lt;p&gt;不过上面的例子存在问题：在锁释放后 &lt;code&gt;doSomething&lt;/code&gt; 执行前，如果另一个线程将数组中所有对象都移除会发生什么呢？&lt;code&gt;anObject&lt;/code&gt; 野指针！解决问题的办法也很简单，重新整理下代码顺序，在 &lt;code&gt;doSomething&lt;/code&gt; 执行后再释放锁：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLock* arrayLock = GetArrayLock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray* myArray = GetSharedArray()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id anObject&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anObject = [myArray objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject doSomething]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把调用 &lt;code&gt;doSomething&lt;/code&gt; 的代码挪到锁里面保证了对象依然有效，但如果 &lt;code&gt;doSomething&lt;/code&gt; 执行时间过长又会导致锁也会被占用很久，造成性能瓶颈。&lt;/p&gt;
&lt;p&gt;代码的毛病不是临界区域不清晰，真正的问题在于其他线程插了一脚触发的内存管理问题。因为其他线程释放了 &lt;code&gt;anObject&lt;/code&gt;，更好的解决方案是在锁释放前 &lt;code&gt;retain&lt;/code&gt; 它。此解决方案不仅对症下药，而且无潜在的性能问题。&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSLock* arrayLock = GetArrayLock()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSMutableArray* myArray = GetSharedArray()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id anObject&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;anObject = [myArray objectAtIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[arrayLock unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject doSomething]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[anObject release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽管上面的例子非常简单，但抓到重点了。要透过表面看本质。要预先考虑到一些问题，比如内存管理和其他方面的设计可能会受多线程的影响。除此之外，在安全问题上要对编辑器的行为做最坏的打算。小心谨慎方能避灾。&lt;/p&gt;
&lt;h4 id=&quot;提防死锁和活锁&quot;&gt;&lt;a href=&quot;#提防死锁和活锁&quot; class=&quot;headerlink&quot; title=&quot;提防死锁和活锁&quot;&gt;&lt;/a&gt;提防死锁和活锁&lt;/h4&gt;&lt;p&gt;如果线程在同一时刻持有不止一个锁，随时都有发生死锁的可能。当两个不同的线程分别持有一个锁，并且尝试获取对方持有的锁，&lt;a href=&quot;https://zh.wikipedia.org/wiki/死锁&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;死锁&lt;/a&gt;就发生了。因为每个线程永远都获取不到另一个锁，结果就是永久阻塞。&lt;/p&gt;
&lt;p&gt;活锁跟死锁很像，死锁是获取不到另一个锁就死等，而活锁是获取不到就释放已经持有的锁和资源，然后重试。活锁把时间都花在释放锁和尝试获取其他锁上面了，并没啥干活儿。&lt;/p&gt;
&lt;p&gt;避免死锁和活锁的最好方法就是一次只获取一个锁。如果一次必须获取不止一个锁，那就应该确保其他线程别这么做。&lt;/p&gt;
&lt;h4 id=&quot;正确地使用-Volatile-变量&quot;&gt;&lt;a href=&quot;#正确地使用-Volatile-变量&quot; class=&quot;headerlink&quot; title=&quot;正确地使用 Volatile 变量&quot;&gt;&lt;/a&gt;正确地使用 &lt;code&gt;Volatile&lt;/code&gt; 变量&lt;/h4&gt;&lt;p&gt;如果已经对一段代码用互斥锁保护了，就不要自动假定需要对这段代码中的重要变量用 &lt;code&gt;volatile&lt;/code&gt; 关键字再保护一次。互斥锁包含了内存屏障，确保加载和存储操作的顺序正确。添加 &lt;code&gt;volatile&lt;/code&gt; 关键字会强制访问变量时每次都从内存加载。可能在特殊情况下有必要将这两种同步技术混合使用，但也会导致严重降低性能。如果只用互斥锁保护变量就够了，删掉 &lt;code&gt;volatile&lt;/code&gt; 关键字吧。&lt;/p&gt;
&lt;p&gt;不要用 &lt;code&gt;volatile&lt;/code&gt; 变量试图替代使用互斥锁。互斥锁和其他同步机制通常比 &lt;code&gt;volatile&lt;/code&gt; 变量能更好地保护数据结构的完整性。&lt;code&gt;volatile&lt;/code&gt; 关键字只是确保变量从内存加载而不是存在寄存器中。它无法确保代码可以正确地访问变量。&lt;/p&gt;
&lt;h3 id=&quot;使用原子操作&quot;&gt;&lt;a href=&quot;#使用原子操作&quot; class=&quot;headerlink&quot; title=&quot;使用原子操作&quot;&gt;&lt;/a&gt;使用原子操作&lt;/h3&gt;&lt;p&gt;无阻塞同步可以执行一些操作并避免锁的开销。虽然用锁可以有效地同步两个线程，但即便在无竞争情况下获取锁的代价相对较高。相反，许多同步操作花一小部分时间就能完成，而且跟锁一样管用。&lt;/p&gt;
&lt;p&gt;可以用原子操作在 32 位或 64 位数值上做些简单的数学和逻辑操作。为了确保在原子操作完成后才可再次访问受影响的内存，这些操作依赖专门的硬件指令（和可选的内存屏障）。在多线程情况下为确保内存被正确地同步，应该始终使用纳入内存屏障版本的原子操作（带有 &lt;code&gt;Barrier&lt;/code&gt; 后缀）。&lt;/p&gt;
&lt;p&gt;下标列出了可用的数学和逻辑原子操作以及相关函数名。这些函数都声明在 &lt;code&gt;/usr/include/libkern/OSAtomic.h&lt;/code&gt; 头文件中，它包含了完整语法。这些函数的 64 位版本仅在 64 位处理器中可用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Add&lt;/td&gt;
&lt;td&gt;OSAtomicAdd32 OSAtomicAdd32Barrier OSAtomicAdd64 OSAtomicAdd64Barrier&lt;/td&gt;
&lt;td&gt;将两个整数相加并将结果存在其中一个指定的变量中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;OSAtomicIncrement32 OSAtomicIncrement32Barrier OSAtomicIncrement64 OSAtomicIncrement64Barrier&lt;/td&gt;
&lt;td&gt;将指定的整数值加一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decrement&lt;/td&gt;
&lt;td&gt;OSAtomicDecrement32 OSAtomicDecrement32Barrier OSAtomicDecrement64 OSAtomicDecrement64Barrier&lt;/td&gt;
&lt;td&gt;将指定的整数值减一&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical OR&lt;/td&gt;
&lt;td&gt;OSAtomicOr32 OSAtomicOr32Barrier&lt;/td&gt;
&lt;td&gt;在指定的 32 位数值和掩码之间做逻辑或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical AND&lt;/td&gt;
&lt;td&gt;OSAtomicAnd32 OSAtomicAnd32Barrier&lt;/td&gt;
&lt;td&gt;在指定的 32 位数值和掩码之间做逻辑与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical XOR&lt;/td&gt;
&lt;td&gt;OSAtomicXor32 OSAtomicXor32Barrier&lt;/td&gt;
&lt;td&gt;在指定的 32 位数值和掩码之间做逻辑异或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compare and swap&lt;/td&gt;
&lt;td&gt;OSAtomicCompareAndSwap32 OSAtomicCompareAndSwap32Barrier OSAtomicCompareAndSwap64 OSAtomicCompareAndSwap64Barrier OSAtomicCompareAndSwapPtr OSAtomicCompareAndSwapPtrBarrier OSAtomicCompareAndSwapInt OSAtomicCompareAndSwapIntBarrier OSAtomicCompareAndSwapLong OSAtomicCompareAndSwapLongBarrier&lt;/td&gt;
&lt;td&gt;函数有三个参数：oldValue, newValue, theValue 指针。如果 oldValue 跟 theValue 指针的内容相等，则把 newValue 赋给 theValue 指针的内容。否则啥都不干。比较和赋值会以一个原子操作完成。返回值表明是否发生了交换。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test and set&lt;/td&gt;
&lt;td&gt;OSAtomicTestAndSet OSAtomicTestAndSetBarrier&lt;/td&gt;
&lt;td&gt;将指定变量第 n 位设为 1，并将旧值以 bool 形式返回。注意这里会将变量按 8 位分块，每块的内容是逆序的。所以如果想要设置 0 位的值，n 需要传入 7。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Test and clear&lt;/td&gt;
&lt;td&gt;OSAtomicTestAndClear OSAtomicTestAndClearBarrier&lt;/td&gt;
&lt;td&gt;将指定变量第 n 位设为 0，并将旧值以 bool 形式返回。注意这里会将变量按 8 位分块，每块的内容是逆序的。所以如果想要设置 0 位的值，n 需要传入 7。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大多数原子函数的行为都会是相对简单且能预料到的。下面的示例代码使用了 &lt;code&gt;OSAtomicTestAndSet&lt;/code&gt; 和 &lt;code&gt;OSAtomicCompareAndSwap32&lt;/code&gt; 函数，结果可能跟你预想的不太一样。这些函数在无竞争情况下被调用，且没有其他线程同时操作。&lt;/p&gt;
&lt;figure class=&quot;highlight mizar&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int32_t  theValue = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicTestAndSet(0, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 128.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theValue = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicTestAndSet(7, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theValue = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicTestAndSet(15, &amp;amp;theValue)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 256.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicCompareAndSwap32(256, 512, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;now&lt;/span&gt; 512.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OSAtomicCompareAndSwap32(256, 1024, &amp;amp;theValue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// theValue &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; still 512.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于原子操作可以看看 &lt;code&gt;atomic&lt;/code&gt; man page 和 &lt;code&gt;/usr/include/libkern/OSAtomic.h&lt;/code&gt; 头文件。&lt;/p&gt;
&lt;h3 id=&quot;使用锁&quot;&gt;&lt;a href=&quot;#使用锁&quot; class=&quot;headerlink&quot; title=&quot;使用锁&quot;&gt;&lt;/a&gt;使用锁&lt;/h3&gt;&lt;p&gt;锁是多线程编程中的一个基础同步工具，macOS 和 iOS 都提供了基础的互斥锁。Foundation 框架定义了几种用于特别场景的互斥锁作为补充。&lt;/p&gt;
&lt;h4 id=&quot;POSIX-互斥锁&quot;&gt;&lt;a href=&quot;#POSIX-互斥锁&quot; class=&quot;headerlink&quot; title=&quot;POSIX 互斥锁&quot;&gt;&lt;/a&gt;POSIX 互斥锁&lt;/h4&gt;&lt;p&gt;POSIX 互斥锁贼好用。用 &lt;code&gt;pthread_mutex_t&lt;/code&gt; 结构体声明一个互斥锁变量，将其传入 &lt;code&gt;pthread_mutex_init&lt;/code&gt; 函数初始化，然后用 &lt;code&gt;pthread_mutex_lock&lt;/code&gt; 和 &lt;code&gt;pthread_mutex_unlock&lt;/code&gt; 函数获取和释放锁就行了。等到不需要用锁了，调用 &lt;code&gt;pthread_mutex_destroy&lt;/code&gt; 函数析构锁的数据结构。下面是简化后的代码，实际使用时要考虑到错误处理等细节：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyInitFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_init(&amp;amp;mutex, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLockingFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do work.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;NSLock&quot;&gt;&lt;a href=&quot;#NSLock&quot; class=&quot;headerlink&quot; title=&quot;NSLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSLock&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NSLock&lt;/code&gt; 实现了 Cocoa 中基本的互斥锁。包括 &lt;code&gt;NSLock&lt;/code&gt; 的所有锁的接口实际上都由 &lt;code&gt;NSLocking&lt;/code&gt; 协议定义，也就是 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 这俩方法，对应功能是获取和释放锁。&lt;/p&gt;
&lt;p&gt;除此之外，&lt;code&gt;NSLock&lt;/code&gt; 类还提供了 &lt;code&gt;tryLock&lt;/code&gt; 和 &lt;code&gt;lockBeforeDate:&lt;/code&gt; 方法。&lt;code&gt;tryLock&lt;/code&gt; 方法尝试获取锁，但如果锁不可用，并不会阻塞，只是返回 &lt;code&gt;NO&lt;/code&gt; 而已。&lt;code&gt;lockBeforeDate:&lt;/code&gt; 方法尝试获取锁，并一直阻塞线程，直到获取到锁（返回 &lt;code&gt;YES&lt;/code&gt;）或达到限定的时间（返回 &lt;code&gt;NO&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;下面的示例代码展示了如何使用 &lt;code&gt;NSLock&lt;/code&gt; 在多个线程计算要被显示的数据时，即便获取不到锁的情况下依然可以继续运算。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; moreToDo = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; *theLock = [[&lt;span class=&quot;built_in&quot;&gt;NSLock&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (moreToDo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Do another increment of calculation */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* until there’s no more to do. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([theLock tryLock]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* Update display used by all threads. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [theLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;synchronized&quot;&gt;&lt;a href=&quot;#synchronized&quot; class=&quot;headerlink&quot; title=&quot;@synchronized&quot;&gt;&lt;/a&gt;&lt;code&gt;@synchronized&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;可以用 &lt;code&gt;@synchronized&lt;/code&gt; 指令很方便地在 Objective-C 代码中飞快地写个互斥锁。它的作用跟互斥锁一样，但不用创建锁，只需要把一个 Objective-C 对象当做锁的 token 即可：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;myMethod&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(id)anObj&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@synchronized&lt;/span&gt;(anObj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Everything between the braces is protected by the @synchronized directive.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;传给 &lt;code&gt;@synchronized&lt;/code&gt; 的对象是区分被保护的代码块的唯一标识。如果两个线程都执行上面的 &lt;code&gt;myMethod:&lt;/code&gt; 方法，传入的对象如果不同，则不会有阻塞；传入的对象相同，则一个线程先获取锁，另一个线程在临界区域执行完成之前会一直阻塞。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;@synchronized&lt;/code&gt; 的前提是工程开启了 Objective-C exception handling 选项。因为 &lt;code&gt;@synchronized&lt;/code&gt; 的 block 为了保护代码，预防措施是隐式加入 exception handler。handler 在异常抛出时会自动释放互斥锁。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/&quot;&gt;关于 @synchronized，这儿比你想知道的还要多&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用其他-Cocoa-框架的锁&quot;&gt;&lt;a href=&quot;#使用其他-Cocoa-框架的锁&quot; class=&quot;headerlink&quot; title=&quot;使用其他 Cocoa 框架的锁&quot;&gt;&lt;/a&gt;使用其他 Cocoa 框架的锁&lt;/h4&gt;&lt;h5 id=&quot;NSRecursiveLock&quot;&gt;&lt;a href=&quot;#NSRecursiveLock&quot; class=&quot;headerlink&quot; title=&quot;NSRecursiveLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSRecursiveLock&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSRecursiveLock&lt;/code&gt; 类也就是递归锁，可以被同一线程获取多次而不会导致死锁。当然 &lt;code&gt;lock&lt;/code&gt; 多少次，也要相应地 &lt;code&gt;unlock&lt;/code&gt; 多少次，这样锁才会被真正释放，其他线程才能获取锁。&lt;/p&gt;
&lt;p&gt;递归锁通常用于递归函数中来避免死锁线程。也可以用于非递归的场景下。这有个使用 &lt;code&gt;NSRecursiveLock&lt;/code&gt; 的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSRecursiveLock *theLock = [[NSRecursiveLock alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyRecursiveFunction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [theLock &lt;span class=&quot;keyword&quot;&gt;lock&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        --&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyRecursiveFunction(&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [theLock unlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyRecursiveFunction(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：因为递归锁需要 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 次数相等才能释放，应该小心权衡。可以重写代码来避免递归，或避免使用递归锁，这样可以获取更好的性能。&lt;/p&gt;
&lt;h5 id=&quot;NSConditionLock&quot;&gt;&lt;a href=&quot;#NSConditionLock&quot; class=&quot;headerlink&quot; title=&quot;NSConditionLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSConditionLock&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSConditionLock&lt;/code&gt; 定义了可以用特定值来 &lt;code&gt;lock&lt;/code&gt; 和 &lt;code&gt;unlock&lt;/code&gt; 的互斥锁，但别跟条件变量搞混了。虽然行为差不多但实现很不一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSConditionLock&lt;/code&gt; 一般用于线程需要以特定的顺序执行任务时，例如生产者消费者问题。当生产者执行时，消费者需要使用程序中特定的条件变量来获取锁。所谓的条件变量其实就是个程序员定义的整型数。当生产者完成后，它会 &lt;code&gt;unlock&lt;/code&gt; 并更新条件变量，进而唤醒了消费者线程。消费者线程继续处理数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSConditionLock&lt;/code&gt; 的加锁和解锁方法可以任意组合使用。比如可以用 &lt;code&gt;lock&lt;/code&gt; 跟 &lt;code&gt;unlockWithCondition:&lt;/code&gt; 搭配，或用 &lt;code&gt;lockWhenCondition:&lt;/code&gt; 跟 &lt;code&gt;unlock&lt;/code&gt; 搭配。当然第二种搭配没有在解锁后设置 &lt;code&gt;condition&lt;/code&gt; 属性的值，其他一些等待特定条件变量的线程可能还会阻塞。&lt;/p&gt;
&lt;p&gt;下面的例子展示了如何使用条件锁处理生产者-消费者问题。摄像应用含有一个数据队列，生产者线程向队列添加数据，消费者线程从队列取数据。生产者不需要等特定的条件，但是必须等锁可用的时候才能安全地向队列添加数据。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id condLock = [[NSConditionLock alloc] &lt;span class=&quot;string&quot;&gt;initWithCondition:&lt;/span&gt;NO_DATA];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condLock lock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Add data to the queue. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [condLock &lt;span class=&quot;string&quot;&gt;unlockWithCondition:&lt;/span&gt;HAS_DATA];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于锁的初始条件被设置成 &lt;code&gt;NO_DATA&lt;/code&gt;，生产者线程起初会顺利地获取锁。它向队列填充数据并将条件设置为 &lt;code&gt;HAS_DATA&lt;/code&gt;。在接下来的迭代中，不管队列是否为空，生产者线程总能添加新数据。它只有消费者线程从队列中获取数据的时候才会阻塞。&lt;/p&gt;
&lt;p&gt;由于消费者线程必须有数据去处理，它会用一个特定的条件等待着队列。当生产者网队列中放数据时，消费者线程会活跃起来并获取锁。然后它可能从队列获取一些数据并更新队列状态。下面的例子展示了消费者线程循环程序的基本结构。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;while&lt;/span&gt; (true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[condLock lockWhenCondition:HAS_DATA]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Remove data from the queue. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-attr&quot;&gt;[condLock unlockWithCondition:(isEmpty ? NO_DATA : HAS_DATA)]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Process the data locally.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;NSDistributedLock&quot;&gt;&lt;a href=&quot;#NSDistributedLock&quot; class=&quot;headerlink&quot; title=&quot;NSDistributedLock&quot;&gt;&lt;/a&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt; 可以用于多个应用拥有并访问某个共享资源（例如文件）的临界区。它实际上是使用文件系统的文件或目录等实现的互斥锁。所有使用 &lt;code&gt;NSDistributedLock&lt;/code&gt; 对象的应用必须对其可写入。这通常意味着将其放入一个所有运行此应用的计算机都能访问的文件系统。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt; &lt;strong&gt;不&lt;/strong&gt;像其他锁一样遵从 &lt;code&gt;NSLocking&lt;/code&gt; 协议，没有 &lt;code&gt;lock&lt;/code&gt; 方法。&lt;code&gt;lock&lt;/code&gt; 方法会阻塞进程的执行并需要系统以预定的速率查询锁。与其在代码上强制损耗性能，不如用 &lt;code&gt;NSDistributedLock&lt;/code&gt; 提供的 &lt;code&gt;tryLock&lt;/code&gt; 方法来让程序员决定是否去查询锁。&lt;/p&gt;
&lt;p&gt;由于 &lt;code&gt;NSDistributedLock&lt;/code&gt; 使用文件系统实现，它只有在拥有者显式释放它时才会跟着释放。如果应用 crash 时还持有一个 &lt;code&gt;NSDistributedLock&lt;/code&gt; 对象，其他 client 将不能访问被保护的资源。在这种情况下，可以使用 &lt;code&gt;breakLock&lt;/code&gt; 方法打破已经存在的锁，这样就能获取到它了。通常应该避免打破锁，除非你确信拥有锁的进程挂了，无法释放锁。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSDistributedLock&lt;/code&gt; 跟其他锁一样，调用 &lt;code&gt;unlock&lt;/code&gt; 方法释放它。&lt;/p&gt;
&lt;h3 id=&quot;使用条件（Condition）&quot;&gt;&lt;a href=&quot;#使用条件（Condition）&quot; class=&quot;headerlink&quot; title=&quot;使用条件（Condition）&quot;&gt;&lt;/a&gt;使用条件（Condition）&lt;/h3&gt;&lt;p&gt;Condition 是一种特殊类型的锁，它可以让操作必须以正确的顺序进行。它跟互斥锁有细微的差别。等待 condition 的线程会保持阻塞，直到 condition 被其他线程显式发信号。&lt;/p&gt;
&lt;p&gt;由于牵扯到操作系统实现的细节，条件锁在即使没被发信号的情况下被允许伪造成功返回。为了避免这种站不住脚的发信号导致的问题，应该总是把断言跟条件锁结合起来使用。断言是一个决定线程是否能安全进行的更具体的方式。在发信号的线程设置断言前，condition 会让你的线程保持睡眠。&lt;/p&gt;
&lt;p&gt;下面展示如何在代码中使用 condition。&lt;/p&gt;
&lt;h4 id=&quot;NSCondition&quot;&gt;&lt;a href=&quot;#NSCondition&quot; class=&quot;headerlink&quot; title=&quot;NSCondition&quot;&gt;&lt;/a&gt;&lt;code&gt;NSCondition&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;&lt;code&gt;NSCondition&lt;/code&gt; 是对 POSIX Condition 语法的封装，而且将锁和 condition 数据结构包含在一个对象里。这使得可以用一个对象既能当做互斥锁 &lt;code&gt;lock&lt;/code&gt;，又能像 Condition 一样继续 &lt;code&gt;wait&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面的代码中 &lt;code&gt;cocoaCondition&lt;/code&gt; 变量是一个 &lt;code&gt;NSCondition&lt;/code&gt; 对象，&lt;code&gt;timeToDoWork&lt;/code&gt; 变量是一个整型数，用作断言。其他线程会在向 condition 发信号之前立刻增加 &lt;code&gt;timeToDoWork&lt;/code&gt; 的值。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;cocoaCondition&lt;/span&gt; lock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (&lt;span class=&quot;name&quot;&gt;timeToDoWork&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;name&quot;&gt;cocoaCondition&lt;/span&gt; wait]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeToDoWork--&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Do real work here.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;name&quot;&gt;cocoaCondition&lt;/span&gt; unlock]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就是增加断言的值，并向 condition 发信号。当然这些操作要加锁：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[cocoaCondition lock]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timeToDoWork++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[cocoaCondition signal]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[cocoaCondition unlock]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;POSIX-Condition&quot;&gt;&lt;a href=&quot;#POSIX-Condition&quot; class=&quot;headerlink&quot; title=&quot;POSIX Condition&quot;&gt;&lt;/a&gt;POSIX Condition&lt;/h4&gt;&lt;p&gt;POSIX 线程条件锁需要将 condition 数据结构和互斥锁一起使用。尽管两个锁结构是分开的，但是互斥锁在运行时会被紧紧地捆到 condition 结构上。等待发信号的线程应该始终将相同的互斥锁和 condition 结构一起使用。改变配对会导致错误。&lt;/p&gt;
&lt;p&gt;下面的代码展示了 condition 和断言基本的初始化和使用。在初始化 condition 和互斥锁后，线程进入了一个使用 &lt;code&gt;ready_to_go&lt;/code&gt; 变量作为断言的 &lt;code&gt;while&lt;/code&gt; 循环。只有断言设置好并且 condition 接着被发信号后，等待着的线程才会被唤醒，并开始工作。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pthread_cond_t&lt;/span&gt; condition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Boolean     ready_to_go = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyCondInitFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_init(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_cond_init(&amp;amp;condition, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyWaitOnConditionFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Lock the mutex.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// If the predicate is already set, then the while loop is bypassed;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// otherwise, the thread sleeps until the predicate is set.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(ready_to_go == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_cond_wait(&amp;amp;condition, &amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do work. (The mutex should stay locked.)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Reset the predicate and release the mutex.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ready_to_go = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;发信号的线程负责设置断言并向条件锁发信号。下面的代码展示了它的实现。为了避免线程之间等待 condition 而发生竞态条件，发信号的操作要在互斥锁里面进行。因为是简化过后的例子，代码中没包含错误处理的代码，只展示基础用法。&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SignalThreadUsingCondition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// At this point, there should be work for the other thread to do.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ready_to_go = &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Signal the other thread to begin work.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_cond_signal(&amp;amp;condition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/ThreadSafety/ThreadSafety.html#//apple_ref/doc/uid/10000057i-CH8-SW1&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第三部分。关于同步的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/&quot;&gt;Threading Programming Guide(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/&quot;&gt;Threading Programming Guide(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://yulingtianxia.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Threading Programming Guide(2)</title>
    <link href="http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/"/>
    <id>http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/</id>
    <published>2017-09-17T06:07:13.000Z</published>
    <updated>2017-10-10T16:02:37.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第二部分。关于 Run Loop 的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/&quot;&gt;Threading Programming Guide(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/&quot;&gt;Threading Programming Guide(3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Run-Loops&quot;&gt;&lt;a href=&quot;#Run-Loops&quot; class=&quot;headerlink&quot; title=&quot;Run Loops&quot;&gt;&lt;/a&gt;Run Loops&lt;/h2&gt;&lt;p&gt;Run Loop 作为线程相关基础设施的一部分，充当着循环处理、调度事件/消息的角色。它使得线程不会执行完单个任务后就立刻结束，而是让线程在没有任务时保持休眠状态，在需要处理消息时被立刻唤醒。&lt;/p&gt;
&lt;p&gt;Run Loop 其实是个对象，但不需要主动去创建它，而且每个线程都有对应的 run loop 对象。Run Loop 的管理机制并不完全是自动的，有时需要设计好 run loop 的运行时间和事件处理回调。次级线程需要开发者手动去配置并运行它的 run loop，在应用启动过程中主线程的 run loop 已经自动配置并运行了。&lt;/p&gt;
&lt;p&gt;Run Loop 作为苹果提供的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Event_loop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Event Loop&lt;/a&gt; 机制的实现方案，在 Cocoa 和 Core Foundation 有两个对应的类：&lt;a href=&quot;https://developer.apple.com/documentation/foundation/runloop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;NSRunLoop&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://developer.apple.com/documentation/corefoundation/cfrunloop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;CFRunLoop&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-Loop-剖析&quot;&gt;&lt;a href=&quot;#Run-Loop-剖析&quot; class=&quot;headerlink&quot; title=&quot;Run Loop 剖析&quot;&gt;&lt;/a&gt;Run Loop 剖析&lt;/h3&gt;&lt;p&gt;Run Loop 可能需要开发者自己写 &lt;code&gt;while&lt;/code&gt; 或 &lt;code&gt;for&lt;/code&gt; 循环，并在里面驱动 run loop 对象运行，每轮运行都会处理接收到事件的回调。&lt;/p&gt;
&lt;p&gt;Run Loop 接收的事件来源 (source) 有两种。Input Source 传送来自其他应用或线程的异步事件/消息；Timer Source 传送的是基于定时器的同步事件，可以定时或重复发送。&lt;/p&gt;
&lt;p&gt;下图展示了 run loop 与多种 source 的概念架构。运行 &lt;code&gt;NSRunLoop&lt;/code&gt; 实例的方式有三种，&lt;code&gt;runUntilDate:&lt;/code&gt; 方法是其中的一种，后面会讲。Input Source 发送的异步事件产生的回调会使 &lt;code&gt;runUntilDate:&lt;/code&gt; 退出；Timer Source 则不会。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg&quot; alt=&quot;Structure of a run loop and its sources&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run Loop 的一些行为会发通知，开发者可以注册成为 run-loop 观察者 (observer)。&lt;/p&gt;
&lt;p&gt;Input Source, Timer Source, Run Loop Observer 统称为 Mode Item，这里的 Mode 指的是 Run Loop Mode。一个 Run Loop 包含若干个 Mode，每个 Mode 又包含若干个 Item。Item 与 Mode 是多对多的关系，没有 Item 的 Model 会立刻退出。&lt;/p&gt;
&lt;p&gt;下面几节会详细讲述上面提到的这些概念。&lt;/p&gt;
&lt;h4 id=&quot;Run-Loop-Modes&quot;&gt;&lt;a href=&quot;#Run-Loop-Modes&quot; class=&quot;headerlink&quot; title=&quot;Run Loop Modes&quot;&gt;&lt;/a&gt;Run Loop Modes&lt;/h4&gt;&lt;p&gt;Run Loop Mode 包含了需要被监听的 input source 和 timer 集合，以及需要接收通知的 observer 集合。Run loop 的每次运行都会处在某个特定模式下，而且只有这个模式所包含的 item 集合才会参与发送事件(被监听)和接收通知。&lt;/p&gt;
&lt;p&gt;开发者使用 run loop mode 时直接指定名字就行，Cocoa 和 Core Foundation 定义了一些默认和常用的 Mode。Run Loop Mode 对应的类是 &lt;code&gt;CFRunLoopModeRef&lt;/code&gt;，但是并没有作为公有 API 开放出来，但可以通过 Core Foundation 源码了解下:&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __&lt;span class=&quot;built_in&quot;&gt;CFRunLoopMode&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;CFRunLoopModeRef&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __&lt;span class=&quot;built_in&quot;&gt;CFRunLoopMode&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRuntimeBase&lt;/span&gt; _base; &lt;span class=&quot;comment&quot;&gt;// CF 的基石，遍地可见&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_t _lock; &lt;span class=&quot;comment&quot;&gt;// 确保 CF 中的 Run Loop 线程安全&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; _name; &lt;span class=&quot;comment&quot;&gt;// Mode 的名字，比如 kCFRunLoopDefaultMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Boolean _stopped; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; _padding[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFMutableSetRef&lt;/span&gt; _sources0; &lt;span class=&quot;comment&quot;&gt;// Input Sources 中的 Custom Input Source 集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFMutableSetRef&lt;/span&gt; _sources1; &lt;span class=&quot;comment&quot;&gt;// Input Sources 中的 Port-Based Source 集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFMutableArrayRef&lt;/span&gt; _observers; &lt;span class=&quot;comment&quot;&gt;// Run Loop Observers 数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFMutableArrayRef&lt;/span&gt; _timers; &lt;span class=&quot;comment&quot;&gt;// Timer Sources 数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFMutableDictionaryRef&lt;/span&gt; _portToV1SourceMap; &lt;span class=&quot;comment&quot;&gt;// 端口(port)与 sources1 的映射表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __&lt;span class=&quot;built_in&quot;&gt;CFPortSet&lt;/span&gt; _portSet; &lt;span class=&quot;comment&quot;&gt;// 端口集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;... 省略后面源码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Core Foundation 中所有实例都以 &lt;code&gt;CFRuntimeBase&lt;/code&gt; 开始，仅限于内部使用。通过它的结构可以看出这里面保存了一些基本信息，比如 isa 指针，retainCount 等。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; __CFRuntimeBase &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uintptr_t&lt;/span&gt; _cfisa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; _cfinfo[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; __LP64__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; _rc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; CFRuntimeBase;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同 Mode 直接是靠事件的来源 (Source) 区分的，而不是事件的类型。比方说 Mode 不能只搭配鼠标点击事件或键盘事件，但可以让某个 Mode 监听一些端口、暂停 timer、修改 source 和 observer 等。&lt;/p&gt;
&lt;p&gt;下面的表格列出了一些系统定义的 Mode，大多数情况下会使用 Default Mode。&lt;a href=&quot;http://iphonedevwiki.net/index.php/CFRunLoop&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iphonedevwiki&lt;/a&gt; 列出了 Core Foundation 中更多的 Mode，很多是系统私有的。使用不同的 Mode 可以过滤不同 Source 发出的事件，比如在要求时效性操作的场景下使用自定义 Mode 来阻止低优先级 Source 发送事件。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mode&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Default&lt;/td&gt;
&lt;td&gt;NSDefaultRunLoopMode (Cocoa), kCFRunLoopDefaultMode (Core Foundation)&lt;/td&gt;
&lt;td&gt;大多数操作下最常用的 Mode，运行 Run Loop 和配置 Source 的首选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Connection&lt;/td&gt;
&lt;td&gt;NSConnectionReplyMode (Cocoa)&lt;/td&gt;
&lt;td&gt;Cocoa 中结合 NSConnection 使用，用于监听回复(Reply)，极少用到。(已弃用)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Modal&lt;/td&gt;
&lt;td&gt;NSModalPanelRunLoopMode (Cocoa)&lt;/td&gt;
&lt;td&gt;Cocoa 中 modal panel 使用它接收与之相关 Source 的事件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Event tracking&lt;/td&gt;
&lt;td&gt;NSEventTrackingRunLoopMode (Cocoa), UITrackingRunLoopMode (Cocoa Touch)&lt;/td&gt;
&lt;td&gt;Cocoa 用它限定鼠标拖拽事件之类的用户交互轨迹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Common modes&lt;/td&gt;
&lt;td&gt;NSRunLoopCommonModes (Cocoa), kCFRunLoopCommonModes (Core Foundation)&lt;/td&gt;
&lt;td&gt;可配置的通用模式集合，将某个 Input Source 关联到此 Mode 也会将其关联到集合中所有 Mode。Cocoa 框架中的 Common modes 默认包含 Default, Modal, Event tracking 三种 Mode；CF 框架起初只包含 Default，可以使用 &lt;code&gt;CFRunLoopAddCommonMode&lt;/code&gt;函数向集合中添加自定义 Mode。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Input-Sources&quot;&gt;&lt;a href=&quot;#Input-Sources&quot; class=&quot;headerlink&quot; title=&quot;Input Sources&quot;&gt;&lt;/a&gt;Input Sources&lt;/h4&gt;&lt;p&gt;Input Sources 有两种实现：基于端口(Port-based)和自定义(Custom)，它们都向线程异步分发事件，而唯一的不同就是被发信号（signal）的方式。基于端口的事件源会自动由内核发信号，自定义事件源需要被其他线程手动发信号。&lt;/p&gt;
&lt;p&gt;Input Source 会被添加到一些 Mode 中，如果某个 input source 不在当前的 Mode 中，那么它生成的事件在 run loop 处于正确的 mode 之前会先被 hold 住。&lt;/p&gt;
&lt;h5 id=&quot;Port-Based-Sources-Source1&quot;&gt;&lt;a href=&quot;#Port-Based-Sources-Source1&quot; class=&quot;headerlink&quot; title=&quot;Port-Based Sources(Source1)&quot;&gt;&lt;/a&gt;Port-Based Sources(Source1)&lt;/h5&gt;&lt;p&gt;Cocoa 和 Core Foundation 使用端口相关的对象和函数提供了对创建基于端口的事件源的内建支持。比如在 Cocoa 中，只需创建一个端口对象并使用 &lt;code&gt;NSPort&lt;/code&gt; 的方法来向 run loop 添加端口。端口对象为你处理好了创建和配置 input source 的事情。&lt;/p&gt;
&lt;p&gt;在 Core Foundation 中需要手动创建端口和 run loop source。涉及到的 API 有 &lt;code&gt;CFMachPortRef&lt;/code&gt;, &lt;code&gt;CFMessagePortRef&lt;/code&gt;, &lt;code&gt;CFSocketRef&lt;/code&gt;。&lt;/p&gt;
&lt;h5 id=&quot;Custom-Input-Sources-Source0&quot;&gt;&lt;a href=&quot;#Custom-Input-Sources-Source0&quot; class=&quot;headerlink&quot; title=&quot;Custom Input Sources(Source0)&quot;&gt;&lt;/a&gt;Custom Input Sources(Source0)&lt;/h5&gt;&lt;p&gt;只能使用 Core Foundation 中的 &lt;code&gt;CFRunLoopSourceRef&lt;/code&gt; 相关函数来创建自定义事件源。在处理到来的事件、从 run loop 移除 source 后都会有函数回调，可以通过实现这些回调函数来配置 source。&lt;/p&gt;
&lt;p&gt;除此之外还需定义事件分发机制。source 有一部分是在单独的线程运行的，负责为 input source 提供数据，并在数据准备好后对 source 发信号。事件分发机制取决于开发者，但别弄得太过复杂。&lt;/p&gt;
&lt;h5 id=&quot;Cocoa-Perform-Selector-Sources&quot;&gt;&lt;a href=&quot;#Cocoa-Perform-Selector-Sources&quot; class=&quot;headerlink&quot; title=&quot;Cocoa Perform Selector Sources&quot;&gt;&lt;/a&gt;Cocoa Perform Selector Sources&lt;/h5&gt;&lt;p&gt;Cocoa 定义了一种在任何线程执行 &lt;code&gt;selector&lt;/code&gt; 的 custom input source。与机遇端口的事件源相同之处是在目标线程依次执行 &lt;code&gt;selector&lt;/code&gt;，缓解了一条线程运行多个方法时可能发生的同步问题；不同之处在于 &lt;code&gt;selector&lt;/code&gt; 执行后会将 source 从 run loop 挪走。&lt;/p&gt;
&lt;p&gt;在任意线程 perform selector 的前置条件是线程必须有一个活跃的 run loop。对于自己创建的线程，&lt;code&gt;selector&lt;/code&gt; 直到启动 run loop 之后才会运行；主线程会自动配置并运行 run loop，然而要在应用的 &lt;code&gt;applicationDidFinishLaunching:&lt;/code&gt; delegate 方法调用后才生效。Run Loop 每次循环会处理队列中所有的 &lt;code&gt;selector&lt;/code&gt;，而不是循环一次处理一个。&lt;/p&gt;
&lt;p&gt;下表中列出了 &lt;code&gt;NSObject&lt;/code&gt; 类提供的在任何线程执行 &lt;code&gt;selector&lt;/code&gt; 的 API。在任何线程下，只要能拿到 Objective-C 对象就能使用下面的 API，包括 POSIX 线程。这些方法并不会为了执行 &lt;code&gt;selector&lt;/code&gt; 真的去创建一个新线程。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;performSelectorOnMainThread:withObject:waitUntilDone:&lt;/code&gt;, &lt;code&gt;performSelectorOnMainThread:withObject:waitUntilDone:modes:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在应用主线程 run loop 的下次循环执行特定的 &lt;code&gt;selector&lt;/code&gt;，并提供了选项可以在执行 &lt;code&gt;selector&lt;/code&gt; 之前阻塞当前线程。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;performSelector:onThread:withObject:waitUntilDone:&lt;/code&gt;, &lt;code&gt;performSelector:onThread:withObject:waitUntilDone:modes:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在任意 &lt;code&gt;NSThread&lt;/code&gt; 对象执行 &lt;code&gt;selector&lt;/code&gt;，同上。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;performSelector:withObject:afterDelay:&lt;/code&gt;, &lt;code&gt;performSelector:withObject:afterDelay:inModes:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在当前线程 run loop 的下次循环延迟一段时间执行 &lt;code&gt;selector&lt;/code&gt;。因为需要等到下次 run loop 循环才会依次执行队列中的 &lt;code&gt;selector&lt;/code&gt;，所以本身就会有一点延时。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cancelPreviousPerformRequestsWithTarget:&lt;/code&gt;, &lt;code&gt;cancelPreviousPerformRequestsWithTarget:selector:object:&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;取消 &lt;code&gt;performSelector:withObject:afterDelay:&lt;/code&gt; 或 &lt;code&gt;performSelector:withObject:afterDelay:inModes:&lt;/code&gt; 方法向当前线程发送的消息。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;Timer-Sources&quot;&gt;&lt;a href=&quot;#Timer-Sources&quot; class=&quot;headerlink&quot; title=&quot;Timer Sources&quot;&gt;&lt;/a&gt;Timer Sources&lt;/h4&gt;&lt;p&gt;Timer source 会在未来一个预定时间向线程同步分发事件。线程可以用 Timer 来通知自己做一些事情。比如用户在搜索栏输入一连串字符之后的某个时间自动搜索一次结果。正是因为有了个延时，才让用户有机会在自动搜索发生前尽可能打出想要的搜索字符串。&lt;/p&gt;
&lt;p&gt;Timer 并不是实时的，会有误差。如果一个 timer 不在正在运行的 run loop 监控的 mode 中，需要一直等到 run loop 运行在一个支持这个 timer 的 mode 时，timer 才会触发。如果一个 timer 触发的时候恰巧 run loop 正忙于执行某个 handler 程序，这个 timer 的 handler 程序需要等到下次才会通过 run loop 执行。如果 run loop 根本不在运行，timer 永远都不会触发。&lt;/p&gt;
&lt;p&gt;可以配置 timer 只生成一次或重复多次事件。重复的 timer 每次会根据已经编排的触发时间自动重新编排。如果实际的触发时间太过于延迟，甚至是晚了一个或多个周期，那么也只会触发一次，而非连续多次。之后会重新编排下次触发时间。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSTimer&lt;/code&gt; 和 &lt;code&gt;CFRunLoopTimerRef&lt;/code&gt; 是 toll-free bridged 的，设置好时间和回调函数后加到正在运行的 run loop 中即可。具体信息可以参考这两个类的 API 文档。&lt;/p&gt;
&lt;h4 id=&quot;Run-Loop-Observers&quot;&gt;&lt;a href=&quot;#Run-Loop-Observers&quot; class=&quot;headerlink&quot; title=&quot;Run Loop Observers&quot;&gt;&lt;/a&gt;Run Loop Observers&lt;/h4&gt;&lt;p&gt;不同于 source 在同步或异步事件发生时触发，observer 会在 run loop 运行期间的某些特殊地方触发。这些 run loop 中『特殊』的地方列举如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进入 run loop&lt;/li&gt;
&lt;li&gt;当 run loop 即将处理一个 timer&lt;/li&gt;
&lt;li&gt;当 run loop 即将处理一个 input source&lt;/li&gt;
&lt;li&gt;当 run loop 即将休眠&lt;/li&gt;
&lt;li&gt;当 run loop 已经被唤醒，但在它处理唤醒它的事件之前&lt;/li&gt;
&lt;li&gt;退出 run loop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用 Core Foundation 的 &lt;code&gt;CFRunLoopObserverRef&lt;/code&gt; 类创建 run loop observer。&lt;code&gt;CFRunLoopObserverRef&lt;/code&gt; 记录了回调函数和关注的事件类型（上面 6 种时间的掩码），它跟 timer 一样可以在创建的时候选择只触发一次或重复触发。&lt;/p&gt;
&lt;h4 id=&quot;Run-Loop-事件顺序&quot;&gt;&lt;a href=&quot;#Run-Loop-事件顺序&quot; class=&quot;headerlink&quot; title=&quot;Run Loop 事件顺序&quot;&gt;&lt;/a&gt;Run Loop 事件顺序&lt;/h4&gt;&lt;p&gt;线程的 run loop 每次运行都会处理待决的事件，并为绑定的所有 observer 生成通知。次序如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通知 observer 已经进入 run loop&lt;/li&gt;
&lt;li&gt;通知 observer 有 timer 将要触发&lt;/li&gt;
&lt;li&gt;通知 observer 有非基于端口的 input source 将要触发&lt;/li&gt;
&lt;li&gt;触发所有已就绪的非基于端口的 input source&lt;/li&gt;
&lt;li&gt;如果一个基于端口的 input source 已就绪并等待触发，立即处理事件，并转至&lt;strong&gt;第 9 步&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通知 observer 线程即将休眠&lt;/li&gt;
&lt;li&gt;让线程休眠，直到被以下条件唤醒：&lt;ul&gt;
&lt;li&gt;有基于端口的 input source 事件到达&lt;/li&gt;
&lt;li&gt;timer 触发&lt;/li&gt;
&lt;li&gt;run loop 设定的超时时间到了&lt;/li&gt;
&lt;li&gt;run loop 被手动唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通知 observer 线程刚刚被唤醒&lt;/li&gt;
&lt;li&gt;处理待决事件&lt;ul&gt;
&lt;li&gt;如果用户定义的 timer 触发了，处理 timer 事件并重启 run loop，跳回到&lt;strong&gt;第 2 步&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;如果 input source 触发了，分发事件&lt;/li&gt;
&lt;li&gt;如果 run loop 被唤醒且没有超时，重启 run loop，跳回到&lt;strong&gt;第 2 步&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通知 observer 已经退出 run loop&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于 timer 和 input source 对 observer 的通知是在事件真正发生前就已经发出，所以这之间会有时间间隔。如果对事件时间的掌控很严格，可以使用休眠和唤醒的通知帮你关联实际事件的时机。&lt;/p&gt;
&lt;p&gt;由于 timer 和其他周期性事件是在运行 run loop 的时候发送的，绕过 loop 会打断这些事件的发送。典型的案例就是在实现鼠标追踪程序中写了个不断从应用请求事件的循环逻辑，按理说应该是让应用正常地分发这些事件，而不是主动抓取。这就导致 timer 被开发者写的循环逻辑阻塞而一直无法触发。&lt;/p&gt;
&lt;p&gt;可以使用 run loop 对象将其手动唤醒，其他事件也可能导致 run loop 被唤醒。比如添加另一个非基于端口的 input source 唤醒 run loop，input source 就能立刻被处理，而不是一直等到其他事件发生。&lt;/p&gt;
&lt;h3 id=&quot;该何时使用-Run-Loop？&quot;&gt;&lt;a href=&quot;#该何时使用-Run-Loop？&quot; class=&quot;headerlink&quot; title=&quot;该何时使用 Run Loop？&quot;&gt;&lt;/a&gt;该何时使用 Run Loop？&lt;/h3&gt;&lt;p&gt;需要手动运行 run loop 的场景只有一个，那就是你创建次级线程的时候。应用主线程的 run loop 是基础设施中至关重要的部分。应用框架会把自动运行主线程 run loop 的程序写好，比如 &lt;code&gt;UIApplication&lt;/code&gt; 或 &lt;code&gt;NSApplication&lt;/code&gt; 中的 &lt;code&gt;run&lt;/code&gt;。如果使用 Xcode 带的模板创建工程，千万不要去调用这些方法。&lt;/p&gt;
&lt;p&gt;对于次级线程是否有必要手动开启 run loop，那要看实际情况了。比如使用线程执行一些预先设定好的运行时间较长的任务，可能就不需要开启 run loop 了。Run Loop 是为『想要与线程更多交互』的场景准备的，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 input source 与其他线程通信&lt;/li&gt;
&lt;li&gt;在线程中使用 timer&lt;/li&gt;
&lt;li&gt;在 Cocoa 应用中使用任何 &lt;code&gt;performSelector...&lt;/code&gt; 系列的方法&lt;/li&gt;
&lt;li&gt;让线程执行周期性任务&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果选择使用 run loop，配置和启动是很简单的。可是就所有的线程编程来说，应该计划好在合适的场景下退出次级线程，总比强行退出要好。&lt;/p&gt;
&lt;h3 id=&quot;使用-Run-Loop-对象&quot;&gt;&lt;a href=&quot;#使用-Run-Loop-对象&quot; class=&quot;headerlink&quot; title=&quot;使用 Run Loop 对象&quot;&gt;&lt;/a&gt;使用 Run Loop 对象&lt;/h3&gt;&lt;p&gt;Run Loop 对象提供了向 run loop 中添加 input source、timer 和 run-loop observer 的主要接口，并运行起来。每个线程都关联一个单独的 run loop。在 Cocoa 中，Run Loop 对象是个 &lt;code&gt;NSRunLoop&lt;/code&gt; 类的实例，在 Core Foundation 中是 &lt;code&gt;CFRunLoopRef&lt;/code&gt; 指针。但它们不是 toll-free bridge 的。&lt;/p&gt;
&lt;h4 id=&quot;获取-Run-Loop-对象&quot;&gt;&lt;a href=&quot;#获取-Run-Loop-对象&quot; class=&quot;headerlink&quot; title=&quot;获取 Run Loop 对象&quot;&gt;&lt;/a&gt;获取 Run Loop 对象&lt;/h4&gt;&lt;p&gt;获取当前线程的 run loop 对象有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cocoa 框架 &lt;code&gt;NSRunLoop&lt;/code&gt; 的类方法 &lt;code&gt;currentRunLoop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFRunLoopGetCurrent&lt;/code&gt; 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以从 &lt;code&gt;NSRunLoop&lt;/code&gt; 对象的 &lt;code&gt;getCFRunLoop&lt;/code&gt; 方法获取到 &lt;code&gt;CFRunLoopRef&lt;/code&gt;，这样就可以传给 Core Foundation 程序使用了。二者都指向同一个 run loop，所以可以混用。&lt;/p&gt;
&lt;h4 id=&quot;配置-Run-Loop&quot;&gt;&lt;a href=&quot;#配置-Run-Loop&quot; class=&quot;headerlink&quot; title=&quot;配置 Run Loop&quot;&gt;&lt;/a&gt;配置 Run Loop&lt;/h4&gt;&lt;p&gt;在次级线程运行 run loop 之前，必须向其添加至少一个 input source 或 timer，否则 run loop 会因没有可监控的 source 而在运行后立刻退出。&lt;/p&gt;
&lt;p&gt;除了用 source 外，还可以用 run loop observer 观察 run loop 的各种运行阶段。做法是创建一个 &lt;code&gt;CFRunLoopObserverRef&lt;/code&gt; 类型的对象并用 &lt;code&gt;CFRunLoopAddObserver&lt;/code&gt; 函数将其添加到 run loop 中。注意的是只能用 Core Foundation 创建 run loop observer，Cocoa 框架无能为力。&lt;/p&gt;
&lt;p&gt;下面的示例代码在线程入口函数中创建了 run loop observer 并将其添加到 run loop 中。observer 监听了 run loop 所有的活动，并省略了回调函数 &lt;code&gt;myRunLoopObserver&lt;/code&gt; 的实现。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)threadMain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// The application uses garbage collection, so no autorelease pool is needed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt;* myRunLoop = [&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Create a run loop observer and attach it to the run loop.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopObserverContext&lt;/span&gt;  context = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopObserverRef&lt;/span&gt;    observer = &lt;span class=&quot;built_in&quot;&gt;CFRunLoopObserverCreate&lt;/span&gt;(k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorDefault&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopAllActivities&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;myRunLoopObserver, &amp;amp;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (observer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt;    cfLoop = [myRunLoop get&lt;span class=&quot;built_in&quot;&gt;CFRunLoop&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;CFRunLoopAddObserver&lt;/span&gt;(cfLoop, observer, k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopDefaultMode&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Create and schedule the timer.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(doFireTimer:) userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;    loopCount = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Run the run loop 10 times to let the timer fire.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [myRunLoop runUntilDate:[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; dateWithTimeIntervalSinceNow:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loopCount--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (loopCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了不让 run loop 刚运行就立刻退出，上面的代码向 run loop 添加了一个 timer。因为 timer 一旦触发就无效了，依然会导致 run loop 退出，所以这里 &lt;code&gt;repeats&lt;/code&gt; 参数传入 &lt;code&gt;YES&lt;/code&gt;。但这样会让 run loop 一直运行很久，并需要周期性触发 timer 来唤醒线程，这实际上是轮询的另一种形式罢了。相比之下，input source 等待事件发生后才唤醒线程，在这之前线程保持休眠。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CFRunLoopObserverContext&lt;/code&gt; 结构体定义如下，查文档可知第二个参数 &lt;code&gt;info&lt;/code&gt; 会在回调函数被调用时当做参数传入，这里传入 &lt;code&gt;self&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFIndex&lt;/span&gt;	version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *	info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*retain)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*release)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;	(*copyDescription)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;built_in&quot;&gt;CFRunLoopObserverContext&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;启动-Run-Loop&quot;&gt;&lt;a href=&quot;#启动-Run-Loop&quot; class=&quot;headerlink&quot; title=&quot;启动 Run Loop&quot;&gt;&lt;/a&gt;启动 Run Loop&lt;/h4&gt;&lt;p&gt;只有在应用的次级线程才需要启动 run loop，而且需要有至少一个 input source 或 timer，否则 run loop 启动后会立刻退出。&lt;/p&gt;
&lt;p&gt;启动 run loop 的几种方式包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无条件：&lt;/li&gt;
&lt;li&gt;设定时间限制&lt;/li&gt;
&lt;li&gt;处于特定模式（Mode）&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;th&gt;方法名(NSRunLoop)&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;无条件&lt;/td&gt;
&lt;td&gt;run&lt;/td&gt;
&lt;td&gt;最简单但也最不可取的方案。会让线程进入无限循环，对 run loop 很难控制。可以添加和移除 input source 和 timer，但只能通过 kill 的方式停止 run loop。也无法在自定义模式下运行 run loop。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;设定时间限制&lt;/td&gt;
&lt;td&gt;runUntilDate:&lt;/td&gt;
&lt;td&gt;run loop 在收到事件或超时前会一直运行。run loop 结束后可以重启，并处理接下来的事情。比上一种方式更好，提供了时间限制。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;处于特定模式&lt;/td&gt;
&lt;td&gt;runMode:beforeDate:&lt;/td&gt;
&lt;td&gt;相比上一种方式，增加了在特定模式下运行 run loop。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt; 和 &lt;code&gt;runUntilDate:&lt;/code&gt; 方法会使用 &lt;code&gt;NSDefaultRunLoopMode&lt;/code&gt; 参数不断调用 &lt;code&gt;runMode:beforeDate:&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;下面的代码展示了一个线程入口函数的大纲，主要是 run loop 的基本构成。本质上就是配置好 run loop 并运行后，每轮运行后不断检查是否需要退出线程。使用 Core Foundation 可以检查 run loop 每次运行的结果，并决定是否需要退出线程。当然也可以使用上面 &lt;code&gt;NSRunLoop&lt;/code&gt; 提供的 API，而且无需检查每次运行的返回值。后面会有例子。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)skeletonThreadMain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Set up an autorelease pool here if not using garbage collection.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; done = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Add your sources or timers to the run loop and do any other setup.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Start the run loop but return after each source is handled.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SInt32    result = &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRunInMode&lt;/span&gt;(k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopDefaultMode&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// If a source explicitly stopped the run loop, or if there are no&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// sources or timers, go ahead and exit.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((result == k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopRunStopped&lt;/span&gt;) || (result == k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopRunFinished&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            done = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Check for any other exit conditions here and set the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// done variable as needed.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!done);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Clean up code here. Be sure to release any allocated autorelease pools.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实上面这段调用 &lt;code&gt;CFRunLoopRunInMode()&lt;/code&gt; 的逻辑跟 &lt;code&gt;CFRunLoopRun()&lt;/code&gt; 差不多。&lt;/p&gt;
&lt;p&gt;可以递归启动 run loop。也就是说可以在 input source 或 timer 的回调处理函数中调用 &lt;code&gt;CFRunLoopRun&lt;/code&gt;, &lt;code&gt;CFRunLoopRunInMode&lt;/code&gt; 或上面提到的 &lt;code&gt;NSRunLoop&lt;/code&gt; 的三个方法，而且嵌套的 run loop 可以在任意 Mode 下运行。&lt;/p&gt;
&lt;h4 id=&quot;退出-Run-Loop&quot;&gt;&lt;a href=&quot;#退出-Run-Loop&quot; class=&quot;headerlink&quot; title=&quot;退出 Run Loop&quot;&gt;&lt;/a&gt;退出 Run Loop&lt;/h4&gt;&lt;p&gt;在 run loop 已经将事件处理之前有两种退出的方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给 run loop 配置 timeout 值&lt;/li&gt;
&lt;li&gt;告诉 run loop 停止&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;推荐第一种方法，因为它会让 run loop 完成一切正常的处理，包括在退出前向 observer 发通知。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;CFRunLoopStop&lt;/code&gt; 函数停止 run loop 的结果跟第一种方式差不多，run loop 会把剩下的通知发出去，然后退出。不同点在于可以用这个函数停止以无条件方式（&lt;code&gt;run&lt;/code&gt; 方法）启动的 run loop。要注意的是 &lt;code&gt;CFRunLoopStop&lt;/code&gt; 只会停止对 &lt;code&gt;CFRunLoopRun&lt;/code&gt; 和 &lt;code&gt;CFRunLoopRunInMode&lt;/code&gt; 的调用，对于 Cocoa 框架相当于只停止一次 &lt;code&gt;runMode:beforeDate:&lt;/code&gt; 的调用，而不是退出 run loop。stop 一次运行和 exit 整个 run loop 是不一样的。&lt;/p&gt;
&lt;p&gt;虽然移除 run loop 的 input source 和 timer 也会导致其退出，但这种方法不可靠。因为有些系统程序会向 run loop 中添加 input source，开发者根本不知道有这回事，移除的时候就会漏掉，自然就不会导致 run loop 退出。&lt;/p&gt;
&lt;h4 id=&quot;线程安全和-Run-Loop-对象&quot;&gt;&lt;a href=&quot;#线程安全和-Run-Loop-对象&quot; class=&quot;headerlink&quot; title=&quot;线程安全和 Run Loop 对象&quot;&gt;&lt;/a&gt;线程安全和 Run Loop 对象&lt;/h4&gt;&lt;p&gt;使用 Core Foundation 中的函数操作 run loop 对象一般都是线程安全的，可以在任何线程调用。如果要更改 run loop 的配置，尽可能在 run loop 自己的线程操作。&lt;/p&gt;
&lt;p&gt;Cocoa 中对应的 &lt;code&gt;NSRunLoop&lt;/code&gt; 内部并不是线程安全的，必须在 run loop 所在的线程修改它。向其他线程的 run loop 添加 input source 或 timer 都会导致 crash 或异常行为。&lt;/p&gt;
&lt;h3 id=&quot;配置-Run-Loop-Source&quot;&gt;&lt;a href=&quot;#配置-Run-Loop-Source&quot; class=&quot;headerlink&quot; title=&quot;配置 Run Loop Source&quot;&gt;&lt;/a&gt;配置 Run Loop Source&lt;/h3&gt;&lt;p&gt;主要演示使用 Cocoa 和 Core Foundation 设置各种类型的 source。&lt;/p&gt;
&lt;h4 id=&quot;定义-Custom-Input-Source&quot;&gt;&lt;a href=&quot;#定义-Custom-Input-Source&quot; class=&quot;headerlink&quot; title=&quot;定义 Custom Input Source&quot;&gt;&lt;/a&gt;定义 Custom Input Source&lt;/h4&gt;&lt;p&gt;创建 custom input source 需要阐明如下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想让 input source 处理的信息&lt;/li&gt;
&lt;li&gt;用于让外部 client 获知如何联系 input source 的 scheduler 程序&lt;/li&gt;
&lt;li&gt;执行任何 client 发出请求的 perform 程序&lt;/li&gt;
&lt;li&gt;作废 input source 的 cancellation 程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Custom Input Source 的配置是很灵活的，scheduler，perform 和 cancellation 这几个程序的实现才是关键。然而 input source 剩余的大部分行为都发生在这些程序的外部，需要开发者自己定义一个机制，用于向 input source 传递数据和暴漏 input source 给其他线程。&lt;/p&gt;
&lt;p&gt;下图展示了一个配置 custom input source 的例子。主线程维护了对 input source 及其 custom command buffer 和 run loop 的引用。当主线程想要把一个任务切换到 worker 线程的时候，会向 command buffer 发送一条命令。这条命令包含了 worker 线程启动任务所需的任何信息。由于主线程和 worker 线程的 input source 都可以存取 command buffer，所以存取操作需要被同步。一旦命令发出，主线程对 input source 发信号，并唤醒 worker 线程的 run loop。Run Loop 一旦收到了唤醒命令，就会调用 input source 的 handler 程序，handler 会处理 command buffer 中的命令。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Art/custominputsource.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面会解释上图中 custom input source 的实现，并展示需要实现的关键代码。&lt;/p&gt;
&lt;h5 id=&quot;定义-Input-Source&quot;&gt;&lt;a href=&quot;#定义-Input-Source&quot; class=&quot;headerlink&quot; title=&quot;定义 Input Source&quot;&gt;&lt;/a&gt;定义 Input Source&lt;/h5&gt;&lt;p&gt;需要用 Core Foundation 配置 run loop source，并将其加到 run loop 中。因为 handler 都是基于 C 的函数，所以需要将其封装成 Objective-C 的接口。下面的代码封装了两个 Objective-C 类：&lt;code&gt;RunLoopSource&lt;/code&gt; 封装了 &lt;code&gt;CFRunLoopSourceRef&lt;/code&gt;，并管理一个 command buffer，并使用 buffer 接收其他线程的消息。&lt;code&gt;RunLoopContext&lt;/code&gt; 封装了 &lt;code&gt;CFRunLoopRef&lt;/code&gt; 和 &lt;code&gt;RunLoopSource&lt;/code&gt; 指针，用于向应用主线程传递 source 对象和 run loop 引用。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RunLoopSource&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopSourceRef&lt;/span&gt; runLoopSource;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt;* commands;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)init;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addToCurrentRunLoop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)invalidate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Handler method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)sourceFired;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Client interface for registering commands to process&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addCommand:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)command withData:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)fireAllCommandsOnRunLoop:(&lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt;)runloop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// These are the CFRunLoopSourceRef callback functions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RunLoopSourceScheduleRoutine (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; rl, &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RunLoopSourcePerformRoutine (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; RunLoopSourceCancelRoutine (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; rl, &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt; mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// RunLoopContext is a container object used during registration of the input source.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RunLoopContext&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt;        runLoop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RunLoopSource*        source;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; runLoop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) RunLoopSource* source;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)initWithSource:(RunLoopSource*)src andLoop:(&lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt;)loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面会分别列出 scheduler，handler 和 cancellation 三个 C 语言的回调函数的实现。&lt;/p&gt;
&lt;p&gt;第一个被调用的函数是 scheduler，当你把 source 添加到 run loop 中时就会调用。按照之前的实例，我们的 input source 只有一个 client，也就是主线程。这里 scheduler 做的事情就是用 application delegate 的 &lt;code&gt;registerSource:&lt;/code&gt; 方法将 &lt;code&gt;RunLoopContext&lt;/code&gt; 对象中的信息传递过去，以便之后 application delegate 与 input source 通信时使用。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void RunLoopSourceScheduleRoutine (&lt;span class=&quot;name&quot;&gt;void&lt;/span&gt; *info, CFRunLoopRef rl, CFStringRef mode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RunLoopSource* obj = (&lt;span class=&quot;name&quot;&gt;__bridge&lt;/span&gt; RunLoopSource*)info&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AppDelegate*   del = [AppDelegate sharedAppDelegate]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RunLoopContext* theContext = [[RunLoopContext alloc] initWithSource&lt;span class=&quot;symbol&quot;&gt;:obj&lt;/span&gt; andLoop&lt;span class=&quot;symbol&quot;&gt;:rl&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [del performSelectorOnMainThread:@selector(&lt;span class=&quot;name&quot;&gt;registerSource&lt;/span&gt;:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                withObject&lt;span class=&quot;symbol&quot;&gt;:theContext&lt;/span&gt; waitUntilDone&lt;span class=&quot;symbol&quot;&gt;:NO&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 input source 被发信号（signal）的时候，用于处理数据的 perform 函数会被调用，它是最重要的回调之一。这里很简单地转发给了 &lt;code&gt;RunLoopSource&lt;/code&gt; 的 &lt;code&gt;sourceFired&lt;/code&gt; 方法。后面会列出 &lt;code&gt;sourceFired&lt;/code&gt; 处理 command buffer 的逻辑。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void RunLoopSourcePerformRoutine (&lt;span class=&quot;name&quot;&gt;void&lt;/span&gt; *info)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RunLoopSource*  obj = (&lt;span class=&quot;name&quot;&gt;__bridge&lt;/span&gt; RunLoopSource*)info&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [obj sourceFired]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果用调用 &lt;code&gt;CFRunLoopSourceInvalidate&lt;/code&gt; 函数之类的方式将 input source 从它的 run loop 中移除，系统会调用 input source 的 cancellation 程序。可以在这个程序中告诉 client 可以移除对 input source 的引用了，因为它已经失效了。下面的 cancellation 回调函数将传入的 &lt;code&gt;RunLoopSource&lt;/code&gt; 对象和 &lt;code&gt;CFRunLoopRef&lt;/code&gt; 打包成一个 &lt;code&gt;RunLoopContext&lt;/code&gt;，并传给 application delegate。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void RunLoopSourceCancelRoutine (&lt;span class=&quot;name&quot;&gt;void&lt;/span&gt; *info, CFRunLoopRef rl, CFStringRef mode)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RunLoopSource* obj = (&lt;span class=&quot;name&quot;&gt;__bridge&lt;/span&gt; RunLoopSource*)info&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    AppDelegate* del = [AppDelegate sharedAppDelegate]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RunLoopContext* theContext = [[RunLoopContext alloc] initWithSource&lt;span class=&quot;symbol&quot;&gt;:obj&lt;/span&gt; andLoop&lt;span class=&quot;symbol&quot;&gt;:rl&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [del performSelectorOnMainThread:@selector(&lt;span class=&quot;name&quot;&gt;removeSource&lt;/span&gt;:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                withObject&lt;span class=&quot;symbol&quot;&gt;:theContext&lt;/span&gt; waitUntilDone&lt;span class=&quot;symbol&quot;&gt;:YES&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这三个回调函数中 application delegate 的 &lt;code&gt;registerSource:&lt;/code&gt; 和 &lt;code&gt;removeSource:&lt;/code&gt; 方法暂时省略，后面会列出。这三个回调函数会在创建 custom input source 的时候当做参数传入。&lt;/p&gt;
&lt;h5 id=&quot;在-Run-Loop-上装载-Input-Source&quot;&gt;&lt;a href=&quot;#在-Run-Loop-上装载-Input-Source&quot; class=&quot;headerlink&quot; title=&quot;在 Run Loop 上装载 Input Source&quot;&gt;&lt;/a&gt;在 Run Loop 上装载 Input Source&lt;/h5&gt;&lt;p&gt;下面代码是 &lt;code&gt;RunLoopSource&lt;/code&gt; 类的 &lt;code&gt;init&lt;/code&gt; 和 &lt;code&gt;addToCurrentRunLoop&lt;/code&gt; 方法。&lt;code&gt;init&lt;/code&gt; 创建了一个 &lt;code&gt;CFRunLoopSourceRef&lt;/code&gt;，这才是真正被添加到 run loop 中的类型。当 worker 线程调用 &lt;code&gt;addToCurrentRunLoop&lt;/code&gt; 方法时，才会将 input source 装载到 run loop 中，并在此时调用 &lt;code&gt;RunLoopSourceScheduleRoutine&lt;/code&gt; 回调函数。之后就可以启动 run loop 了。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopSourceContext&lt;/span&gt;    context = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (__bridge &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *)(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;), &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;RunLoopSourceScheduleRoutine,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;RunLoopSourceCancelRoutine,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;RunLoopSourcePerformRoutine&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    runLoopSource = &lt;span class=&quot;built_in&quot;&gt;CFRunLoopSourceCreate&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    commands = [[&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addToCurrentRunLoop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; runLoop = &lt;span class=&quot;built_in&quot;&gt;CFRunLoopGetCurrent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFRunLoopAddSource&lt;/span&gt;(runLoop, runLoopSource, k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopDefaultMode&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;CFRunLoopSourceContext&lt;/code&gt; 结构体描述了 custom input source（source0）的上下文，而 &lt;code&gt;CFRunLoopSourceContext1&lt;/code&gt; 结构体描述了 port-based input source（source1）的上下文。看文档可知，&lt;code&gt;info&lt;/code&gt; 用于向回调函数传入数据，&lt;code&gt;schedule&lt;/code&gt;，&lt;code&gt;cancel&lt;/code&gt; 和 &lt;code&gt;perform&lt;/code&gt; 分别对应上面代码中传入的三个回调函数。将这些信息打包进上下文后，就可以用 &lt;code&gt;CFRunLoopSourceCreate&lt;/code&gt; 函数创建 run loop 对象了。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFIndex&lt;/span&gt;	version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *	info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*retain)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*release)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;	(*copyDescription)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Boolean	(*equal)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info1, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFHashCode&lt;/span&gt;	(*hash)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*schedule)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; rl, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopMode&lt;/span&gt; mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*cancel)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; rl, &lt;span class=&quot;built_in&quot;&gt;CFRunLoopMode&lt;/span&gt; mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*perform)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;built_in&quot;&gt;CFRunLoopSourceContext&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFIndex&lt;/span&gt;	version;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *	info;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*retain)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*release)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFStringRef&lt;/span&gt;	(*copyDescription)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Boolean	(*equal)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info1, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CFHashCode&lt;/span&gt;	(*hash)(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if (TARGET_OS_MAC &amp;amp;&amp;amp; !(TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)) || (TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mach_port_t	(*getPort)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *	(*perform)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *msg, &lt;span class=&quot;built_in&quot;&gt;CFIndex&lt;/span&gt; size, &lt;span class=&quot;built_in&quot;&gt;CFAllocatorRef&lt;/span&gt; allocator, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *	(*getPort)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;	(*perform)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *info);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;built_in&quot;&gt;CFRunLoopSourceContext1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两种 Context 的结构很相似，所以 &lt;code&gt;CFRunLoopSourceRef&lt;/code&gt; 中使用 &lt;code&gt;union&lt;/code&gt; 存储这两个互斥存在的结构体，内存占用上只差一个指针：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__CFRunLoopSource&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;CFRunLoopSourceRef&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__CFRunLoopSource&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRuntimeBase _base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    uint32_t _bits;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_mutex_t _lock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFIndex _order;			&lt;span class=&quot;regexp&quot;&gt;/* immutable */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFMutableBagRef _runLoops;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CFRunLoopSourceContext version0;	&lt;span class=&quot;regexp&quot;&gt;/* immutable, except invalidation */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CFRunLoopSourceContext1 version1;	&lt;span class=&quot;regexp&quot;&gt;/* immutable, except invalidation */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; _context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Input-Source-与-Client-的协作&quot;&gt;&lt;a href=&quot;#Input-Source-与-Client-的协作&quot; class=&quot;headerlink&quot; title=&quot;Input Source 与 Client 的协作&quot;&gt;&lt;/a&gt;Input Source 与 Client 的协作&lt;/h5&gt;&lt;p&gt;自定义的 input source 需要由其他线程手动发信号。重点是其线程在这之前会一直处于休眠状态，所以一定要让其他线程知道这个 input source，并能与之通信。&lt;/p&gt;
&lt;p&gt;当 input source 第一次装载到 run loop 的时候，可以向 client 发送注册 input source 的请求。可以将一个 input source 直接或间接注册到多个 client 中。下面的代码展示了 application delegate 提供的注册方法 &lt;code&gt;registerSource:&lt;/code&gt;，之前提到过回调函数 &lt;code&gt;RunLoopSourceScheduleRoutine&lt;/code&gt; 的实现会调用 &lt;code&gt;registerSource:&lt;/code&gt;。也就是说执行流程是 install(&lt;code&gt;addToCurrentRunLoop&lt;/code&gt;) -&amp;gt; schedule(&lt;code&gt;RunLoopSourceScheduleRoutine&lt;/code&gt;) -&amp;gt; register(&lt;code&gt;registerSource:&lt;/code&gt;)。对应地，当 input source 从 run loop 中被移除，回调函数 &lt;code&gt;RunLoopSourceCancelRoutine&lt;/code&gt; 中会调用 &lt;code&gt;removeSource:&lt;/code&gt; 方法。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;registerSource:&lt;/span&gt;(RunLoopContext*)sourceInfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [sourcesToPing &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;sourceInfo];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;span class=&quot;string&quot;&gt;removeSource:&lt;/span&gt;(RunLoopContext*)sourceInfo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id    objToRemove = nil;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (RunLoopContext* context &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sourcesToPing)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([context &lt;span class=&quot;string&quot;&gt;isEqual:&lt;/span&gt;sourceInfo])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            objToRemove = context;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (objToRemove)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [sourcesToPing &lt;span class=&quot;string&quot;&gt;removeObject:&lt;/span&gt;objToRemove];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码逻辑很简单，就是 application delegate 维护了一个存储 &lt;code&gt;RunLoopContext&lt;/code&gt; 对象的可变数组 &lt;code&gt;sourcesToPing&lt;/code&gt;，并提供了增加和移除数组元素的两个方法。&lt;/p&gt;
&lt;h5 id=&quot;给-Input-Source-发信号-Signal&quot;&gt;&lt;a href=&quot;#给-Input-Source-发信号-Signal&quot; class=&quot;headerlink&quot; title=&quot;给 Input Source 发信号(Signal)&quot;&gt;&lt;/a&gt;给 Input Source 发信号(Signal)&lt;/h5&gt;&lt;p&gt;Client 在将数据传递给 input source 后，还需要给 source 发信号，并唤醒 run loop。发信号的作用是让 run loop 知道 input source 已经做好被处理的准备了。当信号发出时线程可能还在休眠，所以必须唤醒 run loop。否则可能会导致延迟处理 input source。&lt;/p&gt;
&lt;p&gt;下面代码展示了 &lt;code&gt;RunLoopSource&lt;/code&gt; 对象的 &lt;code&gt;fireCommandsOnRunLoop&lt;/code&gt; 方法。当 Client 准备好让 source 处理 command buffer 中的命令时会调用这个方法。&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;fireCommandsOnRunLoop:&lt;span class=&quot;params&quot;&gt;(CFRunLoopRef)&lt;/span&gt;runloop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRunLoopSourceSignal&lt;span class=&quot;params&quot;&gt;(runLoopSource)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFRunLoopWakeUp&lt;span class=&quot;params&quot;&gt;(runloop)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置-Timer-Source&quot;&gt;&lt;a href=&quot;#配置-Timer-Source&quot; class=&quot;headerlink&quot; title=&quot;配置 Timer Source&quot;&gt;&lt;/a&gt;配置 Timer Source&lt;/h4&gt;&lt;p&gt;使用不同框架创建 timer 对象的方式略有差别：Cocoa 中使用 &lt;code&gt;NSTimer&lt;/code&gt;，Core Foundation 中使用 &lt;code&gt;CFRunLoopTimerRef&lt;/code&gt; 类型。二者是 toll-free bridged 的，但是 &lt;code&gt;NSTimer&lt;/code&gt; 提供的 API 更便捷。比如可以用下面的方法马上创建并安排（schedule）好一个 timer：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;scheduledTimerWithTimeInterval:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;target:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;selector:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;userInfo:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;repeats:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;scheduledTimerWithTimeInterval:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;invocation:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;repeats:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这些方法会创建 timer 并添加到当前线程 run loop 的 Default Mode 中。也可以手动创建一个 &lt;code&gt;NSTimer&lt;/code&gt; 对象并用 &lt;code&gt;NSRunLoop&lt;/code&gt; 的 &lt;code&gt;addTimer:forMode:&lt;/code&gt; 方法将其添加到 run loop 的指定 Mode 中。这些方法做的事情都差不多，只是对 timer 配置的掌控程度不同。下面的代码展示了两种添加 timer 的方式：第一个 timer 延迟 1 秒触发并每隔 0.1 秒重复触发，第二个 timer 延迟 0.2 秒触发然后每隔 0.2 秒重复触发。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt;* myRunLoop = [&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create and schedule the first timer.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt;* futureDate = [&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; dateWithTimeIntervalSinceNow:&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt;* myTimer = [[&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; alloc] initWithFireDate:futureDate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        interval:&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(myDoFireTimer1:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myRunLoop addTimer:myTimer forMode:&lt;span class=&quot;built_in&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create and schedule the second timer.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(myDoFireTimer2:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        repeats:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面的代码展示了如何使用 Core Foundation 函数配置 timer。虽然这个例子并没有在 &lt;code&gt;context&lt;/code&gt; 结构体中传递任何用户定义的信息，但你可以用这个结构体传送 timer 所需的一切自定义信息。可以查看文档了解下 &lt;code&gt;CFRunLoopTimerRef&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CFRunLoopRef&lt;/span&gt; runLoop = &lt;span class=&quot;built_in&quot;&gt;CFRunLoopGetCurrent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CFRunLoopTimerContext&lt;/span&gt; context = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CFRunLoopTimerRef&lt;/span&gt; timer = &lt;span class=&quot;built_in&quot;&gt;CFRunLoopTimerCreate&lt;/span&gt;(k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorDefault&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &amp;amp;my&lt;span class=&quot;built_in&quot;&gt;CFTimerCallback&lt;/span&gt;, &amp;amp;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CFRunLoopAddTimer&lt;/span&gt;(runLoop, timer, k&lt;span class=&quot;built_in&quot;&gt;CFRunLoopCommonModes&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置-Port-Based-Input-Source&quot;&gt;&lt;a href=&quot;#配置-Port-Based-Input-Source&quot; class=&quot;headerlink&quot; title=&quot;配置 Port-Based Input Source&quot;&gt;&lt;/a&gt;配置 Port-Based Input Source&lt;/h4&gt;&lt;p&gt;Cocoa 和 Core Foundation 都提供了用于线程间或进程间通讯的基于端口（port-based）的对象。下面展示了如何用几种不同类型的端口来设置端口通信。&lt;/p&gt;
&lt;h5 id=&quot;配置-NSMachPort-对象&quot;&gt;&lt;a href=&quot;#配置-NSMachPort-对象&quot; class=&quot;headerlink&quot; title=&quot;配置 NSMachPort 对象&quot;&gt;&lt;/a&gt;配置 &lt;code&gt;NSMachPort&lt;/code&gt; 对象&lt;/h5&gt;&lt;p&gt;使用 &lt;code&gt;NSMachPort&lt;/code&gt; 对象建立本地连接过程如下：创建 &lt;code&gt;NSMachPort&lt;/code&gt; 对象并添加到主线程的 run loop 中。当启动次级线程时将这个 &lt;code&gt;NSMachPort&lt;/code&gt; 对象传递给次级线程的入口函数。次级线程会用这个 &lt;code&gt;NSMachPort&lt;/code&gt; 对象往主线程发消息。&lt;/p&gt;
&lt;h6 id=&quot;实现主线程代码&quot;&gt;&lt;a href=&quot;#实现主线程代码&quot; class=&quot;headerlink&quot; title=&quot;实现主线程代码&quot;&gt;&lt;/a&gt;实现主线程代码&lt;/h6&gt;&lt;p&gt;下面的代码展示了启动次级 worker 线程的主要代码。使用 Cocoa 框架写出的代码要比 Core Foundation 的少多了，但效果几乎一样。有个不同点是 Cocoa 直接传递 &lt;code&gt;NSPort&lt;/code&gt; 对象，而 Core Foundation 传递端口名字符串。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)launchThread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSPort&lt;/span&gt;* myPort = [&lt;span class=&quot;built_in&quot;&gt;NSMachPort&lt;/span&gt; port];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (myPort)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// This class handles incoming port messages.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [myPort setDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Install the port as an input source on the current run loop.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] addPort:myPort forMode:&lt;span class=&quot;built_in&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Detach the thread. Let the worker release the port.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; detachNewThreadSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(LaunchThreadWithPort:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               toTarget:[MyWorkerClass class] withObject:myPort];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们想要在次级线程启动一切正常后给主线程通过本地端口通信报个平安，下面的 &lt;code&gt;handlePortMessage:&lt;/code&gt; 方法会在线程自己的本地端口收到数据后被调用。&lt;code&gt;NSPortMessage&lt;/code&gt; 持有两个端口对象：发送端口和接收端口。&lt;code&gt;handlePortMessage:&lt;/code&gt; 方法中使用 &lt;code&gt;[portMessage sendPort]&lt;/code&gt; 获取到了发送端口对象，也就是次级线程拥有的本地端口。也就是次级线程启动后会给主线程发消息，告知自己的端口对象，主线程会将其存下来以备日后使用。&lt;code&gt;msgid&lt;/code&gt; 标记了消息的唯一 ID。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#define kCheckinMessage 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Handle responses from the worker thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)handlePortMessage:(&lt;span class=&quot;built_in&quot;&gt;NSPortMessage&lt;/span&gt; *)portMessage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; message = [portMessage msgid];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSPort&lt;/span&gt;* distantPort = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (message == kCheckinMessage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Get the worker thread’s communications port.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        distantPort = [portMessage sendPort];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Retain and save the worker port for later use.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; storeDistantPort:distantPort];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Handle other messages.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;实现次级线程代码&quot;&gt;&lt;a href=&quot;#实现次级线程代码&quot; class=&quot;headerlink&quot; title=&quot;实现次级线程代码&quot;&gt;&lt;/a&gt;实现次级线程代码&lt;/h6&gt;&lt;p&gt;次级线程的入口函数会被传入主线程的端口对象，配置好次级线程后，使用主线程的端口对象来与主线程通信。下面代码中的 &lt;code&gt;MyWorkerClass&lt;/code&gt; 是个辅助类，它的 &lt;code&gt;sendCheckinMessage:&lt;/code&gt; 方法负责创建次级线程的本地端口，并发消息给主线程。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)LaunchThreadWithPort:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)inData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSAutoreleasePool&lt;/span&gt;*  pool = [[&lt;span class=&quot;built_in&quot;&gt;NSAutoreleasePool&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Set up the connection between this thread and the main thread.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSPort&lt;/span&gt;* distantPort = (&lt;span class=&quot;built_in&quot;&gt;NSPort&lt;/span&gt;*)inData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MyWorkerClass*  workerObj = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [workerObj sendCheckinMessage:distantPort];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [distantPort release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Let the run loop process things.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] runMode:&lt;span class=&quot;built_in&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            beforeDate:[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; distantFuture]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (![workerObj shouldExit]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [workerObj release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [pool release];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;t&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在线程间的单向通信中，同一个 &lt;code&gt;NSMachPort&lt;/code&gt; 对象既可以其所在线程的本地端口，又可以是其他线程的远程端口。也就是线程创建的本地端口对象对于其他现场来说是远程端口。下面的代码展示了 &lt;code&gt;sendCheckinMessage:&lt;/code&gt; 方法的实现。它创建了次级线程的本地端口，并使用主线程从 &lt;code&gt;LaunchThreadWithPort:&lt;/code&gt; 方法传来的端口对象，构建了 &lt;code&gt;NSPortMessage&lt;/code&gt; 消息对象，设置好 &lt;code&gt;msgid&lt;/code&gt; 后，然后立即发送出去。&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Worker thread&lt;span class=&quot;built_in&quot;&gt; check-in &lt;/span&gt;method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)sendCheckinMessage:(NSPort*)outPort&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Retain&lt;span class=&quot;built_in&quot;&gt; and &lt;/span&gt;save the remote port for future use.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self setRemotePort:outPort];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create&lt;span class=&quot;built_in&quot;&gt; and &lt;/span&gt;configure the worker thread port.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSPort* myPort = [NSMachPort port];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [myPort setDelegate:self];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [[NSRunLoop currentRunLoop] addPort:myPort forMode:NSDefaultRun&lt;span class=&quot;class&quot;&gt;LoopMode];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // Create the&lt;span class=&quot;built_in&quot;&gt; check-in &lt;/span&gt;message.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSPortMessage* messageObj = [[NSPortMessage alloc] initWithSendPort:outPort&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                         receivePort:myPort components:nil];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; if &lt;/span&gt;(messageObj)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Finish configuring the message&lt;span class=&quot;built_in&quot;&gt; and &lt;/span&gt;send it immediately.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [messageObj setMsgid:kCheckinMessage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [messageObj sendBeforeDate:[NSDate date]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;配置-NSMessagePort-对象&quot;&gt;&lt;a href=&quot;#配置-NSMessagePort-对象&quot; class=&quot;headerlink&quot; title=&quot;配置 NSMessagePort 对象&quot;&gt;&lt;/a&gt;配置 &lt;code&gt;NSMessagePort&lt;/code&gt; 对象&lt;/h5&gt;&lt;p&gt;如果用 &lt;code&gt;NSMessagePort&lt;/code&gt; 对象建立本地连接，不能在线程间简单地传递端口对象，而是必须要拿到端口名称。使用一个字符串作为键在 &lt;code&gt;NSMessagePortNameServer&lt;/code&gt; 注册本地端口，并把这个字符串传给另外的线程，这样就能通过这个字符串获取到端口对象，接着用它通信。下面的代码展示了使用创建和注册 &lt;code&gt;NSMessagePort&lt;/code&gt; 的过程。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSPort&lt;/span&gt;* localPort = [[&lt;span class=&quot;built_in&quot;&gt;NSMessagePort&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Configure the object and add it to the current run loop.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[localPort setDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop] addPort:localPort forMode:&lt;span class=&quot;built_in&quot;&gt;NSDefaultRunLoopMode&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Register the port using a specific name. The name must be unique.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* localPortName = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;MyPortName&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;NSMessagePortNameServer&lt;/span&gt; sharedInstance] registerPort:localPort&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     name:localPortName];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;使用-Core-Foundation-配置基于端口的-Input-Source&quot;&gt;&lt;a href=&quot;#使用-Core-Foundation-配置基于端口的-Input-Source&quot; class=&quot;headerlink&quot; title=&quot;使用 Core Foundation 配置基于端口的 Input Source&quot;&gt;&lt;/a&gt;使用 Core Foundation 配置基于端口的 Input Source&lt;/h5&gt;&lt;p&gt;使用 Core Foundation 在主线程和其他线程之间建立一个双向通讯通道需要写更多的代码。&lt;/p&gt;
&lt;p&gt;首先在主线程中发起一个 worker 线程，然后创建端口用于监听其他线程的消息。跟之前使用 Cocoa 不同在于这里是将一个唯一的端口名传给 worker 线程的入口函数，而不是端口对象。&lt;/p&gt;
&lt;p&gt;官方文档中创建 &lt;code&gt;CFMessagePortRef&lt;/code&gt; 的相关方法在 iOS 7 之后已经失效了，而且使用 Cocoa 提供的 API 更加方便，这里不再贴出 Core Foundation 版本的示例代码。&lt;/p&gt;
&lt;p&gt;所以不推荐使用 Core Foundation 建立线程端口通讯，但是 macOS 上建立进程间通讯还是可以尝试的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html#//apple_ref/doc/uid/10000057i-CH16-SW1&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第二部分。关于 Run Loop 的内容。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/&quot;&gt;Threading Programming Guide(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/&quot;&gt;Threading Programming Guide(3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://yulingtianxia.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Threading Programming Guide(1)</title>
    <link href="http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/"/>
    <id>http://yulingtianxia.com/blog/2017/08/28/Threading-Programming-Guide-1/</id>
    <published>2017-08-28T01:20:24.000Z</published>
    <updated>2017-10-14T16:41:52.086Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第一部分。&lt;/p&gt;
&lt;p&gt;其实苹果建议使用对线程的高级封装，比如 operation objects and Grand Central Dispatch，它们使用方便更加高效，可以参考 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Concurrency Programming Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但了解更底层一些的内容其实更有趣，难道不是么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/&quot;&gt;Threading Programming Guide(2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/&quot;&gt;Threading Programming Guide(3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;线程相关概念&quot;&gt;&lt;a href=&quot;#线程相关概念&quot; class=&quot;headerlink&quot; title=&quot;线程相关概念&quot;&gt;&lt;/a&gt;线程相关概念&lt;/h2&gt;&lt;h3 id=&quot;概要和术语&quot;&gt;&lt;a href=&quot;#概要和术语&quot; class=&quot;headerlink&quot; title=&quot;概要和术语&quot;&gt;&lt;/a&gt;概要和术语&lt;/h3&gt;&lt;p&gt;线程的概念在计算机组成原理中学过，在各个系统中的实现和行为也都大同小异。多线程编程有利也有弊：在提升程序运行效率和用户体验的同时也带来了线程间同步的种种问题。现在大多数 CPU 都是多核的，所以很多程序都是并发执行来提升性能。多线程编程的代码更复杂，尤其是在存取同一个数据时更需要注意。这里讲一讲 macOS 和 iOS 提供的有关线程的 API 以及同步机制。&lt;/p&gt;
&lt;p&gt;如果把进程(process)理解为一个运行着多个线程(thread)的程序，线程运算调度一条独立路径的代码。任务(work)可以理解成需要被执行的代码块或函数之类的抽象概念。&lt;/p&gt;
&lt;h3 id=&quot;替代技术&quot;&gt;&lt;a href=&quot;#替代技术&quot; class=&quot;headerlink&quot; title=&quot;替代技术&quot;&gt;&lt;/a&gt;替代技术&lt;/h3&gt;&lt;p&gt;亲自去创建底层意义上的线程很难操作，也很容易出问题。创建一个新的线程会消耗很多 CPU 和内存资源，所以尽可能先考虑下是否真的有必要创建线程。对于直接手动创建线程执行任务来说，可以替代的技术还有很多：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operation objects: 封装了一套在辅助线程执行任务的 API，只关注提交的任务即可，线程管理的底层工作交给系统。&lt;/li&gt;
&lt;li&gt;Grand Central Dispatch: 也是基于任务的 API，功能更强大，队列的使用更加灵活，强烈推荐。&lt;/li&gt;
&lt;li&gt;Idle-time notifications: 如果一项任务较轻且优先级较低，可以趁着不忙的时候执行。使用通知中心的 &lt;code&gt;postNotification:&lt;/code&gt; 方法可以立即抛通知，这是个同步执行的方法。其实通知会先进入一个先入先出的通知队列中，出列后才会被分发到通知中心。可以使用 &lt;code&gt;NSNotificationQueue&lt;/code&gt; 的 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/notificationqueue/1416340-enqueue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;enqueueNotification:postingStyle:&lt;/code&gt;&lt;/a&gt; 方法异步发送通知，postingStyle 设为 &lt;a href=&quot;https://developer.apple.com/documentation/foundation/notificationqueue.postingstyle/1418001-whenidle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;NSPostWhenIdle&lt;/code&gt;&lt;/a&gt; 即可在 Runloop 空闲时发送通知。&lt;/li&gt;
&lt;li&gt;Asynchronous functions: 使用系统自带的异步函数，把线程创建和管理的工作交给系统。&lt;/li&gt;
&lt;li&gt;Timers: 使用定时器在主线程做一些微小的周期性任务，而无需手动创建线程。&lt;/li&gt;
&lt;li&gt;Separate processes: 如果任务跟应用关联不紧密、占用大量内存或是需要 root 权限，可以创建进程，而非线程。使用 &lt;code&gt;fork&lt;/code&gt; 函数创建进程后记得调用 &lt;code&gt;exec&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;苹果系统的支持&quot;&gt;&lt;a href=&quot;#苹果系统的支持&quot; class=&quot;headerlink&quot; title=&quot;苹果系统的支持&quot;&gt;&lt;/a&gt;苹果系统的支持&lt;/h3&gt;&lt;p&gt;macOS 和 iOS 提供了几种创建线程的技术，以及对线程之间管理和同步任务的支持。&lt;/p&gt;
&lt;h4 id=&quot;对线程的封装&quot;&gt;&lt;a href=&quot;#对线程的封装&quot; class=&quot;headerlink&quot; title=&quot;对线程的封装&quot;&gt;&lt;/a&gt;对线程的封装&lt;/h4&gt;&lt;p&gt;线程的底层实现是在 Mach 层的，虽然它提供了抢占式多任务处理模型和线程调度能力，但我们常用的还是 POSIX API 及其衍生出来的 API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cocoa 线程: &lt;code&gt;NSThread&lt;/code&gt; 类以及 &lt;code&gt;NSObject&lt;/code&gt; 提供的线程 API。&lt;/li&gt;
&lt;li&gt;POSIX 线程: C 语言接口，比如创建线程的函数 &lt;code&gt;pthread_create&lt;/code&gt;。 &lt;code&gt;pthread_t&lt;/code&gt; 为线程句柄。&lt;/li&gt;
&lt;li&gt;Multiprocessing Services: 远古产物，弃用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同系统中线程的生命周期都差不多，在线程退出之前，会在运行(running)、阻塞(blocked)、准备(ready)状态之间切换。创建线程需要指定其入口函数，入口函数 &lt;code&gt;return&lt;/code&gt; 后会终止线程，线程会被系统回收。创建线程会占内存和 CPU 资源，所以在入口函数里执行比较重的任务才值当。或者可以用 Runloop 做一些循环的任务。&lt;/p&gt;
&lt;h4 id=&quot;Run-Loops&quot;&gt;&lt;a href=&quot;#Run-Loops&quot; class=&quot;headerlink&quot; title=&quot;Run Loops&quot;&gt;&lt;/a&gt;Run Loops&lt;/h4&gt;&lt;p&gt;run loop 管理了线程接收的事件。它监听事件 source，有事件发生时，系统会唤起线程并将事件发送给 run loop，然后调用事件对应的 handler 函数。没有事件发生时会让线程休眠。&lt;/p&gt;
&lt;p&gt;如果没有 run loop，线程的入口函数 &lt;code&gt;return&lt;/code&gt; 后就会终止线程。run loop 可以让线程保活的同时消耗最少的资源。它在没有事件发生时会让线程休眠，而不是让 CPU 空转。run loop 与线程是一对一的关系，线程创建时默认是没有 run loop 的。&lt;/p&gt;
&lt;p&gt;系统的主线程自动配置好了 run loop，可以通过 &lt;code&gt;CFRunLoopGetMain()&lt;/code&gt; 获得。其他线程可以使用 &lt;code&gt;CFRunLoopGetCurrent()&lt;/code&gt; 获得对应的 run loop 对象，在第一次执行 &lt;code&gt;CFRunLoopGetCurrent()&lt;/code&gt; 时，线程才会创建它的 run loop。获得 run loop 对象后，可以配置其事件处理函数，并运行 run loop。&lt;/p&gt;
&lt;p&gt;run loop 对应的 API 有两种：&lt;code&gt;NSRunLoop&lt;/code&gt; 和 &lt;code&gt;CFRunLoop&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NSRunLoop&lt;/code&gt; Cocoa 的 API,非线程安全，必须在当前线程上下文中调用。它是对 &lt;code&gt;CFRunLoop&lt;/code&gt; 的封装。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CFRunLoop&lt;/code&gt; 为 &lt;code&gt;Core Foundation&lt;/code&gt; 框架的 C 语言 API，线程安全。使用 &lt;code&gt;CFRunLoopRef&lt;/code&gt; 引用 run loop 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;同步工具&quot;&gt;&lt;a href=&quot;#同步工具&quot; class=&quot;headerlink&quot; title=&quot;同步工具&quot;&gt;&lt;/a&gt;同步工具&lt;/h4&gt;&lt;p&gt;多线程操作同一资源时要注意同步的问题，可以使用加锁、条件变量、原子操作等技术进行同步。&lt;/p&gt;
&lt;p&gt;加锁可以确保一段代码在某一时刻只能在一个线程中执行，最基本的是互斥锁(mutex, mutual exclusion)。Cocoa 提供了很多种锁来满足各种场景。&lt;/p&gt;
&lt;p&gt;当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。条件变量通过阻塞线程的方式确保了任务按正确的顺序执行，POSIX 层和 Foundation 框架都有 条件变量对应的 API。此外，Cocoa 提供的 operation objects 也能设置任务执行的顺序。&lt;/p&gt;
&lt;p&gt;原子操作适合同步多线程对标量数据类型的数学和逻辑运算，它跟锁相比，采用硬件指令优化，是一种轻量级同步工具。&lt;/p&gt;
&lt;h4 id=&quot;跨线程通信&quot;&gt;&lt;a href=&quot;#跨线程通信&quot; class=&quot;headerlink&quot; title=&quot;跨线程通信&quot;&gt;&lt;/a&gt;跨线程通信&lt;/h4&gt;&lt;p&gt;因为线程之间共用它们所属进程的相同空间，所以跨线程通信的方法有很多。它们各有优劣，按复杂度从低到高排列如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接发消息: &lt;code&gt;performSelector:onThread:withObject:waitUntilDone:modes:&lt;/code&gt; 等方法。&lt;/li&gt;
&lt;li&gt;全局变量，共用内存和对象: 相比直接发消息更快更容易，但也更脆弱。需要加锁之类的同步机制来确保代码的正确性，否则可能会导致竞态条件、错乱数据和crash。&lt;/li&gt;
&lt;li&gt;条件变量: 之前说过它也是一种线程同步工具，只有当符合某个条件时才让线程执行下去，相当于守门员的作用。&lt;/li&gt;
&lt;li&gt;Run loop sources: run loop input sources 有两种：port-based和 custom。这里说的是使用 custom run loop source 在某个线程上接收应用特定的消息。整个事件分发机制需要自己实现，包括设置 handler 函数，为 custom run loop source 提供数据，并手动给它发信号（signal）。&lt;/li&gt;
&lt;li&gt;端口和套接字: 基于端口的跨线程通信技术更复杂但也更可靠。更重要的是端口和套接字也可以与外部实体通信，比如其他进程和服务。为了高效，端口使用 port-based run loop sources 实现。&lt;/li&gt;
&lt;li&gt;消息队列: 古老的 Multiprocessing Services 定义了一个简单方便的 FIFO 队列来管理数据进出，但没其他跨线程通信技术效率高。&lt;/li&gt;
&lt;li&gt;Cocoa distributed objects: 对端口通信进行高级封装的 Cocoa API，其开销之大更适合跨进程通信。不建议用于跨线程通信，杀鸡用牛刀。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;设计秘籍&quot;&gt;&lt;a href=&quot;#设计秘籍&quot; class=&quot;headerlink&quot; title=&quot;设计秘籍&quot;&gt;&lt;/a&gt;设计秘籍&lt;/h3&gt;&lt;p&gt;这些建议和经验可以帮助开发者确保代码逻辑正确，性能更佳。&lt;/p&gt;
&lt;h4 id=&quot;避免直接创建线程&quot;&gt;&lt;a href=&quot;#避免直接创建线程&quot; class=&quot;headerlink&quot; title=&quot;避免直接创建线程&quot;&gt;&lt;/a&gt;避免直接创建线程&lt;/h4&gt;&lt;p&gt;手动创建线程很蛋疼还容易出错，所以要用其他 API 隐式实现并发，之前也提到了一些替代技术。建议使用 GCD 和 operation objects，可以根据当前系统负载自动调整活跃线程数量。&lt;/p&gt;
&lt;h4 id=&quot;让线程占用率适当&quot;&gt;&lt;a href=&quot;#让线程占用率适当&quot; class=&quot;headerlink&quot; title=&quot;让线程占用率适当&quot;&gt;&lt;/a&gt;让线程占用率适当&lt;/h4&gt;&lt;p&gt;手动创建管理线程时要注意线程消耗宝贵的系统资源，要做到物尽其所用，不能杀鸡用牛刀。更要毫不犹豫地终止大部分时间处于空闲状态的线程。线程占用的大量内存中有一部分是联动(wired)内存，所以释放那些使用率低的线程不仅可以减少应用的内存占用，也会为其他系统进程的运行释放更多物理内存。&lt;/p&gt;
&lt;p&gt;科普下苹果的内存使用相关术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wired(联动): 系统核心占用的，一直存在 RAM 上，永远不会被挪到硬盘中。联动内存占用跟使用的应用有关。&lt;/li&gt;
&lt;li&gt;Active(活跃): 表示这些内存数据正在使用中，或者刚被使用过。&lt;/li&gt;
&lt;li&gt;Inactive(非活跃): 表示这些内存中的数据是有效的，但是最近没有被使用。如果打开一个应用再退出，其所占用内存会变为非活跃内存，再次打开这个应用时如果那块内存没被其他应用使用，那么会那块非活跃内存会变为活跃内存（无需从硬盘加载），使得应用打开速度更快。&lt;/li&gt;
&lt;li&gt;Free(可用空间): RAM 中没被使用的空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在终止线程前需要记录下当前的性能指标，并在终止线程之后再次记录，参照对比下是否真的提升了性能。&lt;/p&gt;
&lt;h4 id=&quot;避免共用数据结构&quot;&gt;&lt;a href=&quot;#避免共用数据结构&quot; class=&quot;headerlink&quot; title=&quot;避免共用数据结构&quot;&gt;&lt;/a&gt;避免共用数据结构&lt;/h4&gt;&lt;p&gt;避免线程相关资源冲突最简单的方法是每个线程都拷贝一份需要用的数据。线程之间通讯越少越好。&lt;/p&gt;
&lt;p&gt;即便对所有多线程场景下的共用数据加锁，就算再怎么仔细，代码可能依然在语义上不安全。比如代码逻辑要求用特定的顺序修改公用的数据结构，否则就会出问题。使用基于事务模型的代码可以弥补这个缺陷，但会进而抵消了多线程的性能优势。将资源竞争消灭在萌芽之中才会让方案更简单，性能更出众。&lt;/p&gt;
&lt;h4 id=&quot;线程与用户界面&quot;&gt;&lt;a href=&quot;#线程与用户界面&quot; class=&quot;headerlink&quot; title=&quot;线程与用户界面&quot;&gt;&lt;/a&gt;线程与用户界面&lt;/h4&gt;&lt;p&gt;建议在接受跟用户相关的事件和更新界面时使用主线程。因为 Cocoa 跟 UI 相关的 API 使用了一些全局变量，如果在其他线程去更新 UI 或者处理用户事件，就会发生一些同步问题。&lt;/p&gt;
&lt;p&gt;当然这个『在主线程更新界面』的规则也有些例外，比如在次级线程进行图像处理可以显著地提升性能。如果拿不准主意，那就干脆全在主线程去做吧。这样代码逻辑简单，易维护。&lt;/p&gt;
&lt;p&gt;Cocoa 图形绘制可以参考 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CocoaDrawingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003290&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cocoa Drawing Guide&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;退出应用时注意线程的行为&quot;&gt;&lt;a href=&quot;#退出应用时注意线程的行为&quot; class=&quot;headerlink&quot; title=&quot;退出应用时注意线程的行为&quot;&gt;&lt;/a&gt;退出应用时注意线程的行为&lt;/h4&gt;&lt;p&gt;POSIX 线程按照资源释放方式分两种：joinable(non-detached) 和 detached。&lt;/p&gt;
&lt;p&gt;detached 类型的线程结束之后系统会自动回收其资源。假如在 A 线程中使用 &lt;code&gt;pthread_create&lt;/code&gt; 创建线程 B，不传入线程属性的话默认是 joinable 类型的线程。需要在线程 A 调用 &lt;code&gt;pthread_join&lt;/code&gt; 来连接，这样才会在线程 B 结束后回收其资源。&lt;/p&gt;
&lt;p&gt;默认情况下只有主线程是 joinable 的，当所有 joinable 线程都结束了，它们所属的进程也就终止执行了。因为系统会认为 detached 线程做的都是可选的任务，所以当用户退出了一个应用时，通常会立刻结束所有的 detached 线程。&lt;/p&gt;
&lt;p&gt;如果想让线程在后台做一些诸如保存数据到磁盘之类的重要工作，需要使用 joinable 类型的线程，以防止应用退出时数据丢失。但大多数的对线程高层封装的 API 不会默认创建 joinable 线程，所以需要使用 POSIX API 的 &lt;code&gt;pthread_create&lt;/code&gt; 创建 joinable 线程。&lt;/p&gt;
&lt;p&gt;在使用 Cocoa API 时，&lt;code&gt;applicationShouldTerminate:&lt;/code&gt; delegate 方法可以延迟一阵子退出应用或取消退出。如果需要延迟退出程序，还要在所有关键线程完成任务之后调用 &lt;code&gt;replyToApplicationShouldTerminate:&lt;/code&gt; 方法告诉 &lt;code&gt;NSApplication&lt;/code&gt; 对象是否可以真的退出了。&lt;/p&gt;
&lt;h4 id=&quot;处理异常&quot;&gt;&lt;a href=&quot;#处理异常&quot; class=&quot;headerlink&quot; title=&quot;处理异常&quot;&gt;&lt;/a&gt;处理异常&lt;/h4&gt;&lt;p&gt;每个线程都负责捕获和处理其调用栈上抛出的异常，任何线程上没被捕获的异常都能终止其所属进程。不能将没捕获的线程抛给其他线程处理。&lt;/p&gt;
&lt;p&gt;如果想要通知其他线程有异常，应该先捕获异常，然后给其他线程发消息。异常被捕获后可能会继续执行，或者等待命令，或者退出。&lt;/p&gt;
&lt;p&gt;Cocoa 的 &lt;code&gt;NSException&lt;/code&gt; 被捕获后可以在线程之间传递。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@synchronized&lt;/code&gt; 会自动捕获和处理异常。&lt;/p&gt;
&lt;h4 id=&quot;干净利落地终止线程&quot;&gt;&lt;a href=&quot;#干净利落地终止线程&quot; class=&quot;headerlink&quot; title=&quot;干净利落地终止线程&quot;&gt;&lt;/a&gt;干净利落地终止线程&lt;/h4&gt;&lt;p&gt;最好是让线程运行结束后自动退出，如果万不得已非要立刻终止线程，会导致线程没有释放和清理它占用的资源，比如：创建的内存、打开的文件以及获得的其他资源。无法回收这些资源意味着内存泄露和其他潜在的问题。&lt;/p&gt;
&lt;h4 id=&quot;Library-中的线程安全&quot;&gt;&lt;a href=&quot;#Library-中的线程安全&quot; class=&quot;headerlink&quot; title=&quot;Library 中的线程安全&quot;&gt;&lt;/a&gt;Library 中的线程安全&lt;/h4&gt;&lt;p&gt;开发第三方库的时候必须假设调用方随时都会处于多线程环境中，代码中的关键部分一定要加锁。虽然可以监听 &lt;code&gt;NSWillBecomeMultiThreadedNotification&lt;/code&gt; 通知来获知应用处于多线程，但可能 library 被调用之前就已经发过通知了。别指望当调用方处于多线程环境时才创建锁，而是需要在调用初始化 library 的方法中就提前创建好锁对象。但如果在 library 的静态初始化中创建锁会延长 library 的加载时间，影响性能。&lt;/p&gt;
&lt;p&gt;互斥锁的加锁和解锁操作要成对出现，不要指望调用方提供一个线程安全的环境，对数据结构该用锁就用。&lt;/p&gt;
&lt;h2 id=&quot;线程管理&quot;&gt;&lt;a href=&quot;#线程管理&quot; class=&quot;headerlink&quot; title=&quot;线程管理&quot;&gt;&lt;/a&gt;线程管理&lt;/h2&gt;&lt;p&gt;每个进程都至少有一个线程，每个线程代表了一条执行代码的独立路径。应用从一个线程的 &lt;code&gt;main&lt;/code&gt; 函数开始运行，然后产生新的线程。每个线程在进程内部都是独立的实体，具有自己的调用栈，并由内核做时分调度。线程可以与其他线程和进程通信，执行 I/O 操作等。一个应用进程内部的所有现场共享虚拟内存空间，并与进程拥有相同的访问权限。&lt;/p&gt;
&lt;h3 id=&quot;线程成本&quot;&gt;&lt;a href=&quot;#线程成本&quot; class=&quot;headerlink&quot; title=&quot;线程成本&quot;&gt;&lt;/a&gt;线程成本&lt;/h3&gt;&lt;p&gt;使用线程对应用和系统来说都是有成本的，具体体现在内存使用和性能上。每个线程需要占用内核内存空间和程序内存空间。内核会使用联动(wired)内存为线程创建用于管理线程和协调调度的数据结构。线程的栈空间和数据存储在程序的内存空间中。这些数据结构大部分会在创建线程的时候初始化，进程也因与内核有必要的交互而成本变得相对更高。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;成本项&lt;/th&gt;
&lt;th&gt;大致成本&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;内核数据结构&lt;/td&gt;
&lt;td&gt;大约 1 KB&lt;/td&gt;
&lt;td&gt;用于存储线程数据结构和属性的内存，很多都是联动（wired）内存，所以不能在磁盘上分页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;栈空间&lt;/td&gt;
&lt;td&gt;次级线程：512 KB ; macOS 主线程：8 MB ; iOS 主线程：1 MB&lt;/td&gt;
&lt;td&gt;次级线程的栈空间最小为 16 KB，且必须是 4 KB 的整数倍。创建线程的时候可以设置栈空间的大小，但是只有在需要用它的时候才会创建真的分页内存。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;td&gt;大约 90 微秒（macOS 10.5，2 GHz Core Duo CPU，1 GB RAM）&lt;/td&gt;
&lt;td&gt;从开始创建线程到线程入口函数开始执行的耗时，是个粗略的估值。处理器负载、计算机速度、系统和程序可用内存都会对创建时间造成较大的影响。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;由于底层内核的支持，operation objects 经常可以更快地创建线程。它使用内核线程池中已经存在的线程来节省创建时间，而不是每次都从零开始创建线程。&lt;/p&gt;
&lt;p&gt;写线程相关代码也是一种生产成本。设计多线程程序又是需要对应用数据结构的组织方式进行彻底的改变。避免使用同步，因为它在设计较差的应用上会严重降低性能。设计数据结构和 debug 线程相关代码都会增加开发成本。&lt;/p&gt;
&lt;h3 id=&quot;创建线程&quot;&gt;&lt;a href=&quot;#创建线程&quot; class=&quot;headerlink&quot; title=&quot;创建线程&quot;&gt;&lt;/a&gt;创建线程&lt;/h3&gt;&lt;p&gt;创建线程需要指定入口主函数，并可设置一些线程的配置项。最后调用运行线程的方法。下面介绍几种创建线程的技术。&lt;/p&gt;
&lt;h4 id=&quot;使用-NSThread&quot;&gt;&lt;a href=&quot;#使用-NSThread&quot; class=&quot;headerlink&quot; title=&quot;使用 NSThread&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;NSThread&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;NSThread&lt;/code&gt; 创建线程有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;detachNewThreadSelector:toTarget:withObject:&lt;/code&gt; 类方法产生新的线程&lt;/li&gt;
&lt;li&gt;创建一个新的 &lt;code&gt;NSThread&lt;/code&gt; 对象，并调用它的 &lt;code&gt;start&lt;/code&gt; 方法。仅支持 iOS 和 macOS 10.5 以后的版本。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这两种方法都会创建一个 detached 线程，它退出后系统会自动回收其资源，无需手动 join 操作。&lt;/p&gt;
&lt;p&gt;下面两种创建线程的代码是等效的，但是推荐使用第二种方式。因为它支持在运行线程之前设置各种线程属性，不像第一种方式那样创建线程的时候必须立刻运行。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方式 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; detachNewThreadSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(myThreadMainMethod:) toTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; withObject:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方式 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt;* myThread = [[&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(myThreadMainMethod:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[myThread start];  &lt;span class=&quot;comment&quot;&gt;// Actually create the thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果不想使用 &lt;code&gt;initWithTarget:selector:object:&lt;/code&gt; 方法传入线程的入口函数，也可以继承 &lt;code&gt;NSThread&lt;/code&gt;，并覆写子类的 &lt;code&gt;main&lt;/code&gt; 方法（不用调用 &lt;code&gt;super&lt;/code&gt; 方法）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;performSelector:onThread:withObject:waitUntilDone:&lt;/code&gt; 方法可以在正在运行的线程发送消息，前提是这个线程必须有运行中的 run loop，因为消息会在线程的 run loop 日常处理过程中被执行。注意使用此方法进行跨线程通信时需要有同步机制。此方法并不适合用于实现时间紧要和频繁的跨线程通信。&lt;/p&gt;
&lt;h4 id=&quot;使用-POSIX-线程&quot;&gt;&lt;a href=&quot;#使用-POSIX-线程&quot; class=&quot;headerlink&quot; title=&quot;使用 POSIX 线程&quot;&gt;&lt;/a&gt;使用 POSIX 线程&lt;/h4&gt;&lt;p&gt;iOS 和 macOS 提供了基于 C 语言的 POSIX 线程 API 来创建线程，优点是跨平台。创建线程的函数是 &lt;code&gt;pthread_create&lt;/code&gt;，默认创建的是 joinable 线程，所以需要设置线程属性来将其创建为 detached 线程，这样当线程退出的时候其资源就会立刻被系统回收利用了：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;assert.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 线程入口主程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;PosixThreadMainRoutine&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;* data)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 在这里加代码.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LaunchThread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Create the thread using POSIX routines.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pthread_attr_t&lt;/span&gt;  attr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pthread_t&lt;/span&gt;       posixThreadID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;             returnVal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    returnVal = pthread_attr_init(&amp;amp;attr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!returnVal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    returnVal = pthread_attr_setdetachstate(&amp;amp;attr, PTHREAD_CREATE_DETACHED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!returnVal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// 因为 PosixThreadMainRoutine 函数没有参数，所以 pthread_create 最后一个参数传 NULL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;     threadError = pthread_create(&amp;amp;posixThreadID, &amp;amp;attr, &amp;amp;PosixThreadMainRoutine, NULL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    returnVal = pthread_attr_destroy(&amp;amp;attr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(!returnVal);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (threadError != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;comment&quot;&gt;// Report an error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于 C 语言的应用，可以使用端口、条件变量s 或共用内存来跨线程通信。跨线程通信有便于主线程检查其他线程的状态，在应用退出时做一些操作。&lt;/p&gt;
&lt;p&gt;关于 POSIX 线程函数可以翻阅 pthread man page。&lt;/p&gt;
&lt;h4 id=&quot;使用-NSObject-产生线程&quot;&gt;&lt;a href=&quot;#使用-NSObject-产生线程&quot; class=&quot;headerlink&quot; title=&quot;使用 NSObject 产生线程&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;NSObject&lt;/code&gt; 产生线程&lt;/h4&gt;&lt;p&gt;iOS 和 macOS 10.5 之后 &lt;code&gt;NSObject&lt;/code&gt; 提供了&lt;code&gt;performSelectorInBackground:withObject:&lt;/code&gt; 方法，可以让所有对象都创建 detached 线程，并传入 &lt;code&gt;selector&lt;/code&gt; 作为入口函数。跟它等效的方法是 &lt;code&gt;NSThread&lt;/code&gt; 的 &lt;code&gt;detachNewThreadSelector:toTarget:withObject:&lt;/code&gt;。在 &lt;code&gt;selector&lt;/code&gt; 方法里可以继续配置线程，比如添加 &lt;code&gt;autoreleasepool&lt;/code&gt; 和 run loop。&lt;/p&gt;
&lt;h4 id=&quot;在-Cocoa-应用中使用-POSIX-线程&quot;&gt;&lt;a href=&quot;#在-Cocoa-应用中使用-POSIX-线程&quot; class=&quot;headerlink&quot; title=&quot;在 Cocoa 应用中使用 POSIX 线程&quot;&gt;&lt;/a&gt;在 Cocoa 应用中使用 POSIX 线程&lt;/h4&gt;&lt;p&gt;在 Cocoa 中使用 POSIX 线程需要注意它们之间的交互，并遵守以下原则。&lt;/p&gt;
&lt;h5 id=&quot;保护-Cocoa-框架&quot;&gt;&lt;a href=&quot;#保护-Cocoa-框架&quot; class=&quot;headerlink&quot; title=&quot;保护 Cocoa 框架&quot;&gt;&lt;/a&gt;保护 Cocoa 框架&lt;/h5&gt;&lt;p&gt;Cocoa 框架使用加锁之类的同步机制来确保多线程工作正常，但只有在第一次使用 &lt;code&gt;NSThread&lt;/code&gt; 产生新线程的时候才会真的创建锁。这可以避免单线程情况下加锁会降低性能。但如果只使用 POSIX API 来产生新线程，Cocoa 就不会收到应用转换为多线程的通知，进而导致应用不稳定，甚至 crash。可以用 &lt;code&gt;NSThread&lt;/code&gt; 创建一个新线程，入口函数啥都不做，这样线程就会立刻退出。这样 Cocoa 就知道应用处于多线程了，加锁也会生效。PS：这么抖机灵的做法当然也会产生创建线程的开销，有些违背之前说的不要随意创建线程的原则。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSThread&lt;/code&gt; 的 &lt;code&gt;isMultiThreaded&lt;/code&gt; 方法可以检查应用是否是多线程。&lt;/p&gt;
&lt;h5 id=&quot;混合使用-POSIX-和-Cocoa-锁&quot;&gt;&lt;a href=&quot;#混合使用-POSIX-和-Cocoa-锁&quot; class=&quot;headerlink&quot; title=&quot;混合使用 POSIX 和 Cocoa 锁&quot;&gt;&lt;/a&gt;混合使用 POSIX 和 Cocoa 锁&lt;/h5&gt;&lt;p&gt;在一个应用中混合使用 POSIX 和 Cocoa 两套 API 的锁是安全的，因为后者实质上只是对前者的封装。但不能用一种 API 的方法操作另一种 API 创建的锁。比如不能使用 &lt;code&gt;NSLock&lt;/code&gt; 对象操作 &lt;code&gt;pthread_mutex_init&lt;/code&gt; 函数创建的互斥锁，反之亦然。&lt;/p&gt;
&lt;h3 id=&quot;配置线程属性&quot;&gt;&lt;a href=&quot;#配置线程属性&quot; class=&quot;headerlink&quot; title=&quot;配置线程属性&quot;&gt;&lt;/a&gt;配置线程属性&lt;/h3&gt;&lt;h4 id=&quot;配置线程的栈尺寸&quot;&gt;&lt;a href=&quot;#配置线程的栈尺寸&quot; class=&quot;headerlink&quot; title=&quot;配置线程的栈尺寸&quot;&gt;&lt;/a&gt;配置线程的栈尺寸&lt;/h4&gt;&lt;p&gt;创建线程后系统会为其创建一块内存作为栈空间，开发者可以在创建线程前配置这块空间的尺寸。所有的线程技术都会提供某种设置栈尺寸的方法，但 &lt;code&gt;NSThread&lt;/code&gt; 只有在 iOS 和 macOS 10.5 之后支持设置栈的尺寸。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;技术&lt;/th&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cocoa&lt;/td&gt;
&lt;td&gt;前提是不要使用 &lt;code&gt;detachNewThreadSelector:toTarget:withObject:&lt;/code&gt; 创建线程。创建线程对象后，在调用线程对象的 &lt;code&gt;start&lt;/code&gt; 方法之前，使用 &lt;code&gt;setStackSize:&lt;/code&gt; 方法指定栈的大小。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POSIX&lt;/td&gt;
&lt;td&gt;创建 &lt;code&gt;pthread_attr_t&lt;/code&gt; 栈属性结构体并使用 &lt;code&gt;pthread_attr_setstacksize&lt;/code&gt; 函数修改默认的栈尺寸。在使用 &lt;code&gt;pthread_create&lt;/code&gt; 函数创建线程时将属性结构体传入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiprocessing Services&lt;/td&gt;
&lt;td&gt;使用 &lt;code&gt;MPCreateTask&lt;/code&gt; 函数创建线程时可以传入栈尺寸。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;配置-TLS-Thread-Local-Storage&quot;&gt;&lt;a href=&quot;#配置-TLS-Thread-Local-Storage&quot; class=&quot;headerlink&quot; title=&quot;配置 TLS(Thread-Local Storage)&quot;&gt;&lt;/a&gt;配置 TLS(Thread-Local Storage)&lt;/h4&gt;&lt;p&gt;每个线程都维护了一个存储键值对的字典，在线程内随处都能存取。可以用它记录一些贯穿于线程执行过程中的信息，比如 run loop 迭代次数。&lt;/p&gt;
&lt;p&gt;Cocoa 与 POSIX 存储线程字典的方式不同，所以两种技术的 API 不能混用。只要你始终用其中一种技术，最后结果都差不多。具体方式如下：&lt;/p&gt;
&lt;p&gt;Cocoa: &lt;code&gt;NSThread&lt;/code&gt; 的 &lt;code&gt;threadDictionary&lt;/code&gt; 方法获取 &lt;code&gt;NSMutableDictionary&lt;/code&gt; 字典对象，然后进行存取。&lt;br&gt;POSIX: 直接用 &lt;code&gt;pthread_setspecific&lt;/code&gt; 和 &lt;code&gt;pthread_getspecific&lt;/code&gt; 函数存取字典。&lt;/p&gt;
&lt;h4 id=&quot;设置线程的-Detached-状态&quot;&gt;&lt;a href=&quot;#设置线程的-Detached-状态&quot; class=&quot;headerlink&quot; title=&quot;设置线程的 Detached 状态&quot;&gt;&lt;/a&gt;设置线程的 Detached 状态&lt;/h4&gt;&lt;p&gt;大部分高级线程技术创建的线程默认都是 detached 状态，这是因为大部分场景下都需要系统在线程执行完成后立刻回收资源。好处是代码干净，是否获取线程执行结果可以自行决定。&lt;/p&gt;
&lt;p&gt;joinable 线程需要其他线程调用 &lt;code&gt;pthread_join&lt;/code&gt; 函数对其进行 join 操作之后才能被系统回收资源。joinable 线程可以向 &lt;code&gt;pthread_exit&lt;/code&gt; 函数传入数据，其他线程可以在调用 &lt;code&gt;pthread_join&lt;/code&gt; 函数的时候获得此数据。参考 &lt;a href=&quot;https://stackoverflow.com/questions/8513894/pthread-join-and-pthread-exit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pthread_join() and pthread_exit()&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;应用退出时，detached 线程可以立刻结束，但是 joinable 线程必须全都被 join 后进程才能退出。因此 joinable 线程适用于执行不能中断的重要工作，比如向磁盘写入数据。&lt;/p&gt;
&lt;p&gt;只能用 POSIX API 来创建 joinable 线程，如果不设置线程属性，默认就是 joinable 线程。可以在创建线程之前调用 &lt;code&gt;pthread_attr_setdetachstate&lt;/code&gt; 函数修改线程 detached 状态。在线程开始运行之后，可以调用 &lt;code&gt;pthread_detach&lt;/code&gt; 函数将一个 joinable 线程变成 detached 线程。&lt;/p&gt;
&lt;h4 id=&quot;设置线程优先级&quot;&gt;&lt;a href=&quot;#设置线程优先级&quot; class=&quot;headerlink&quot; title=&quot;设置线程优先级&quot;&gt;&lt;/a&gt;设置线程优先级&lt;/h4&gt;&lt;p&gt;任何新创建的线程都有个默认优先级。内核的调度算法在决定运行哪个线程的时候都会考虑到线程优先级，优先级越高越可能先运行。拥有更高优先级的线程并不保证有特定的运行时间，只是在与低优先级线程比较时更容易被调度算法选中罢了。&lt;/p&gt;
&lt;p&gt;最好让你创建的线程保持默认优先级。提升一些线程的优先级也会提升低优先级线程饥饿的可能性。如果高优先级线程和低优先级线程之间有交互，低优先级线程饥饿可能会阻塞其他线程，并造成性能瓶颈。&lt;/p&gt;
&lt;p&gt;设置线程优先级的方式如下：&lt;/p&gt;
&lt;p&gt;Cocoa: &lt;code&gt;NSThread&lt;/code&gt; 的 &lt;code&gt;setThreadPriority:&lt;/code&gt; 类方法可以设置当前线程的优先级。&lt;br&gt;POSIX: &lt;code&gt;pthread_setschedparam&lt;/code&gt; 函数设置优先级。&lt;/p&gt;
&lt;h3 id=&quot;编写线程入口程序&quot;&gt;&lt;a href=&quot;#编写线程入口程序&quot; class=&quot;headerlink&quot; title=&quot;编写线程入口程序&quot;&gt;&lt;/a&gt;编写线程入口程序&lt;/h3&gt;&lt;p&gt;各平台上的线程入口函数结构都差不多，一般都会初始化数据结构，执行一些工作，或者使用 run loop 保活，最后在工作完成后清理占用的资源。这里讲一下编写线程入口程序需要做的一些额外步骤。&lt;/p&gt;
&lt;h4 id=&quot;创建自动释放池&quot;&gt;&lt;a href=&quot;#创建自动释放池&quot; class=&quot;headerlink&quot; title=&quot;创建自动释放池&quot;&gt;&lt;/a&gt;创建自动释放池&lt;/h4&gt;&lt;p&gt;使用 Objective-C 框架的应用必须确保每条线程至少有一个自动释放池。如果开启垃圾回收机制，自动释放池会失效。PS: 垃圾回收很早就被苹果弃用了。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;@autoreleasepool&lt;/code&gt; 创建自动释放池比 &lt;code&gt;NSAutoreleasePool&lt;/code&gt; 更方便。而且 &lt;code&gt;NSAutoreleasePool&lt;/code&gt; 不能在 ARC 下使用。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;myThreadMainRoutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;comment&quot;&gt;// Do thread work here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时需要创建更多的自动释放池，比如在循环内部使用自动释放池降低内存开销。&lt;/p&gt;
&lt;p&gt;关于自动释放池的使用，不再赘述。&lt;/p&gt;
&lt;h4 id=&quot;设置-Exception-Handler&quot;&gt;&lt;a href=&quot;#设置-Exception-Handler&quot; class=&quot;headerlink&quot; title=&quot;设置 Exception Handler&quot;&gt;&lt;/a&gt;设置 Exception Handler&lt;/h4&gt;&lt;p&gt;没被捕获的异常会导致应用崩溃，虽然最好应该在异常发生的地方进行异常处理，但是在线程的入口函数再加上个 try/catch 比较好。&lt;/p&gt;
&lt;p&gt;更多内容参考 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Exceptions/Exceptions.html#//apple_ref/doc/uid/10000012i&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Exception Programming Topics&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&quot;设置-Run-Loop&quot;&gt;&lt;a href=&quot;#设置-Run-Loop&quot; class=&quot;headerlink&quot; title=&quot;设置 Run Loop&quot;&gt;&lt;/a&gt;设置 Run Loop&lt;/h4&gt;&lt;p&gt;编写线程上运行的代码有两种选择：1. 代码简单粗暴，任务执行完线程就退出了；2. 设置线程的 run loop，处理不断到来的请求。&lt;/p&gt;
&lt;p&gt;macOS 和 iOS 内置了 run loop 的实现，应用的主线程自动开启 run loop。开发者创建的次级线程需要手动配置和开启 run loop。&lt;/p&gt;
&lt;h3 id=&quot;终止线程&quot;&gt;&lt;a href=&quot;#终止线程&quot; class=&quot;headerlink&quot; title=&quot;终止线程&quot;&gt;&lt;/a&gt;终止线程&lt;/h3&gt;&lt;p&gt;建议让线程的入口函数正常退出。虽然 Cocoa，POSIX 和 Multiprocessing Services 提供了直接杀线程的方法，但强烈不建议使用。强杀线程会导致无法回收资源，可能导致内存泄露、资源没被正确清理，进而导致后续的隐患。&lt;/p&gt;
&lt;p&gt;如果预料到需要中途结束线程，设计线程之初就应该响应到取消或退出的消息。带有 run loop 这种周期操作的线程可以每次查看是否收到退出的消息。如果需要退出线程，则可以清理线程资源后退出；否则继续处理其他工作。&lt;/p&gt;
&lt;p&gt;run loop 可以使用 input source 接受其他线程发的消息，但需要为 &lt;code&gt;NSRunLoop&lt;/code&gt; 配置 &lt;code&gt;CFRunLoopSourceRef&lt;/code&gt;，假设这部分代码在 &lt;code&gt;myInstallCustomInputSource&lt;/code&gt; 已经实现好了。下面的代码还省略了自动释放池和 &lt;code&gt;while&lt;/code&gt; 主循环中做的实际工作。将标记是否需要退出线程的局部变量 &lt;code&gt;exitNow&lt;/code&gt; 的值放在 TLS 中同步是为了方便 input source 的事件处理函数对 &lt;code&gt;exitNow&lt;/code&gt; 的存取，因为事件处理是在另外一个函数，不能直接存取 &lt;code&gt;exitNow&lt;/code&gt;，需要经过 TLS。当 input source 收到退出消息后，对应的事件处理函数便可以清理线程的资源，准备退出。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)threadMainRoutine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; moreWorkToDo = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; exitNow = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt;* runLoop = [&lt;span class=&quot;built_in&quot;&gt;NSRunLoop&lt;/span&gt; currentRunLoop];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Add the exitNow BOOL to the thread dictionary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt;* threadDict = [[&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; currentThread] threadDictionary];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [threadDict setValue:[&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithBool:exitNow] forKey:&lt;span class=&quot;string&quot;&gt;@&quot;ThreadShouldExitNow&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Install an input source.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; myInstallCustomInputSource];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (moreWorkToDo &amp;amp;&amp;amp; !exitNow)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Do one chunk of a larger body of work here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Change the value of the moreWorkToDo Boolean when done.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Run the run loop but timeout immediately if the input source isn&#39;t waiting to fire.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [runLoop runUntilDate:[&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; date]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// Check to see if an input source handler changed the exitNow value.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exitNow = [[threadDict valueForKey:&lt;span class=&quot;string&quot;&gt;@&quot;ThreadShouldExitNow&quot;&lt;/span&gt;] boolValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/Introduction/Introduction.html#//apple_ref/doc/uid/10000057i-CH1-SW1&quot;&gt;Threading Programming Guide&lt;/a&gt; 的学习笔记&amp;amp;翻译，第一部分。&lt;/p&gt;
&lt;p&gt;其实苹果建议使用对线程的高级封装，比如 operation objects and Grand Central Dispatch，它们使用方便更加高效，可以参考 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091&quot;&gt;Concurrency Programming Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但了解更底层一些的内容其实更有趣，难道不是么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/09/17/Threading-Programming-Guide-2/&quot;&gt;Threading Programming Guide(2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2017/10/08/Threading-Programming-Guide-3/&quot;&gt;Threading Programming Guide(3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://yulingtianxia.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>What&#39;s New in LLVM</title>
    <link href="http://yulingtianxia.com/blog/2017/07/17/What-s-New-in-LLVM-2017/"/>
    <id>http://yulingtianxia.com/blog/2017/07/17/What-s-New-in-LLVM-2017/</id>
    <published>2017-07-16T16:04:37.000Z</published>
    <updated>2017-09-09T15:40:06.000Z</updated>
    
    <content type="html">&lt;p&gt;这&lt;strong&gt;绝不仅仅&lt;/strong&gt;是一篇 WWDC 2017 Session 411 学习笔记。除了有关 LLVM  9.0 的新特性之外，还有关于静态分析器和 Clang 5 Objective-C ARC 的一点看法和经验。&lt;/p&gt;
&lt;p&gt;我觉得 LLVM 9 的亮点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持 Objective-C API 可用性检查&lt;/li&gt;
&lt;li&gt;新增一些对隐患代码的静态分析检查和 warning&lt;/li&gt;
&lt;li&gt;更快的 LTO，使其可以真正使用&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;API-Availability-Checking-for-Objective-C&quot;&gt;&lt;a href=&quot;#API-Availability-Checking-for-Objective-C&quot; class=&quot;headerlink&quot; title=&quot;API Availability Checking for Objective-C&quot;&gt;&lt;/a&gt;API Availability Checking for Objective-C&lt;/h2&gt;&lt;p&gt;在低版本系统上调用高版本 SDK 的 API 会引发 crash，所以在兼容多版本系统时需要谨慎判断系统版本，然后使用对应的 API。这些在运行时才能生效的代码很容易编写出错，而且需要测试人员付出很大工作量来覆盖到各个版本的系统。检查类、实例方法、类方法等是否可用时需要写的代码也不同，很蛋疼呦。&lt;/p&gt;
&lt;p&gt;Swift 3 加入了 &lt;code&gt;#available&lt;/code&gt; 语法来检查 API 是否可用，在编译阶段就可以发现哪里漏掉了 API 可用性检查。如今，Objective-C 也有这项功能啦。&lt;/p&gt;
&lt;h3 id=&quot;Objective-C&quot;&gt;&lt;a href=&quot;#Objective-C&quot; class=&quot;headerlink&quot; title=&quot;Objective-C&quot;&gt;&lt;/a&gt;Objective-C&lt;/h3&gt;&lt;p&gt;假设加入 App 支持的最低版本是 iOS 10，但是直接调用了 iOS 11 的 API，那么编译器会告警，提醒开发者某个 API 只能用于较新版本的系统上。这时需要通过 &lt;code&gt;@available&lt;/code&gt; 语法来判断平台和版本：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;variable&quot;&gt;@available&lt;/span&gt;(iOS &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;, *)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// iOS 11 以上以及其他所有平台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; 相当于通配符，代表所有其他平台都可用。&lt;/p&gt;
&lt;p&gt;说完了如何检查 API 可用性后，再来谈谈声明 API 可用性的问题：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;name&quot;&gt;void&lt;/span&gt;)foo API_AVAILABLE(&lt;span class=&quot;name&quot;&gt;ios&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11.0&lt;/span&gt;))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码声明了调用 &lt;code&gt;foo&lt;/code&gt; 方法需要 iOS 11 以上，而 &lt;code&gt;foo&lt;/code&gt; 方法内部的实现中调用 iOS 11 的 API 时无需再用 &lt;code&gt;@available&lt;/code&gt; 检查。&lt;/p&gt;
&lt;p&gt;声明一个类的可用性也很简单，并且无需给类中的每个方法再次声明可用性，只需要用到 &lt;code&gt;API_AVAILABLE&lt;/code&gt; 宏：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;API_&lt;span class=&quot;built_in&quot;&gt;AVAILABLE&lt;/span&gt;(ios(&lt;span class=&quot;number&quot;&gt;11.0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyClassForiOS11OrNewer&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实类似的有关 API 兼容版本的宏还有好几个：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;API_DEPRECATED&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;API_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;API_DEPRECATED_WITH_REPLACEMENT&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;C-amp-C&quot;&gt;&lt;a href=&quot;#C-amp-C&quot; class=&quot;headerlink&quot; title=&quot;C &amp;amp; C++&quot;&gt;&lt;/a&gt;C &amp;amp; C++&lt;/h3&gt;&lt;p&gt;如果是想在 C 或 C++ 中查询 API 的可用性，可以使用 LLVM 新加的 &lt;code&gt;__builtin_available()&lt;/code&gt; 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(__builtin_available(iOS 11, macOS 10.13, *)&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// iOS 11 以上或 macOS 10.13 以上平台，以及其他所有平台&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 C 或 C++ 中使用 &lt;code&gt;API_AVAILABLE&lt;/code&gt; 宏之前需要引入头文件&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;os/availability.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; API_AVAILABLE(ios(&lt;span class=&quot;number&quot;&gt;11.0&lt;/span&gt;)) MyClassForiOS11OrNewer;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;适用范围&quot;&gt;&lt;a href=&quot;#适用范围&quot; class=&quot;headerlink&quot; title=&quot;适用范围&quot;&gt;&lt;/a&gt;适用范围&lt;/h3&gt;&lt;p&gt;对于旧工程，LLVM 只会对新的 API 进行告警(包含 iOS 11,tvOS 11,macOS 10.13,watchOS 4 以上)。旧的 API 不会被编译器告警，所以不用担心旧项目中已有的代码会产生一大片 warning，只需在采用新 API 的时候加上 &lt;code&gt;@available&lt;/code&gt; 或 &lt;code&gt;API_AVAILABLE&lt;/code&gt;。也可以选择在 Build Settings 中设置 &lt;code&gt;Unguarded availability&lt;/code&gt; 为 &lt;code&gt;YES(All Versions)&lt;/code&gt; 来检查所有的 API。Xcode 9 新建工程 &lt;code&gt;Unguarded availability&lt;/code&gt; 项默认为 &lt;code&gt;YES(All Versions)&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Static-Analyzer-Checks&quot;&gt;&lt;a href=&quot;#Static-Analyzer-Checks&quot; class=&quot;headerlink&quot; title=&quot;Static Analyzer Checks&quot;&gt;&lt;/a&gt;Static Analyzer Checks&lt;/h2&gt;&lt;p&gt;除了在 Xcode-&amp;gt;Product-&amp;gt;Analyze 中开启静态分析检查外，也可以在 Build 过程中进行静态分析检查。只需在编译设置中将 &lt;code&gt;Analyse During &amp;#39;Build&amp;#39;&lt;/code&gt; 设为 &lt;code&gt;YES&lt;/code&gt;。 &lt;/p&gt;
&lt;p&gt;苹果补充了一些检查项，看了下还都是一不留神就容易犯或者根本没注意到的细节。&lt;/p&gt;
&lt;h3 id=&quot;比较-NSNumber&quot;&gt;&lt;a href=&quot;#比较-NSNumber&quot; class=&quot;headerlink&quot; title=&quot;比较 NSNumber&quot;&gt;&lt;/a&gt;比较 NSNumber&lt;/h3&gt;&lt;p&gt;稍有经验的老司机都懂得 NSNumber 不能直接跟 raw value 直接比较，毕竟前者是类的实例对象，后者是基本类型。然而还是有人会弄错：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; = @&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSNumber *check = @YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;肯定会进到这里，因为 count 不为 nil&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (check) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSLog(@&lt;span class=&quot;string&quot;&gt;&quot;肯定会进到这里，因为 check 不为 nil&quot;&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在 LLVM 可以检查出这种情况，也可以关闭这项检查：在编译设置中将 &lt;code&gt;Suspicious Conversions of NSNumber and CFNumberRef&lt;/code&gt; 设为 &lt;code&gt;NO&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;dispatch-once&quot;&gt;&lt;a href=&quot;#dispatch-once&quot; class=&quot;headerlink&quot; title=&quot;dispatch_once()&quot;&gt;&lt;/a&gt;&lt;code&gt;dispatch_once()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Xcode 的 code snippet 很好用，我觉得正常人不会把 &lt;code&gt;dispatch_once()&lt;/code&gt; 写错吧。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static &lt;span class=&quot;keyword&quot;&gt;dispatch_once_t &lt;/span&gt;onceToken&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;dispatch_once(&amp;amp;onceToken, &lt;/span&gt;^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   foo()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;onceToken&lt;/code&gt; 只能是全局变量或静态变量，使得指针地址的唯一性保证了 &lt;code&gt;foo()&lt;/code&gt; 只执行一次。但总有奇葩把 &lt;code&gt;onceToken&lt;/code&gt; 声明成成员变量，使得指针地址可能会重复，无法保证线程安全地只执行一次。而现在 LLVM 可以检查出这种不规范的使用方式。&lt;/p&gt;
&lt;p&gt;当然，想实现线程安全地只执行一次方法，也可以通过加锁和判断标志位的方式来实现。&lt;/p&gt;
&lt;h3 id=&quot;NSMutable-类型的属性使用-copy-内存管理语义&quot;&gt;&lt;a href=&quot;#NSMutable-类型的属性使用-copy-内存管理语义&quot; class=&quot;headerlink&quot; title=&quot;NSMutable 类型的属性使用 copy 内存管理语义&quot;&gt;&lt;/a&gt;&lt;code&gt;NSMutable&lt;/code&gt; 类型的属性使用 &lt;code&gt;copy&lt;/code&gt; 内存管理语义&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *array;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内存管理语义帮开发者自动合成了 &lt;code&gt;set&lt;/code&gt; 方法的实现，但是当 &lt;code&gt;copy&lt;/code&gt; 应用到了 &lt;code&gt;NSMutable&lt;/code&gt; 系列的类上，就会产生问题。因为我们想要的是把新的值 &lt;code&gt;mutableCopy&lt;/code&gt; 后赋值给属性，然而内存管理语义中只有 &lt;code&gt;copy&lt;/code&gt; 却没有 &lt;code&gt;mutableCopy&lt;/code&gt;。而现在 LLVM 可以检查出这种情况。&lt;/p&gt;
&lt;p&gt;重写 &lt;code&gt;set&lt;/code&gt; 方法可以解决此问题:&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setArray:(NSMutableArray *)&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _array = [&lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt; mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;一些建议&quot;&gt;&lt;a href=&quot;#一些建议&quot; class=&quot;headerlink&quot; title=&quot;一些建议&quot;&gt;&lt;/a&gt;一些建议&lt;/h3&gt;&lt;p&gt;静态分析能做到在编译阶段发现一些程序员容易疏忽的地方，它只能检查特定场景下的一些被认为不符合规范的行为。也就是说它维护了一个 List，编译的时候一项一项检查是否合符规范，但是这个 List 之外的行为并不能被检查出来，这也就是为什么 LLVM 每年都在向这个 List 新增内容。这个 List 包含了程序员容易犯的代码问题，并且这些问题暗涵很严重的逻辑错误。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随着 Check List 的不断膨胀，静态分析耗时会增加，对于大中型项目，我并不建议开启每次编译时都进行静态分析检查。建议在每个版本测试阶段定期做静态分析检查。&lt;/li&gt;
&lt;li&gt;不要过于相信静态分析检查。首先它会漏检，Check List 之外的情况根本检查不出来。如果将一些 API 包含在宏定义中或者封装在 C 函数中调用，导致语法复杂，静态分析甚至还会误报。（我曾经碰见过几次静态分析检查出 MRC 下一些内存泄露，但其实间接调用了 &lt;code&gt;autorelease&lt;/code&gt; 的，根本不会泄露，改为直接调用 &lt;code&gt;autorelease&lt;/code&gt; 就 OK 了）&lt;/li&gt;
&lt;li&gt;程序员自身应该有一份 Check List，在平时变成变成过程中不断约束自己。比如判断 &lt;code&gt;NSString&lt;/code&gt; 是否有内容时直接看 &lt;code&gt;length&lt;/code&gt; 是否大于 0，而不是判断是否为 &lt;code&gt;nil&lt;/code&gt; 或 &lt;code&gt;@&amp;quot;&amp;quot;&lt;/code&gt;。这跟打游戏是否有意识差不多，写代码也要有『意识流』。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;New-Warnings&quot;&gt;&lt;a href=&quot;#New-Warnings&quot; class=&quot;headerlink&quot; title=&quot;New Warnings&quot;&gt;&lt;/a&gt;New Warnings&lt;/h2&gt;&lt;p&gt;Xcode 9 的 LLVM 又新增了一百多个 error 和 warning，然而大多数程序员还不是照样忽视 warning 么？可以在编译设置中将 warning 升级成 error。如果是旧的工程，需要升级工程文件到 Xcode 9，然后才能看到这些新增的 warning 设置项。（点击工程-&amp;gt;Editor-&amp;gt;Validate Settings）&lt;/p&gt;
&lt;h3 id=&quot;ARC-中的-Block-捕获参数&quot;&gt;&lt;a href=&quot;#ARC-中的-Block-捕获参数&quot; class=&quot;headerlink&quot; title=&quot;ARC 中的 Block 捕获参数&quot;&gt;&lt;/a&gt;ARC 中的 Block 捕获参数&lt;/h3&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)validateDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *)dict error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [dict enumerateKeysAndObjectsUsingBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nonnull key, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nonnull obj, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                *error = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;FishDomain&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ARC 会将 &lt;code&gt;(NSError **)error&lt;/code&gt; 这种 “out-parameter” 隐式修饰为 &lt;code&gt;__autoreleasing&lt;/code&gt;，也就是其实会被转化成 &lt;code&gt;(NSError * __autoreleasing *)error&lt;/code&gt;。（PS：相关知识参考 &lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#indirect-parameters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Indirect parameters&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;给 &lt;code&gt;*error&lt;/code&gt; 赋值时，因为它被 &lt;code&gt;__autoreleasing&lt;/code&gt; 修饰，所以 ARC 下的 Clang 会隐式调用 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;autorelease&lt;/code&gt;。 PS: 相关知识参考 &lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#semantics&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Semantics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;enumerateKeysAndObjectsUsingBlock:&lt;/code&gt; 方法会在 &lt;code&gt;@autoreleasepool&lt;/code&gt; 里面执行 Block，在迭代逻辑中这样做有助于减少内存峰值。&lt;/p&gt;
&lt;p&gt;于是 &lt;code&gt;*error&lt;/code&gt; 就在 Block 里提前被释放了。Xcode 9 会针对这种情况发出 warning：”Block captures an autoreleasing out-parameter, which may result in use-after-free bugs”。解决方案：”Declare the parameter &lt;strong&gt;strong or capture a &lt;/strong&gt;block __strong variable to keep values alive across autorelease pools”&lt;/p&gt;
&lt;p&gt;第一个解决方案简单地把参数 &lt;code&gt;(NSError **)error&lt;/code&gt; 改成 &lt;code&gt;(NSError *__strong *)error&lt;/code&gt;，这要求调用方也使用 ARC。第二个解决方案是利用 &lt;code&gt;__block&lt;/code&gt; 让 Block 捕获外部变量，默认是强引用：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)validateDictionary:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *&amp;gt; *)dict error:(&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; **)error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *strongError = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [dict enumerateKeysAndObjectsUsingBlock:^(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nonnull key, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nonnull obj, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; * _Nonnull stop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (obj.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strongError = [&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; errorWithDomain:&lt;span class=&quot;string&quot;&gt;@&quot;FishDomain&quot;&lt;/span&gt; code:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *error = strongError;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于 Clang 隐式调用 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;autorelease&lt;/code&gt; 更深入的细节如下：&lt;/p&gt;
&lt;h4 id=&quot;Clang-5-中的-Objective-C-ARC-方法家族&quot;&gt;&lt;a href=&quot;#Clang-5-中的-Objective-C-ARC-方法家族&quot; class=&quot;headerlink&quot; title=&quot;Clang 5 中的 Objective-C ARC 方法家族&quot;&gt;&lt;/a&gt;Clang 5 中的 Objective-C ARC 方法家族&lt;/h4&gt;&lt;p&gt;Objective-C 中有&lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-method-families&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;五大方法家族&lt;/a&gt;，每个家族都有自己的规矩：&lt;code&gt;alloc/new/copy/mutableCopy&lt;/code&gt; 四个家族的方法返回的是 “a retainable object pointer”，而 &lt;code&gt;init&lt;/code&gt; 家族方法要求必须是实例方法，必须返回 Objective-C 对象。&lt;/p&gt;
&lt;p&gt;把一个方法划归到某个方法家族有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;按照命名惯例划分方法家族&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;__attribute__((objc_method_family( somefamily )))&lt;/code&gt; 直接指定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果某个方法不遵循所在家族的规矩，会影响到内存管理，造成内存泄露等后果。（PS：如果是使用第二种方式把不守规矩的方法划归到家族，Clang 会报错。）&lt;/p&gt;
&lt;p&gt;ARC 下遵循一套内存管理原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;alloc/new/copy/mutableCopy&lt;/code&gt; 家族的方法创建的对象是自己持有的，会被 Clang 隐式标记为 &lt;code&gt;__attribute__((ns_returns_retained))&lt;/code&gt;。等效于 Foundation 中的宏 &lt;code&gt;NS_RETURNS_RETAINED&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;init&lt;/code&gt; 家族会被 Clang 隐式标记为 &lt;code&gt;__attribute__((ns_consumes_self))&lt;/code&gt; 和 &lt;code&gt;__attribute__((ns_returns_retained))&lt;/code&gt;，用 &lt;code&gt;NS_REPLACES_RECEIVER&lt;/code&gt; 宏也是等效的。&lt;/li&gt;
&lt;li&gt;不属于任何方法家族的方法会被 Clang 隐式标记为 &lt;code&gt;__attribute__((ns_returns_not_retained))&lt;/code&gt;，等效于 Foundation 中的宏 &lt;code&gt;NS_RETURNS_NOT_RETAINED&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般情况下 Clang 会帮我们做这些事情，不必给方法声明手动标记这些属性。而且 Clang 会对最终生成的汇编指令进行优化，去掉多余的 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;autorelease&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;ARC 会&lt;strong&gt;视情况&lt;/strong&gt;在调用方法时&lt;strong&gt;可能会&lt;/strong&gt;添加 &lt;code&gt;retain&lt;/code&gt;，在方法内部返回时&lt;strong&gt;可能会&lt;/strong&gt;添加 &lt;code&gt;autorelease&lt;/code&gt;，经过优化后很可能会抵消。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__attribute__&lt;/code&gt; 其实并不是 Objective-C 的语法，而是 Clang 的属性。有关 Clang 的各种属性定义，请查看 &lt;a href=&quot;http://clang.llvm.org/docs/AttributeReference.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Attributes in Clang&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;探索方法返回值内存管理的奥秘&quot;&gt;&lt;a href=&quot;#探索方法返回值内存管理的奥秘&quot; class=&quot;headerlink&quot; title=&quot;探索方法返回值内存管理的奥秘&quot;&gt;&lt;/a&gt;探索方法返回值内存管理的奥秘&lt;/h4&gt;&lt;p&gt;先做两种情况的实验，查看汇编代码，并总结：&lt;/p&gt;
&lt;h5 id=&quot;方法为-alloc-new-copy-mutableCopy-家族或方法声明使用-NS-RETURNS-RETAINED&quot;&gt;&lt;a href=&quot;#方法为-alloc-new-copy-mutableCopy-家族或方法声明使用-NS-RETURNS-RETAINED&quot; class=&quot;headerlink&quot; title=&quot;方法为 alloc/new/copy/mutableCopy 家族或方法声明使用 NS_RETURNS_RETAINED&quot;&gt;&lt;/a&gt;方法为 &lt;code&gt;alloc/new/copy/mutableCopy&lt;/code&gt; 家族或方法声明使用 &lt;code&gt;NS_RETURNS_RETAINED&lt;/code&gt;&lt;/h5&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)newFoo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)foo &lt;span class=&quot;built_in&quot;&gt;NS_RETURNS_RETAINED&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)newFoo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;debug 时从汇编中可以看出：调用方无操作，方法返回时无操作。这显然是优化后的结果。虽然两种方式都能达到优化效果，但更推荐采用让方法加入方法家族，而不是直接使用 &lt;code&gt;NS_RETURNS_RETAINED&lt;/code&gt; 宏。&lt;/p&gt;
&lt;h5 id=&quot;普通方法&quot;&gt;&lt;a href=&quot;#普通方法&quot; class=&quot;headerlink&quot; title=&quot;普通方法&quot;&gt;&lt;/a&gt;普通方法&lt;/h5&gt;&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; (id)foo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt; (id)foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return [NSObject new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;debug 时从汇编中可以看出：调用方调用 &lt;code&gt;objc_retainAutoreleasedReturnValue()&lt;/code&gt;，方法返回时调用 &lt;code&gt;objc_autoreleaseReturnValue()&lt;/code&gt;（如果返回值没有赋值给变量，会调用 &lt;code&gt;objc_unsafeClaimAutoreleasedReturnValue()&lt;/code&gt;）。&lt;/p&gt;
&lt;h5 id=&quot;优化过程及原理&quot;&gt;&lt;a href=&quot;#优化过程及原理&quot; class=&quot;headerlink&quot; title=&quot;优化过程及原理&quot;&gt;&lt;/a&gt;优化过程及原理&lt;/h5&gt;&lt;p&gt;&lt;code&gt;objc_retainAutoreleasedReturnValue(value)&lt;/code&gt; 会尝试将之前调用 &lt;code&gt;objc_autoreleaseReturnValue(value)&lt;/code&gt; 时传入参数 &lt;code&gt;value&lt;/code&gt; 的所有权（retain count）传递过来。如果没有在 &lt;code&gt;value&lt;/code&gt; 上调用过 &lt;code&gt;objc_autoreleaseReturnValue(value)&lt;/code&gt;，那就调用 &lt;code&gt;retain&lt;/code&gt;。具体原理通过查看 Objective-C 源码可以得出(我列举的是 objc-709)：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objc_autoreleaseReturnValue()&lt;/code&gt; 试图优化流程，如果上一层调用方会调用 &lt;code&gt;objc_retainAutoreleasedReturnValue()&lt;/code&gt; 则直接返回参数，否则调用 &lt;code&gt;autorelease&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;id &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;objc_autoreleaseReturnValue&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id obj&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// ReturnAtPlus1 表示倾向直接把对象返回，这样就不需要调用 objc_autorelease()，优化性能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (prepareOptimizedReturn(ReturnAtPlus1)) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; objc_autorelease(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ALWAYS_INLINE &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;prepareOptimizedReturn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ReturnDisposition disposition&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assert(getReturnDisposition() == ReturnAtPlus0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// __builtin_return_address(0) 获取当前函数返回地址，传入 callerAcceptsOptimizedReturn 判断调用方是否紧接着调用了 objc_retainAutoreleasedReturnValue 或者 objc_unsafeClaimAutoreleasedReturnValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (callerAcceptsOptimizedReturn(__builtin_return_address(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将标志位 disposition 写入 TLS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (disposition) setReturnDisposition(disposition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ALWAYS_INLINE &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;setReturnDisposition&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ReturnDisposition disposition&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;// 向 TLS 中写入 Disposition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tls_set_direct(RETURN_DISPOSITION_KEY, (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)(uintptr_t)disposition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ALWAYS_INLINE ReturnDisposition &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;getReturnDisposition&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;// 从 TLS 中读取 Disposition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (ReturnDisposition)(uintptr_t)tls_get_direct(RETURN_DISPOSITION_KEY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;callerAcceptsOptimizedReturn()&lt;/code&gt; 函数在不同架构的 CPU 上实现也是不一样的，这是因为不同架构 CPU 的对齐方式不同，偏移量也不同。比如在 arm64 上由于指令对齐方式较好，只需判断函数返回的地址指向的值是不是 &lt;code&gt;0xaa1d03fd&lt;/code&gt; 即可；而在 x86_64 平台上则要用一大坨代码来判断。有兴趣的可以查看 objc-object.h 文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objc_retainAutoreleasedReturnValue()&lt;/code&gt; 试图查看是否已优化过并直接返回参数，否则 &lt;code&gt;retain&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;id&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;objc_retainAutoreleasedReturnValue&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;id obj&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 如果之前 objc_autoreleaseReturnValue() 存入的标志位为 ReturnAtPlus1，则直接返回对象，无需调用 objc_retain()，优化性能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (acceptOptimizedReturn() == ReturnAtPlus1) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; obj;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; objc_retain(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 负责从 TLS 中取标志位 ReturnDisposition，然后将其重置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; ALWAYS_INLINE ReturnDisposition &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;acceptOptimizedReturn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReturnDisposition disposition = getReturnDisposition();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setReturnDisposition(ReturnAtPlus0);  &lt;span class=&quot;comment&quot;&gt;// reset to the unoptimized state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; disposition;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;TLS 全称为 Thread Local Storage，是每个线程专有的键值存储。在某个线程上的函数调用栈上相邻两个函数对 TLS 进行了存取，这中间肯定不会有别的程序『插手』。所以 &lt;code&gt;getReturnDisposition()&lt;/code&gt; 和 &lt;code&gt;setReturnDisposition()&lt;/code&gt; 的实现比较简单，不需要判断考虑是针对哪个对象的 Disposition 进行存取，因为当前线程上下文中只处理唯一的对象，保证不会乱掉。&lt;/p&gt;
&lt;h3 id=&quot;无参数函数的声明&quot;&gt;&lt;a href=&quot;#无参数函数的声明&quot; class=&quot;headerlink&quot; title=&quot;无参数函数的声明&quot;&gt;&lt;/a&gt;无参数函数的声明&lt;/h3&gt;&lt;p&gt;如果函数没有参数，需要用 &lt;code&gt;void&lt;/code&gt; 显式声明。否则可能调用方会传入其他类型和数量的参数，在运行时引发 crash。如果用 &lt;code&gt;void&lt;/code&gt; 显式声明，在编译阶段就会产生 error。&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; foo() &lt;span class=&quot;comment&quot;&gt;// warning:This function declaration is not a prototype&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; foo(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// OK&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;C-Refactoring&quot;&gt;&lt;a href=&quot;#C-Refactoring&quot; class=&quot;headerlink&quot; title=&quot;C++ Refactoring&quot;&gt;&lt;/a&gt;C++ Refactoring&lt;/h2&gt;&lt;p&gt;对于一个带有 C++ 或 Objective-C++ 代码的工程来说，想重命名某个类名真的是艰难，Xcode 会提示不支持 C++！现在，各种操作也支持 C++ 咯：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/LLVM/C++%20Refactoring.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;LLVM 的重构代码功能极大节省了开发者的时间。&lt;/p&gt;
&lt;h2 id=&quot;Features-from-C-17&quot;&gt;&lt;a href=&quot;#Features-from-C-17&quot; class=&quot;headerlink&quot; title=&quot;Features from C++17&quot;&gt;&lt;/a&gt;Features from C++17&lt;/h2&gt;&lt;p&gt;其实这些都是 C++17 的新特性罢了，LLVM 9.0 积极响应支持。可以在编译选项 C++ Language Dialect 中选择使用的 C++ 标准库。GNU++17 比 C++17 多了语言扩展。&lt;/p&gt;
&lt;h3 id=&quot;Structured-Binding&quot;&gt;&lt;a href=&quot;#Structured-Binding&quot; class=&quot;headerlink&quot; title=&quot;Structured Binding&quot;&gt;&lt;/a&gt;Structured Binding&lt;/h3&gt;&lt;p&gt;解析 Tuple 可以一句搞定了：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::tuple&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&amp;gt; compute();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; [a, b, c] = compute();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;甚至也可以解析类似 tuple 的类型：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Point &amp;#123; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; x; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; y; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; z; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;Point &lt;span class=&quot;title&quot;&gt;computeMidPoint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Point p1, Point p2)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; [x, y, z] = computeMidPoint(src, dest);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多内容详见 C++17 的 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0217r3.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stuctured Binding&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;在条件判断语句中声明初始化变量&quot;&gt;&lt;a href=&quot;#在条件判断语句中声明初始化变量&quot; class=&quot;headerlink&quot; title=&quot;在条件判断语句中声明初始化变量&quot;&gt;&lt;/a&gt;在条件判断语句中声明初始化变量&lt;/h3&gt;&lt;p&gt;在判断某个条件之前，可能会产生一些中间变量，如果变量名与外界的有冲突，还会造成一些影响。所以需要一种只在条件判断语句范围内生效的局部变量，避免与无关逻辑代码有冲突：&lt;/p&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;(auto a = getNumber()&lt;/span&gt;; a &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	foo&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// error! a 只在上面的 if 作用域中有效。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;constexpr-if&quot;&gt;&lt;a href=&quot;#constexpr-if&quot; class=&quot;headerlink&quot; title=&quot;constexpr if&quot;&gt;&lt;/a&gt;constexpr if&lt;/h3&gt;&lt;p&gt;以 &lt;code&gt;if constexpr&lt;/code&gt; 开始的语句被称为 &lt;code&gt;constexpr if&lt;/code&gt; 语句。– &lt;a href=&quot;http://zh.cppreference.com/w/cpp/language/if&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cppreference.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;举个栗子：&lt;code&gt;advance&lt;/code&gt; 函数可以向前或向后迭代指定步数，但对于字符串和数组来说有更快的方式：无需一步步迭代，可以直接访问。但 &lt;code&gt;advance&lt;/code&gt; 的参数是通用的，编译不通过：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/LLVM/constexpr%20if%200.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;传统解决方法是 Compile Time Dispatch：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/LLVM/constexpr%20if%201.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;C++17 的 &lt;code&gt;constexpr if&lt;/code&gt; 可以一行搞定：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/LLVM/constexpr%20if%202.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;详见 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0292r2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;constexpr if&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;string-view&quot;&gt;&lt;a href=&quot;#string-view&quot; class=&quot;headerlink&quot; title=&quot;string_view&quot;&gt;&lt;/a&gt;string_view&lt;/h3&gt;&lt;p&gt;简单来说它是指向字符串的指针，但不会拷贝一份字符串。一旦指向的字符串被修改或者被释放了，&lt;code&gt;string_view&lt;/code&gt; 的内容也会跟跟着变，毕竟是同一份内存。所以，虽然会优化性能，慎用。就像 OC 中的字符串和数组传递赋值时一般都 &lt;code&gt;copy&lt;/code&gt;，string_view 相当于是 &lt;code&gt;assign&lt;/code&gt;，搞不好野指针呢。&lt;/p&gt;
&lt;p&gt;详见 &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4480.html#string.view&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;string_view&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Link-Time-Optimization&quot;&gt;&lt;a href=&quot;#Link-Time-Optimization&quot; class=&quot;headerlink&quot; title=&quot;Link-Time Optimization&quot;&gt;&lt;/a&gt;Link-Time Optimization&lt;/h2&gt;&lt;p&gt;去年搞了个 LTO 和 增量 LTO，今年优化得编译速度更快了，于是建议我们打开 增量 LTO 啊：在编译选项中 Code Generation-&amp;gt;Link-Time Optimization&lt;/p&gt;
&lt;p&gt;其实我看了 &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/405/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2016 年的 What’s New in LLVM&lt;/a&gt;, LTO 确实占了很大篇幅，不过当时还不建议开启。经过一年的优化后算是修成正果了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这&lt;strong&gt;绝不仅仅&lt;/strong&gt;是一篇 WWDC 2017 Session 411 学习笔记。除了有关 LLVM  9.0 的新特性之外，还有关于静态分析器和 Clang 5 Objective-C ARC 的一点看法和经验。&lt;/p&gt;
&lt;p&gt;我觉得 LLVM 9 的亮点如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持 Objective-C API 可用性检查&lt;/li&gt;
&lt;li&gt;新增一些对隐患代码的静态分析检查和 warning&lt;/li&gt;
&lt;li&gt;更快的 LTO，使其可以真正使用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Core ML and Vision Framework on iOS 11</title>
    <link href="http://yulingtianxia.com/blog/2017/06/19/Core-ML-and-Vision-Framework-on-iOS-11/"/>
    <id>http://yulingtianxia.com/blog/2017/06/19/Core-ML-and-Vision-Framework-on-iOS-11/</id>
    <published>2017-06-19T02:05:41.000Z</published>
    <updated>2017-07-05T15:04:45.000Z</updated>
    
    <content type="html">&lt;p&gt;机器学习和计算机视觉在 iOS 上虽然早已有了系统级的支持，但 WWDC 17 发布的 iOS 11 将它们的使用门槛大大降低。苹果提供了设计合理且容易上手的 API，让那些对基础理论知识一窍不通的门外汉也能玩转高大上的前沿科技，这是苹果一贯的风格。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这是一篇 WWDC 2017 Session 506，608，703 和 710 的学习笔记，以及分享自己尝试写的 Demo &lt;a href=&quot;https://github.com/yulingtianxia/Core-ML-Sample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core-ML-Sample&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/Core-ML-Sample/blob/master/coreml.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Core-ML&quot;&gt;&lt;a href=&quot;#Core-ML&quot; class=&quot;headerlink&quot; title=&quot;Core ML&quot;&gt;&lt;/a&gt;Core ML&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Core ML 大大降低了开发者在苹果设备上使用机器学习技术预测模型的门槛和成本。苹果制定了自己的模型文件格式，统一的格式和全新的 API 设计使得 Core ML 支持苹果生态下多个平台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/coreml1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将数据经过预处理后输入 MLMODEL 文件，输出为模型的预测结果。使用 Core ML 只需要很少的代码就可以构建起一个机器学习的应用。只需关注代码即可，无需关注模型的定义，网络的构成。这跟以前写 MPS 代码时构成了强烈的反差：开发者需要写大量 MPS 代码用于构建和描述一个完整的网络，而加载的文件仅仅是模型的权重而已。MLMODEL 文件包含了权重和模型结构等信息，并可以自动生成相关的代码，节省开发者大量时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/coreml2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Model-转换工具&quot;&gt;&lt;a href=&quot;#Model-转换工具&quot; class=&quot;headerlink&quot; title=&quot;Model 转换工具&quot;&gt;&lt;/a&gt;Model 转换工具&lt;/h3&gt;&lt;p&gt;苹果提供了一个 Python 工具，可以将业内一些常用的机器学习框架导出的 Model 转成 MLMODEL 文件。代码会编译成可执行二进制文件，而 MLMODEL 会编译成 Bundle 文件，在代码文件中可以直接调用 MLMODEL 生成的类，这些都是需要 Xcode 9 做支撑，也就是说，现阶段并不支持动态下发 MLMODEL 文件。Core ML 的预测过程全都在客户端进行，保证用户隐私不会泄露。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/coreml4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Core ML 支持 DNN,RNN,CNN,SVM,Tree ensembles,Generalized linear models,Pipeline models 等，对应的模型转换工具 &lt;a href=&quot;https://pypi.python.org/pypi/coremltools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core ML Tools&lt;/a&gt; 也支持了一些常用机器学习框架模型的转换。虽然目前没有直接支持 Google 的 TensorFlow，但可以使用 Keras 曲线救国。&lt;code&gt;coremltools&lt;/code&gt; 已经开源，并提供可拓展性的底层接口，可以编写适配其他机器学习框架模型的转换工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/coreml3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;MLMODEL 文件中还包含了很多元数据，比如作者，License，输入输出的描述文字。这些元数据都可以通过 &lt;code&gt;coremltools&lt;/code&gt; 的接口进行设置。&lt;code&gt;coremltools&lt;/code&gt; 上手很简单，可以查看完整详细的&lt;a href=&quot;https://pythonhosted.org/coremltools/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;把 MLMODEL 文件拖拽到 Xcode 工程中后，记得要勾选对应的 target，这样 Xcode 才会自动生成对应的代码。生成的类名就是 MLMODEL 文件名，输入和输出的变量名和类型也可以在 Xcode 中查看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/coreml5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;底层计算性能&quot;&gt;&lt;a href=&quot;#底层计算性能&quot; class=&quot;headerlink&quot; title=&quot;底层计算性能&quot;&gt;&lt;/a&gt;底层计算性能&lt;/h3&gt;&lt;p&gt;Core ML 的底层是 Accelerate BNNS 和 MPS，并可以根据实际情况进行无缝切换。比如在处理图片的场景下使用 MPS，处理文字场景下使用 Accelerate，甚至可以在同一个 model 的不同层使用不同的底层技术来预测。Vision 和 NLP 可以结合 Core ML 一起使用。Core ML 对硬件做了性能优化，而且支持的模型种类更多，开发者不用关注底层的一些细节，苹果全都封装好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/coreml6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，这些也都是建立在 MPS 更新的基础上，MPS 在 iOS 11 中拓展了支持向量和矩阵的数据结构 &lt;code&gt;MPSVector&lt;/code&gt; 与 &lt;code&gt;MPSMatrix&lt;/code&gt;，以及它们之间相乘的 API。而且提供了更多的神经网络类型（比如 RNN 等），在卷积神经网络中也提供了更多种类的卷积核，用于满足更多特殊场景。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/608_using_metal_2_for_compute_%E9%A1%B5%E9%9D%A2_065.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;苹果在 Metal 2 中补充 MPS 大量功能的同时，也提供了用于描述神经网络结构的语言：Neural Network Graph API。使用它可以极大简化代码逻辑，代码量缩减到以前的四分之一（以 Inception V3 为例）。并且使用 NN Graph API 可以并行使用 CPU 和 GPU。这种图语言跟主流的分布式机器学习框架的使用很像：先用简单的 Python 语言描述好网络结构，定义好输入输出格式，然后一次性提交到后端去执行。后端对底层性能做了很多细节优化，然而开发者完全不用关心这些。新增的 &lt;code&gt;MPSNNGraph&lt;/code&gt; 提供了异步接口使得 CPU 不用再等待 GPU 的执行结果，性能也得到提升。&lt;/p&gt;
&lt;p&gt;Metal 2 使用 MPS 进行图像处理的性能也得到了提升，在不同的设备上大约提升了百分之二十多。&lt;/p&gt;
&lt;h3 id=&quot;Demo-数据预处理&quot;&gt;&lt;a href=&quot;#Demo-数据预处理&quot; class=&quot;headerlink&quot; title=&quot;Demo: 数据预处理&quot;&gt;&lt;/a&gt;Demo: 数据预处理&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/Core-ML-Sample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Core-ML-Sample&lt;/a&gt; 使用了 Core ML 和 Vision 技术实现对摄像头拍摄的图像实时预测物体种类。因为图像来源是摄像头，所以需要将 &lt;code&gt;CMSampleBuffer&lt;/code&gt; 转成 &lt;code&gt;CVPixelBuffer&lt;/code&gt;。因为 Xcode 9 已经生成好了代码，直接调用 &lt;code&gt;Inceptionv3&lt;/code&gt; 类的 &lt;code&gt;prediction&lt;/code&gt; 方法即可完成预测。生成的 &lt;code&gt;Inceptionv3Output&lt;/code&gt; 类含有 &lt;code&gt;classLabel&lt;/code&gt; 和 &lt;code&gt;classLabelProbs&lt;/code&gt; 两个属性，可以获取预测的分类标签名以及每种标签的可能性。可以点击 Xcode Model View 中 Model Class 的生成源码箭头来查看这些类的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; inceptionv3model = &lt;span class=&quot;type&quot;&gt;Inceptionv3&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleImageBufferWithCoreML&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(imageBuffer: CMSampleBuffer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pixelBuffer = &lt;span class=&quot;type&quot;&gt;CMSampleBufferGetImageBuffer&lt;/span&gt;(imageBuffer) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; prediction = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.inceptionv3model.prediction(image: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.resize(pixelBuffer: pixelBuffer)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; prob = prediction.classLabelProbs[prediction.classLabel] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.predictLabel.text = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(prediction.classLabel)&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;\(String(describing: prob)&lt;/span&gt;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;NSError&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Unexpected error ocurred: &lt;span class=&quot;subst&quot;&gt;\(error.localizedDescription)&lt;/span&gt;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 Xcode Model View 中可以看到 Inceptionv3 模型的输入图片为 &lt;code&gt;Image&amp;lt;RGB,299,299&amp;gt;&lt;/code&gt;，所以需要对摄像头采集到的图像进行预处理。我的转换流程是：&lt;code&gt;CVPixelBuffer-&amp;gt;CVPixelBuffer-&amp;gt;CIImage-&amp;gt;CIImage(resized)-&amp;gt;CVPixelBuffer&lt;/code&gt;。最后一步 &lt;code&gt;CIImage&lt;/code&gt; 转 &lt;code&gt;CVPixelBuffer&lt;/code&gt; 是通过 &lt;code&gt;CIContext&lt;/code&gt; 渲染完成。&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// resize CVPixelBuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - Parameter pixelBuffer: CVPixelBuffer by camera output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - Returns: CVPixelBuffer with size (299, 299)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func resize(pixelBuffer: CVPixelBuffer) -&amp;gt; CVPixelBuffer? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   let imageSide = &lt;span class=&quot;number&quot;&gt;299&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var ciImage = CIImage(cvPixelBuffer: pixelBuffer, options: nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   let transform = CGAffineTransform(scaleX: CGFloat(imageSide) / CGFloat(CVPixelBufferGetWidth(pixelBuffer)), y: CGFloat(imageSide) / CGFloat(CVPixelBufferGetHeight(pixelBuffer)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ciImage = ciImage.applying(transform).cropping(to: CGRect(x: 0, y: 0, width: imageSide, height: imageSide))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   let ciContext = CIContext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   var resizeBuffer: CVPixelBuffer?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   CVPixelBufferCreate(kCFAllocatorDefault, imageSide, imageSide, CVPixelBufferGetPixelFormatType(pixelBuffer), nil, &amp;amp;resizeBuffer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ciContext.render(ciImage, to: resizeBuffer!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resizeBuffer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了图片需要预处理外，其他数据可能也需要预处理。这需要看训练的模型的输入是什么形式，比如分析一段文本所表达的情绪是开心还是沮丧，可能需要写个预处理程序统计词频，然后输入到训练好的模型中进行预测。&lt;/p&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Model 极速集成&lt;/li&gt;
&lt;li&gt;支持多种数据类型&lt;/li&gt;
&lt;li&gt;硬件优化&lt;/li&gt;
&lt;li&gt;适配主流机器学习框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Vision&quot;&gt;&lt;a href=&quot;#Vision&quot; class=&quot;headerlink&quot; title=&quot;Vision&quot;&gt;&lt;/a&gt;Vision&lt;/h2&gt;&lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;人脸检测：支持检测笑脸、侧脸、局部遮挡脸部、戴眼镜和帽子等场景，可以标记出人脸的矩形区域&lt;/li&gt;
&lt;li&gt;人脸特征点：可以标记出人脸和眼睛、眉毛、鼻子、嘴、牙齿的轮廓，以及人脸的中轴线&lt;/li&gt;
&lt;li&gt;图像配准&lt;/li&gt;
&lt;li&gt;矩形检测&lt;/li&gt;
&lt;li&gt;二维码/条形码检测&lt;/li&gt;
&lt;li&gt;文字检测&lt;/li&gt;
&lt;li&gt;目标跟踪：脸部，矩形和通用模板&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Vision-使用姿势&quot;&gt;&lt;a href=&quot;#Vision-使用姿势&quot; class=&quot;headerlink&quot; title=&quot;Vision 使用姿势&quot;&gt;&lt;/a&gt;Vision 使用姿势&lt;/h3&gt;&lt;p&gt;将各种功能的 Request 提供给一个 RequestHandler，Handler 持有图片信息，并将处理结果分发给每个 Request 的 completion Block 中。可以从 &lt;code&gt;results&lt;/code&gt; 属性中得到 Observation 数组，然后进行更新 UI 等操作。因为 completion Block 所执行的队列跟 perform request 的队列相同，所以更新 UI 时记得使用主队列。&lt;/p&gt;
&lt;p&gt;Vision 操作流水线分为两类：分析图片和跟踪队列。可以使用图片检测出的物体或矩形结果（Observation）来作为跟踪队列请求（Request）的参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/506_vision_framework_building_on_core_ml_%E9%A1%B5%E9%9D%A2_36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/506_vision_framework_building_on_core_ml_%E9%A1%B5%E9%9D%A2_40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vision 支持的图片数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CVPixelBufferRef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CGImageRef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CIImage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSURL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NSData&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几乎涵盖了 iOS 中图片相关的 API，很实用很强大。&lt;/p&gt;
&lt;p&gt;Vision 有三种 resize 图片的方式，无需使用者再次裁切缩放&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VNImageCropAndScaleOptionCenterCrop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VNImageCropAndScaleOptionScaleFit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VNImageCropAndScaleOptionScaleFill&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vision 与 iOS 上其他几种带人脸检测功能框架的对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/iOS11/506_vision_framework_building_on_core_ml_%E9%A1%B5%E9%9D%A2_72.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Demo-与-Core-ML-集成&quot;&gt;&lt;a href=&quot;#Demo-与-Core-ML-集成&quot; class=&quot;headerlink&quot; title=&quot;Demo: 与 Core ML 集成&quot;&gt;&lt;/a&gt;Demo: 与 Core ML 集成&lt;/h3&gt;&lt;p&gt;Core ML 具有更好的性能，Vision 可为其提供图片处理的流程。Core ML 生成的代码中含有 &lt;code&gt;MLModel&lt;/code&gt; 类型的 &lt;code&gt;model&lt;/code&gt; 对象，可以用它初始化 &lt;code&gt;VNCoreMLModel&lt;/code&gt; 对象，这样就将 Core ML 的 Model 集成进 Vision 框架中了：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; requests = [&lt;span class=&quot;type&quot;&gt;VNRequest&lt;/span&gt;]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setupVision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; visionModel = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;VNCoreMLModel&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;: inceptionv3model.model) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;can&#39;t load Vision ML model&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; classificationRequest = &lt;span class=&quot;type&quot;&gt;VNCoreMLRequest&lt;/span&gt;(model: visionModel) &amp;#123; (request: &lt;span class=&quot;type&quot;&gt;VNRequest&lt;/span&gt;, error: &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt;?) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; observations = request.results &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;no results:&lt;span class=&quot;subst&quot;&gt;\(error!)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; classifications = observations[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;...&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           .flatMap(&amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;VNClassificationObservation&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           .&lt;span class=&quot;built_in&quot;&gt;filter&lt;/span&gt;(&amp;#123; $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.confidence &amp;gt; &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           .&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;(&amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.identifier)&lt;/span&gt; &lt;span class=&quot;subst&quot;&gt;\($&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.confidence)&lt;/span&gt;&quot;&lt;/span&gt; &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;type&quot;&gt;DispatchQueue&lt;/span&gt;.main.async &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.predictLabel.text = classifications.joined(separator: &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   classificationRequest.imageCropAndScaleOption = &lt;span class=&quot;type&quot;&gt;VNImageCropAndScaleOptionCenterCrop&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.requests = [classificationRequest]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码实现了 Vision 的工作流，并在 completion Block 中对预测结果进行了处理：从 top5 中筛选可能性大于 0.2 的结果，并转成文本描述。因为所有结果的可能性总和为 1，所以最终的结果不会达到 5 个，实际测试中其实结果往往只有 1-2 个。&lt;/p&gt;
&lt;p&gt;对摄像头传入的每帧图片进行预测。虽然 Vision 帮我们完成了预处理等流程上的工作，但是需要我们传入一些额外的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleImageBufferWithVision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(imageBuffer: CMSampleBuffer)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; pixelBuffer = &lt;span class=&quot;type&quot;&gt;CMSampleBufferGetImageBuffer&lt;/span&gt;(imageBuffer) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; requestOptions:[&lt;span class=&quot;type&quot;&gt;VNImageOption&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] = [:]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cameraIntrinsicData = &lt;span class=&quot;type&quot;&gt;CMGetAttachment&lt;/span&gt;(imageBuffer, kCMSampleBufferAttachmentKey_CameraIntrinsicMatrix, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       requestOptions = [.cameraIntrinsics:cameraIntrinsicData]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; imageRequestHandler = &lt;span class=&quot;type&quot;&gt;VNImageRequestHandler&lt;/span&gt;(cvPixelBuffer: pixelBuffer, orientation: &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.exifOrientationFromDeviceOrientation, options: requestOptions)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; imageRequestHandler.perform(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.requests)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要向图片传入 EXIF Orientation 信息：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; only support back camera&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;symbol&quot;&gt;exifOrientationFromDeviceOrientation:&lt;/span&gt; Int32 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   let &lt;span class=&quot;symbol&quot;&gt;exifOrientation:&lt;/span&gt; DeviceOrientation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DeviceOrientation&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Int32&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; top0ColLeft = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; top0ColRight = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; bottom0ColRight = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; bottom0ColLeft = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; left0ColTop = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; right0ColTop = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; right0ColBottom = &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; left0ColBottom = &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   switch UIDevice.current.orientation &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;portraitUpsideDown:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       exifOrientation = .left0ColBottom&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;landscapeLeft:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       exifOrientation = .top0ColLeft&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; .&lt;span class=&quot;symbol&quot;&gt;landscapeRight:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       exifOrientation = .bottom0ColRight&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;symbol&quot;&gt;default:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       exifOrientation = .right0ColTop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; exifOrientation.rawValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;总结-1&quot;&gt;&lt;a href=&quot;#总结-1&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Vision 是一个关于计算机视觉的顶层新框架。&lt;/li&gt;
&lt;li&gt;一个界面，多重跟踪检测&lt;/li&gt;
&lt;li&gt;集成 Core ML 轻松使用自己的 model&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;感受&quot;&gt;&lt;a href=&quot;#感受&quot; class=&quot;headerlink&quot; title=&quot;感受&quot;&gt;&lt;/a&gt;感受&lt;/h2&gt;&lt;p&gt;苹果为开发者带来了炫酷的功能，并且这些示例很有针对性，更实用。Vision 更像是一个工具库，对一些高频场景进行了封装，比如人脸、条形码、矩形和文字等，这些基于底层 API 封装的高级功能可以帮助开发者很快地完成老板的功能。而 Core ML 给出的 Model 也很有代表性，贴近实际应用场景，很容易激发开发者使用的热情。我想这正是苹果最擅长的，把复杂的事情简单化，提供极易上手的 Demo，并循序渐进，给予开发者更高深的玩法，不失拓展性和定制化。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;coremltools&lt;/code&gt; 肯定还存在一些兼容性问题，并且会随着各大机器学习框架的更新而不断更新，我想这也是为何苹果将其开源的原因吧。使用 python 也更方便维护，而且主流的机器学习框架都是用 python 作为前端语言。&lt;/p&gt;
&lt;p&gt;Core ML 功能强大，支持的模型种类很多。与此同时，MPS 在 iOS 11 也得到了升级，新增的数据类型更方便使用。总之其实还是新增了对底层数据和算法的封装，然后 Core ML 在此基础上又进行了一层高级的封装。可以看出苹果这一年在底层下的功夫确实不少，在这之后才有了更强大更全面的 API。我预测在这之后 Core ML 还会有更多的模型得到支持，Vision 也会加入更丰富的应用场景。&lt;/p&gt;
&lt;p&gt;如果苹果能够发挥硬件上性能的优势，可能在以后还会演示出更炫酷的 Demo，比如视频实时防抖的处理，更牛逼的滤镜效果。对高性能计算和 GPU 图像处理感兴趣的话，推荐看下 Metal 2 相关的 Session，尤其是 Session 608。&lt;/p&gt;
&lt;p&gt;同时也会发现苹果在机器学习的道路上避开了各个训练框架的锋芒，尤其是最近大红大紫的 Google TensorFlow。它选择另辟蹊径，在移动端模型预测性能优化和低成本接入的道路上另辟蹊径，充分发挥自身平台的优势。毕竟在移动端训练模型意义较小，还是交给服务端比较合理。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;机器学习和计算机视觉在 iOS 上虽然早已有了系统级的支持，但 WWDC 17 发布的 iOS 11 将它们的使用门槛大大降低。苹果提供了设计合理且容易上手的 API，让那些对基础理论知识一窍不通的门外汉也能玩转高大上的前沿科技，这是苹果一贯的风格。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Implementing CNN with MPS</title>
    <link href="http://yulingtianxia.com/blog/2017/05/30/Implementing-CNN-with-MPS/"/>
    <id>http://yulingtianxia.com/blog/2017/05/30/Implementing-CNN-with-MPS/</id>
    <published>2017-05-30T09:20:32.000Z</published>
    <updated>2017-06-17T02:55:01.000Z</updated>
    
    <content type="html">&lt;p&gt;最近一个月从零开始自学了下有关 iOS 上的机器学习相关知识，亲身实践了从数据采集到训练模型再到移动端预测的流程。理论知识学习路径为：&lt;strong&gt;机器学习-&amp;gt;深度学习-&amp;gt;迁移学习&lt;/strong&gt;；实践框架学习路径为：&lt;strong&gt;TensorFlow-&amp;gt;Keras-&amp;gt;MPS(iOS 10)&lt;/strong&gt;。最终完成一个简单的手势图像五分类问题，并预测 iOS 摄像头采集的图片。最终结果，训练集准确率 96.26%，交叉验证集准确率 73.86%。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;理论基础&quot;&gt;&lt;a href=&quot;#理论基础&quot; class=&quot;headerlink&quot; title=&quot;理论基础&quot;&gt;&lt;/a&gt;理论基础&lt;/h2&gt;&lt;p&gt;虽然结果导向很重要，但是我还是想从基础学起，而不是去急于去网上找现成的解决方案来调参。毕竟我的目的是拓宽知识面，开新的技能树。&lt;/p&gt;
&lt;p&gt;第一周从零开始学习了 Coursera 上 Stanford Ng 教授的 &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/home&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Machine Learning&lt;/a&gt; 经典课程，用 Matlab 编写了一些 Demo，用一周时间完成了原本需要 11 周时间的所有课程和考试，对机器学习的基础知识有了掌握。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw1024/642c5793ly1ff5ornniluj21kw0u3tn2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;机器学习大体可以分为有监督学习和无监督学习。带标签数据的有监督学习包含从最简单的线性回归到逻辑回归，再到神经网络和 SVM（支持向量机）。无监督学习包含大学竖直的 K-means 聚类，PCA(Principal Components Analysis) 降维。以及带标签数据的异常检测算法。为了确保机器学习的效果，需要通过看懂学习曲线决定下一步的工作，是解决 overfit 还是 underfit。使用交叉验证集和测试集评估模型时，如何平衡准确率和召回率，比如 F1 Score 指标。在数据预处理上要了解一些数据归一化标准化的方法。&lt;/p&gt;
&lt;p&gt;光掌握机器学习的基础知识显然不够，大而全不如专而精。深度学习在图像识别领域大放异彩，其实深度学习是机器学习的一个分支，而深度学习领域最近在图像识别上应用最火的可能就是 CNN 了。所以在狂学深度学习的时候重点研究了下 CNN。&lt;/p&gt;
&lt;h3 id=&quot;卷积神经网络简介&quot;&gt;&lt;a href=&quot;#卷积神经网络简介&quot; class=&quot;headerlink&quot; title=&quot;卷积神经网络简介&quot;&gt;&lt;/a&gt;卷积神经网络简介&lt;/h3&gt;&lt;p&gt;全连接网络权重过多，而卷积神经网络可以实现权值共享，引入了深度，数据为 3D 的。推荐查看 Stanford 的 &lt;a href=&quot;http://cs231n.github.io/convolutional-networks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Convolutional Neural Networks (CNNs / ConvNets)&lt;/a&gt;，中文翻译：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22038289&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CS231n课程笔记翻译：卷积神经网络笔记&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;卷积核一般为奇数，常用的都是小卷积核，比如 1x1,3x3,5x5。&lt;a href=&quot;https://zh.wikipedia.org/wiki/卷积&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;卷积&lt;/a&gt;是一种数学运算，卷积核在扫描数据的时候，正好做的就是卷积运算。卷积核其实就是个滤波器，通过平移点积运算处理数据。一个卷积层可以有多个卷积核，也就是多个滤波器，每种滤波器所『感受』的内容不同，结果也很有意思。可以看看这篇文章：&lt;a href=&quot;https://blog.keras.io/how-convolutional-neural-networks-see-the-world.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How convolutional neural networks see the world&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;CNN 中不仅有 Convolution，还有 Pooling，Activation，Fully Connected等层级。&lt;/p&gt;
&lt;p&gt;Pooling 就是 downsampling，减小数据尺寸，常用的有有 max，average 等运算。&lt;br&gt;Activation 就是激活函数，常用的有 sigmoid，ReLU 等。&lt;br&gt;Fully Connected 也叫 Dense，因为全连接权重密度很大。其实就是个卷积核宽高等于输入数据宽高的特殊卷积层。卷积层和全连接层可以等效转换。&lt;/p&gt;
&lt;p&gt;如果卷积核尺寸不是 1x1，或平移的步长不是 1x1，那么卷积运算后的结果肯定比原尺寸要小，所以padding 规则就很重要。一般常用的『Same』规则就是在数据周围填充一些 0，使得卷积运算后的数据宽和高跟输入数据一样。&lt;/p&gt;
&lt;h3 id=&quot;图片分类常用的数据和预设网络模型&quot;&gt;&lt;a href=&quot;#图片分类常用的数据和预设网络模型&quot; class=&quot;headerlink&quot; title=&quot;图片分类常用的数据和预设网络模型&quot;&gt;&lt;/a&gt;图片分类常用的数据和预设网络模型&lt;/h3&gt;&lt;p&gt;图片分类使用已经打好标签的数据库来进行有监督学习，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Dataset&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Training Set Size&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Testing Set Size&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Number of Classes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Comments&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.cs.toronto.edu/~kriz/cifar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cifar10&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;60k&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10k&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32x32 color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MNIST&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;60k&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10k&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;28x28 gray&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://www.image-net.org/challenges/LSVRC/2012/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageNet&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.2M&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;50k&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1000&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Various sizes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;http://yann.lecun.com/exdb/mnist/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MNIST&lt;/a&gt; 算是深度学习领域的 HelloWorld 了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cs.toronto.edu/%7Ekriz/cifar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CIFAR&lt;/a&gt; 小尺寸图片数据库，包含 CIFAR10 和 CIFAR100。&lt;/p&gt;
&lt;p&gt;在图像识别领域，&lt;a href=&quot;http://image-net.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageNet&lt;/a&gt; 是非常有名的数据库，历年挑战中都有新的更复杂的神经网络跑出更好的结果。下面的表是一些网络模型在 &lt;a href=&quot;http://image-net.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageNet&lt;/a&gt; Challenge 中的准确率以及 TF-Slim 源码和 checkpoint 文件，数据来源：&lt;a href=&quot;https://github.com/tensorflow/models/tree/master/slim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow-Slim image classification library&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Model&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;TF-Slim File&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Checkpoint&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Top-1 Accuracy&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Top-5 Accuracy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1409.4842v1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception V1&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/inception_v1.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/inception_v1_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inception_v1_2016_08_28.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;69.8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;89.6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1502.03167&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception V2&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/inception_v2.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/inception_v2_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inception_v2_2016_08_28.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;73.9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;91.8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1512.00567&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception V3&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/inception_v3.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/inception_v3_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inception_v3_2016_08_28.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;78.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;93.9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1602.07261&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception V4&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/inception_v4.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/inception_v4_2016_09_09.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inception_v4_2016_09_09.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;80.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;95.2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1602.07261&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception-ResNet-v2&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/inception_resnet_v2.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/inception_resnet_v2_2016_08_30.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;inception_resnet_v2.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;80.4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;95.3&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ResNet V1 50&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v1.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/resnet_v1_50_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resnet_v1_50.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;75.2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;92.2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ResNet V1 101&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v1.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/resnet_v1_101_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resnet_v1_101.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;76.4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;92.9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1512.03385&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ResNet V1 152&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v1.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/resnet_v1_152_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resnet_v1_152.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;76.8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;93.2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1603.05027&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ResNet V2 50&lt;/a&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v2.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/resnet_v2_50_2017_04_14.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resnet_v2_50.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;75.6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;92.8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1603.05027&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ResNet V2 101&lt;/a&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v2.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/resnet_v2_101_2017_04_14.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resnet_v2_101.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;77.0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;93.7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/1603.05027&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ResNet V2 152&lt;/a&gt;^&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/resnet_v2.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/resnet_v2_152_2017_04_14.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;resnet_v2_152.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;77.8&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;94.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1409.1556.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VGG 16&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/vgg.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/vgg_16_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vgg_16.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;71.5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;89.8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://arxiv.org/abs/1409.1556.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VGG 19&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/tensorflow/models/blob/master/slim/nets/vgg.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Code&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://download.tensorflow.org/models/vgg_19_2016_08_28.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vgg_19.tar.gz&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;71.1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;89.8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;推荐一个还算不错的机器学习的数据网站：&lt;a href=&quot;https://www.kaggle.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kaggle&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;迁移学习&quot;&gt;&lt;a href=&quot;#迁移学习&quot; class=&quot;headerlink&quot; title=&quot;迁移学习&quot;&gt;&lt;/a&gt;迁移学习&lt;/h3&gt;&lt;p&gt;从头开始训练一个复杂的网络是很费时费力的，需要获取符合目标的海量真实数据，并使用性能极强的集群来训练数据，并有足够的耐心等待训练结果。稍有不慎，还需要不断调参，重新再来。这是个枯燥乏味的体力活，并且是在有硬件经济实力的基础上才办得到的。总会看到一些论文里描述自己的模型用 Tesla KXX 跑了多久才训练出了结果，其实在机器学习领域，花费半年甚至更久的时间来调参优化模型是很正常的。&lt;/p&gt;
&lt;p&gt;所以基于已经训练好的模型参数来进行 fine-tuning 后应用到新的模型上是一个省时省力的方案，也被称之为迁移学习。大部分数据是存在相关性的，在图片分类问题中，即便现有模型不包含我们想要的分类，也可以利用已经训练好的权重来进行 fine-tuning，使其对新的类别进行分类。&lt;/p&gt;
&lt;p&gt;一般的做法是将已经训练好的模型权重加载，除去 top 部分（全连接层和 softmax 分类器等），冻结前面层级的权重，只保留想要 fine-tuning 的层级（一般是后面的卷积层），最后根据分类个数自己添加全连接层。训练时只有后面的层级权重才会被修改，前面已经训练好的权重不会改变。这样会很快将正确率提高到 90% 以上。&lt;/p&gt;
&lt;p&gt;详细内容可以参考这篇文章：(&lt;a href=&quot;https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;框架选择&quot;&gt;&lt;a href=&quot;#框架选择&quot; class=&quot;headerlink&quot; title=&quot;框架选择&quot;&gt;&lt;/a&gt;框架选择&lt;/h2&gt;&lt;p&gt;有一些知名的框架可供选择：TensorFlow, Torch, Caffee, Theano, Keras…&lt;/p&gt;
&lt;p&gt;不同框架所使用的数据格式不一样，主要区别在于 Channel  通道的位置是在最前还是最后。框架之间的学习成本都不一样，单拿 TensorFlow 来说，其最基础的语法需要一点点构建一张图，而其 &lt;code&gt;tf.contrib.learn&lt;/code&gt; 和 &lt;code&gt;tf.contrib.layers&lt;/code&gt; API 是更高一层的封装，还有 TF-Slim 这种更轻量级的高级封装，几行代码就能干好多事，看起来更屌。但其实目前由于 TensorFlow 的快速迭代，导致不能向下兼容，老代码运行不起来。单拿 TF-Slim 来说，官网 API 文档缺失，Github 的教程代码老旧无法运行，还在使用从 model 库 merge 到 tensorflow 之前的语法。我当时本想用 TF-Slim 快速验证一些模型，结果没想到反而浪费了大量时间，得不偿失。&lt;/p&gt;
&lt;p&gt;Keras 基于 TensorFlow 或 Theano，集成了大量功能，是一种方便快速验证 idea 的高层 API。 内置大量常用网络，很容易上手，语法简洁，功能强大又不失可定制性。强力推荐，官方文档：&lt;a href=&quot;https://keras.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keras Documentation&lt;/a&gt;，中文文档：&lt;a href=&quot;http://keras-cn.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keras 中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;无论是哪种框架，几乎都是基于分布式设计的思想，先描述出计算图，然后再向图中填充数据流，使其运转起来，最后得到结果。虽然是使用 Python 语言来描述计算图，但是真正繁重的工作都会提交给底层的后端去处理。但这样也给 debug 带来了困难，因为描述计算图的时候并不能得到数据结果，只能检查出数据格式是否匹配。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;笼统的说，符号主义的计算首先定义各种变量，然后建立一个“计算图”，计算图规定了各个变量之间的计算关系。建立好的计算图需要编译以确定其内部细节，然而，此时的计算图还是一个“空壳子”，里面没有任何实际的数据，只有当你把需要运算的输入放进去后，才能在整个模型中形成数据流，从而形成输出值。&lt;br&gt;    就像用管道搭建供水系统，当你在拼水管的时候，里面是没有水的。只有所有的管子都接完了，才能送水。&lt;br&gt;    – 引自 &lt;a href=&quot;http://keras-cn.readthedocs.io/en/latest/for_beginners/concepts/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://keras-cn.readthedocs.io/en/latest/for_beginners/concepts/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;数据采集&quot;&gt;&lt;a href=&quot;#数据采集&quot; class=&quot;headerlink&quot; title=&quot;数据采集&quot;&gt;&lt;/a&gt;数据采集&lt;/h2&gt;&lt;p&gt;因为网上提供的一些用于训练的海量图片数据都是格式整齐像素较低的图片，比如28x28这种，且特征明显，都为某种物体，这种专用于比赛挑战的图片分类数量一般都是10，100，1000等，更专注于算法的准确率，忽视了真实的场景。&lt;/p&gt;
&lt;p&gt;为了模拟真实场景，我使用 Web 程序调用 iMac 前置摄像头采集 320x240 尺寸的照片。为了更高效采集图片数据，我采用连拍的方式拍摄并保存图片到本地：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MachineLearning/training_data.png&quot; alt=&quot;帅是我的无奈&quot;&gt;&lt;/p&gt;
&lt;p&gt;需要去除少量过于模糊和手指不小心跑出屏幕外的图片，尽可能提高数据的质量。&lt;/p&gt;
&lt;p&gt;因为不同平台和浏览器对 Html5 规范支持程度不同，建议在 Mac 上使用 Firefox，Windows 上应该 Chrome 也好使，但没试过。&lt;/p&gt;
&lt;p&gt;图像采集的代码放在 &lt;a href=&quot;https://github.com/yulingtianxia/HandGestureCNN/tree/master/captureImages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;captureImages&lt;/a&gt; 目录里。&lt;/p&gt;
&lt;h2 id=&quot;Inception-V3-pre-trained-network&quot;&gt;&lt;a href=&quot;#Inception-V3-pre-trained-network&quot; class=&quot;headerlink&quot; title=&quot;Inception V3 pre-trained network&quot;&gt;&lt;/a&gt;Inception V3 pre-trained network&lt;/h2&gt;&lt;p&gt;在 Keras Blog 中，&lt;a href=&quot;https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building powerful image classification models using very little data&lt;/a&gt; 很好地介绍了如何针对小数据集利用现有的 VGG16 网络 fine-tuning，并在 &lt;a href=&quot;https://www.kaggle.com/c/dogs-vs-cats/data&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dogs vs. Cats&lt;/a&gt; 数据集上取得了 94% 的准确率。&lt;/p&gt;
&lt;p&gt;VGG 系列网络虽然结构简单易理解，但无论是加载权重的耗时还是预测耗时都要比 Inception 系列网络要长，这是因为其权重数据更多。虽然 Inception 系列更复杂，但鉴于其优秀的性能和更胜一筹的准确率，我决定在移动设备上使用 Inception 而非 VGG。&lt;/p&gt;
&lt;p&gt;其实苹果爸爸已经帮我们用 Swift 和 Metal Performance Shaders 实现了个使用 Inception V3 网络预测图像类别的 Demo:&lt;a href=&quot;https://developer.apple.com/library/content/samplecode/MetalImageRecognition/Introduction/Intro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetalImageRecognition: Performing Image Recognition with Inception_v3 Network using Metal Performance Shaders Convolutional Neural Network routines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所以我决定使用 &lt;a href=&quot;https://arxiv.org/pdf/1512.00567v3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Inception V3 Network&lt;/a&gt; 来 fine-tuning，这样在后续的 MPS 代码编写上就会省很多时间。TensorFlow 官方也有相应 &lt;a href=&quot;https://www.tensorflow.org/tutorials/image_recognition#image-recognition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;教程&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;bottleneck-features&quot;&gt;&lt;a href=&quot;#bottleneck-features&quot; class=&quot;headerlink&quot; title=&quot;bottleneck features&quot;&gt;&lt;/a&gt;bottleneck features&lt;/h3&gt;&lt;p&gt;下图展示了 Inception V3 网络的结构，其中的 top 部分就是 Final part 所指的部分，我们可以将其替换成我们自己的全连接层，利用前面 Input 预测的结果来作为输入数据，训练我们自己的分类器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MachineLearning/Inception V3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图中的 Inception mudules 使用的是&lt;a href=&quot;https://arxiv.org/pdf/1512.00567v3.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;论文&lt;/a&gt;中提到的图 6 的结构，实际代码中则使用的图 5。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keras 有很多使用 ImageNet 预训练的模型，我们这里只需要 Inception V3 去掉 Final part 的剩余部分，一行代码搞定：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;model&lt;/span&gt; = applications.InceptionV3(include_top=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;, weights=&lt;span class=&quot;string&quot;&gt;&#39;imagenet&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 TensorFlow 中读取文件数据需要通过 &lt;code&gt;QueueRunner&lt;/code&gt; 和 &lt;code&gt;Coordinator&lt;/code&gt; 构造队列来实现 data flow，比较麻烦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MachineLearning/AnimatedFileQueues.gif&quot; alt=&quot;图片来源 TensorFlow&quot;&gt;&lt;/p&gt;
&lt;p&gt;Keras 真是太方便了，用生成器把图片数据标准化，使用加载好的 &lt;code&gt;model&lt;/code&gt; 预测出结果，并保存到 npy 文件中。&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;datagen&lt;/span&gt; = ImageDataGenerator(&lt;span class=&quot;attr&quot;&gt;rescale=1.&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;generator&lt;/span&gt; = datagen.flow_from_directory(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   train_data_dir,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;target_size=(img_width,&lt;/span&gt; img_height),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;batch_size=batch_size,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;class_mode=None,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;shuffle=False)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;bottleneck_features_train&lt;/span&gt; = model.predict_generator(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   generator, nb_train_samples // batch_size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.save(open(&#39;bottleneck_features_train.npy&#39;, &#39;w&#39;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       bottleneck_features_train)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里保存的结果并不是 one-hot 格式的分类结果，只是作为 Final part 的输入，所以叫做 bottleneck features。&lt;/p&gt;
&lt;p&gt;下一步就是构建自己的 Final part，比如我们这里想要做个五分类的模型：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt; = Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Flatten(input_shape=train_data.shape[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Dense(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;relu&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Dense(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;softmax&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Flatten&lt;/code&gt; 和 &lt;code&gt;Dropout&lt;/code&gt; 层并不会改变数据，是没有权重的层。所以这里有两个全连接层，最后一层有五个节点，输出一个长度为 5 的 one-hot 格式向量。&lt;/p&gt;
&lt;p&gt;这里之所以使用 bottleneck features 作为输入数据来进行训练，是为了节省运算资源。如果采用冻结前面部分网络的方式，虽然被冻结的网络权重不会变，但每跑一次的运算量都很大，而且结果是相同的。所以采取预测一次 bottleneck features，离线保存的方式。在机器学习中减少 loss 提升准确率常用的方法就是梯度下降法，实际应用中使用 mini-batch 梯度下降法来平衡计算性能和 loss 收敛效果。这里的 batch_size 就是每次下降所使用数据批次的数量。&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;model.compile(&lt;span class=&quot;attr&quot;&gt;optimizer=optimizers.SGD(lr=1e-4,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;momentum=0.9),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             &lt;span class=&quot;attr&quot;&gt;loss=&#39;categorical_crossentropy&#39;,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;metrics=[&#39;accuracy&#39;])&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model.fit(train_data, train_labels,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;epochs=epochs,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;batch_size=batch_size,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;validation_data=(validation_data,&lt;/span&gt; validation_labels))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model.save_weights(top_model_weights_path)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里训练的是我们自己添加的两个全连接层，以便于拟合我们自己的数据。&lt;/p&gt;
&lt;p&gt;这部分的源码放在 &lt;a href=&quot;https://github.com/yulingtianxia/HandGestureCNN/blob/master/Train/bottleneck_features_train_inceptionv3.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bottleneck_features_train_inceptionv3.py&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Fine-tuning&quot;&gt;&lt;a href=&quot;#Fine-tuning&quot; class=&quot;headerlink&quot; title=&quot;Fine-tuning&quot;&gt;&lt;/a&gt;Fine-tuning&lt;/h3&gt;&lt;p&gt;为了达到更好的效果，可以解冻后面几层。看了下 Inception V3 的网络结构，最后一个 tower 拥有 9 个卷积层，比较复杂。虽然理论上 fine-tuneing 整个 tower 是可行的，但是计算开销很大，用我的 iMac 4 GHz Intel Core i7 八核跑一个月都不行。&lt;/p&gt;
&lt;p&gt;现在需要加载预训练网络的权重到 &lt;code&gt;base_model&lt;/code&gt; 中，并将其与 &lt;code&gt;top_model&lt;/code&gt; 拼在一起。Keras 中有两种描述模型，一种是 &lt;code&gt;Sequential&lt;/code&gt;，另一种是带有函数式 API 的 &lt;code&gt;Model&lt;/code&gt;。前者层与层之前连接的入度和出度都为 1，后者就很灵活很随意了。这里构建 &lt;code&gt;top_model&lt;/code&gt; 使用的 &lt;code&gt;Sequential&lt;/code&gt;，然后使用 &lt;code&gt;Model&lt;/code&gt; 统一输入和输出，起到连接的作用。最后通过设置 &lt;code&gt;trainable&lt;/code&gt; 属性来冻结部分网络。为了让准确率更高，会将上一步 bottleneck features 训练好的权重作为 &lt;code&gt;top_model&lt;/code&gt; 的初始权重。&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# build the InceptionV3 network&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;input_tensor&lt;/span&gt; = Input(&lt;span class=&quot;attr&quot;&gt;shape=(img_height,&lt;/span&gt; img_width, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;base_model&lt;/span&gt; = applications.InceptionV3(&lt;span class=&quot;attr&quot;&gt;weights=&#39;imagenet&#39;,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;include_top=False,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;input_tensor=input_tensor)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&#39;Model loaded.&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# build a classifier model to put on top of the convolutional model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;top_model&lt;/span&gt; = Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_model.add(Flatten(&lt;span class=&quot;attr&quot;&gt;input_shape=base_model.output_shape[1:]))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_model.add(Dense(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;activation=&#39;relu&#39;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_model.add(Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_model.add(Dense(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;activation=&#39;softmax&#39;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# note that it is necessary to start with a fully-trained&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# classifier, including the top classifier,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# in order to successfully do fine-tuning&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;top_model.load_weights(top_model_weights_path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# add the model on top of the convolutional base&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;model&lt;/span&gt; = Model(&lt;span class=&quot;attr&quot;&gt;inputs=base_model.input,&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;outputs=top_model(base_model.output))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# set the first xx layers (up to the last conv block)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# to non-trainable (weights will not be updated)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for layer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; model.layers[:len(base_model.layers)-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer.&lt;span class=&quot;attr&quot;&gt;trainable&lt;/span&gt; = False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关 Keras 两种模型的概念可以查看 &lt;a href=&quot;https://keras.io/models/about-keras-models/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;About Keras models&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;可以通过设置数据生成器的一些参数来提升数据的随机性，降低过拟合。&lt;code&gt;ImageDataGenerator&lt;/code&gt; 针对图片有很多预设的处理方式，例如平移，旋转，缩放，反转等。TensorFlow 中也有类似的图片预处理功能，但 API 使用上没 Keras 便利。有关图片预处理的内容可以参考文档 &lt;a href=&quot;https://keras.io/preprocessing/image/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Image Preprocessing&lt;/a&gt;，这里仅针对某些方式进行随意预处理，提升数据：&lt;/p&gt;
&lt;figure class=&quot;highlight nix&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;train_datagen&lt;/span&gt; = ImageDataGenerator(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;rescale=1./255,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;rotation_range=40,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;width_shift_range=0.2,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;height_shift_range=0.2,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;shear_range=0.2,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;zoom_range=0.2,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;horizontal_flip=True,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;attr&quot;&gt;fill_mode=&#39;nearest&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Keras 可以根据数据的文件夹自动分类打标签，所以我将图片按文件夹归类就可以了，很方便。&lt;/p&gt;
&lt;p&gt;我一共使用了 1808 张图片作为训练集，192 张图片作为交叉验证集。经过了 50 个 epoch 后，训练集准确率 96.26%，交叉验证集准确率 73.86%。&lt;/p&gt;
&lt;p&gt;这部分源码放在 &lt;a href=&quot;https://github.com/yulingtianxia/HandGestureCNN/blob/master/Train/finetune_inceptionv3.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;finetune_inceptionv3.py&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Convert-HDF5-to-binary-dat-files&quot;&gt;&lt;a href=&quot;#Convert-HDF5-to-binary-dat-files&quot; class=&quot;headerlink&quot; title=&quot;Convert HDF5 to binary .dat files&quot;&gt;&lt;/a&gt;Convert HDF5 to binary .dat files&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;HDF（英语：Hierarchical Data Format）指一种为存储和处理大容量科学数据设计的文件格式及相应库文件。HDF最早由NCSA开发，目前在非盈利组织 HDF 小组维护下继续发展。当前流行的版本是HDF5。&lt;br&gt;    – 维基百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.hdfgroup.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HDF Group&lt;/a&gt; 提供了可视化查看 HDF 文件的工具：&lt;a href=&quot;https://support.hdfgroup.org/products/java/release/download.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HDFView&lt;/a&gt;，因为是用 java 写的，所以是跨平台的。Mac 版本有个已知的 bug：双击一个 &lt;code&gt;.h5&lt;/code&gt; 文件后 HDFView 界面是空的，需要把 &lt;code&gt;.h5&lt;/code&gt; 文件拖动到 HDFView 左边栏才能打开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MachineLearning/HDFView.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Keras 可以将训练处的权重结果高存成 HDF5 格式，但苹果提供的 Demo 使用的权重文件是 memory-mapped 二进制文件，每层网络都对应一个 &lt;code&gt;.dat&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://support.hdfgroup.org/products/hdf5_tools/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SOFTWARE USING HDF5&lt;/a&gt; 列举了很多用于操作 HDF 文件和格式转换的工具。可以用一些工具将存有权重的 HDF 文件先转化成若干 &lt;code&gt;.dat&lt;/code&gt; 文件，然后再打包到 iOS App 中。还有一种做法是将 HDF 文件打包到 iOS App 中，然后在客户端完成格式导出。&lt;a href=&quot;https://github.com/aleph7/HDF5Kit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HDF5Kit&lt;/a&gt; 是对 &lt;a href=&quot;https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HDF 源码&lt;/a&gt;的 Swift 封装，不过还有些 crash。我采用了第二种做法，因为我懒，替换权重文件的时候只需要一个 HDF 文件，不用替换一堆 &lt;code&gt;.dat&lt;/code&gt; 文件🙄。实际应用中千万别这么干。&lt;/p&gt;
&lt;p&gt;可以根据上图中 HDFView 展示的树状层级递归遍历 Group，并拼接好正确的名称。比如 “bias:0” 和 “kernel:0”。将 HDF5 转换成二进制文件的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Read parameters from HDF5 file and store to dat file in Tmp directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extractHDF5&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(h5Name: String)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// MARK: Parse HDF5 file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; path = &lt;span class=&quot;type&quot;&gt;Bundle&lt;/span&gt;.main.path(forResource: h5Name, ofType: &lt;span class=&quot;string&quot;&gt;&quot;h5&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to get a path&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; file = &lt;span class=&quot;type&quot;&gt;File&lt;/span&gt;.open(path, mode: .readOnly) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to open file at &lt;span class=&quot;subst&quot;&gt;\(path)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; layerNamesStringAttribute = file.openStringAttribute(&lt;span class=&quot;string&quot;&gt;&quot;layer_names&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to open attribute &#39;layer_names&#39;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; layerNames = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;? layerNamesStringAttribute.read() &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to get layer names&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// count used for file name later&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; countOfConvLayer = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; countOfFcLayer   = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; partOfFileName = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; layerName &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layerNames &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; layerGroup = file.openGroup(layerName) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to open group of &lt;span class=&quot;subst&quot;&gt;\(layerName)&lt;/span&gt;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; objectName &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layerGroup.objectNames() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// only the layer that has parameters remain&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wtDataset = layerGroup.openFloatDataset(objectName + &lt;span class=&quot;string&quot;&gt;&quot;/kernel:0&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to open data set of &lt;span class=&quot;subst&quot;&gt;\(objectName)&lt;/span&gt;/kernel:0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bsDataset = layerGroup.openFloatDataset(objectName + &lt;span class=&quot;string&quot;&gt;&quot;/bias:0&quot;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to open data set of &lt;span class=&quot;subst&quot;&gt;\(objectName)&lt;/span&gt;/bias:0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dimension = wtDataset.space.dims&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wtArray = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;? wtDataset.read() &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to read data set of &lt;span class=&quot;subst&quot;&gt;\(objectName)&lt;/span&gt;/kernel:0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bsArray = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;? bsDataset.read() &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Failed to read data set of &lt;span class=&quot;subst&quot;&gt;\(objectName)&lt;/span&gt;/bias:0&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wtLength = wtArray.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bsLength = bsArray.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dimension.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// weights for convolution layer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                wtArray = &lt;span class=&quot;type&quot;&gt;SwapAxes&lt;/span&gt;.for4dFlatArray(originalArray: wtArray, axis1: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, axis2: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, dimensionOfArray: &amp;amp;dimension)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                wtArray = &lt;span class=&quot;type&quot;&gt;SwapAxes&lt;/span&gt;.for4dFlatArray(originalArray: wtArray, axis1: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, axis2: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, dimensionOfArray: &amp;amp;dimension)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                wtArray = &lt;span class=&quot;type&quot;&gt;SwapAxes&lt;/span&gt;.for4dFlatArray(originalArray: wtArray, axis1: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, axis2: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, dimensionOfArray: &amp;amp;dimension)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                countOfConvLayer += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                partOfFileName = &lt;span class=&quot;string&quot;&gt;&quot;conv&quot;&lt;/span&gt; + &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;(countOfConvLayer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dimension.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// weights for fully connected layer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                wtArray = &lt;span class=&quot;type&quot;&gt;SwapAxes&lt;/span&gt;.for2dFlatArray(originalArray: wtArray, axis1: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, axis2: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, dimensionOfArray: &amp;amp;dimension)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                countOfFcLayer += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                partOfFileName = &lt;span class=&quot;string&quot;&gt;&quot;fc&quot;&lt;/span&gt; + &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;(countOfFcLayer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;fatalError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Dataset&#39;s dimension is neither 4 (convolution layer) nor 2 (fully connected layer)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wtData = &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt;(bytes: &amp;amp;wtArray, length: wtLength * &lt;span class=&quot;type&quot;&gt;MemoryLayout&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;&amp;gt;.size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; bsData = &lt;span class=&quot;type&quot;&gt;NSData&lt;/span&gt;(bytes: &amp;amp;bsArray, length: bsLength * &lt;span class=&quot;type&quot;&gt;MemoryLayout&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;&amp;gt;.size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 写入数据到文件...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Metal-Performance-Shaders&quot;&gt;&lt;a href=&quot;#Metal-Performance-Shaders&quot; class=&quot;headerlink&quot; title=&quot;Metal Performance Shaders&quot;&gt;&lt;/a&gt;Metal Performance Shaders&lt;/h2&gt;&lt;h3 id=&quot;MPS-简介&quot;&gt;&lt;a href=&quot;#MPS-简介&quot; class=&quot;headerlink&quot; title=&quot;MPS 简介&quot;&gt;&lt;/a&gt;MPS 简介&lt;/h3&gt;&lt;p&gt;Metal Performance Shaders 简称 MPS，可以为使用 Metal 技术的 App 提供底层高性能 GPU 运算接口。最初苹果提供的 Shader 语言本来是很底层很生涩的，后来为 iOS 提供了原生支持的 API，可以用 Swift 或 OC 来调用底层接口了。iOS 9 的 MPS 提供了图片特效处理和 Metal 纹理相关的 API，iOS 10 的 MPS 新增了有关 CNN 和矩阵乘法的 API。不过目前苹果只开放了 CNN 的预测功能，如果想要在 iOS 10 上训练一个 CNN，那就只能借助第三方工具了。&lt;/p&gt;
&lt;p&gt;苹果的 BNNS 同样提供了创建 CNN 的 API，而且也只能使用训练好的权重进行预测。但仅仅是对 CPU 进行了优化。因为 OpenGL 的限制，其性能与 Metal 相比并不占优势。OpenCL 在 iOS 上是私有框架。所以说目前看来，不考虑系统兼容性(iOS 10)和资源限制(arm64)，Metal 技术是发挥 GPU 运算优势的最好选择。&lt;/p&gt;
&lt;p&gt;MPS 系统原生支持不用担心安装包增量问题，并且使用 Metal 技术使用 GPU 加速运算，功耗发热少。MPS 目前的缺点是不支持网络的训练和必须 HardCode 网络结构，但面对复杂度较低的神经网络时还是很实用的。毕竟 TensorFlow 在 iOS 上只能用 CPU 计算，且编译费时费力，安装包增量巨大。&lt;/p&gt;
&lt;p&gt;MPS 在我的 iPhone 6s Plus 上性能很好，发热也少，可以通过神经网络实时预测出结果。这是 &lt;a href=&quot;https://github.com/shu223/iOS-10-Sampler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS-10-Sampler&lt;/a&gt; 项目的效果，它是在苹果官方 Demo &lt;a href=&quot;https://developer.apple.com/library/content/samplecode/MetalImageRecognition/Introduction/Intro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetalImageRecognition&lt;/a&gt; 基础上稍微改进拍摄功能的用户体验，MPS 的部分未做任何改动。我基于它和 &lt;a href=&quot;https://github.com/kazoo-kmt/MPSCNNfeeder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MPSCNNfeeder&lt;/a&gt; 实现了 &lt;a href=&quot;https://github.com/yulingtianxia/HandGestureCNN/tree/master/HandGestureCNN&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HandGestureCNN&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/shu223/iOS-10-Sampler/blob/master/README_resources/imagerecog.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;苹果给了一个 MPS 的 HelloWorld： &lt;a href=&quot;https://developer.apple.com/library/content/samplecode/MPSCNNHelloWorld/Introduction/Intro.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MPSCNNHelloWorld: Simple Digit Detection Convolution Neural Networks (CNN)&lt;/a&gt;，恰好对应着机器学习领域的 HelloWorld MNIST。可以通过查看这个 Demo 的源码来快速上手 MPS 的用法。&lt;/p&gt;
&lt;p&gt;其实总体来说并不是很复杂，但有几个重要的地方需要我们自己去解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据处理，也就是模型文件的数据格式需要自己去解析。不同深度学习框架导出的模型权重文件格式都不一样，会涉及到比较底层的位读写。这里有一定工作量。&lt;/li&gt;
&lt;li&gt;使用卷积神经网络预测模型的时候，会涉及到 padding，这部分需要自己计算。输出数据体在空间上的尺寸可以通过输入数据体尺寸（W），卷积层中神经元的感受野尺寸（F），步长（S）和零填充的数量（P）的函数来计算。输出数据体的空间尺寸为 (W-F +2P)/S+1。这里说的是某个维度，单指宽或长。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;MPSImage&lt;/code&gt; 是为了突破 &lt;code&gt;MTLTexture&lt;/code&gt; 最大维度为 4 （RGBA）的限制，搞了个 workaround，就是用多个切片模拟多维度。如果有 N 个维度，那么切片数量为 (N+3)/4。比如下图为 N = 9 的情况。所以涉及到数据对齐的事情，预测后的数据需要处理下。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://docs-assets.developer.apple.com/published/48ad0af3fd/b6d1d091-162c-418d-bc2e-0b6f3105c126.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;好在苹果提供的 Demo 里已经对于后两个问题有了可以参考的代码，第一个问题其实是个矩阵转换的操作。 TensorFlow 卷积核权重的顺序为 [kH kW iC oC]，而 MPS 接受的权重为 [oC kH kW iC] 形式。而我使用 Keras 的时候将 TensorFlow 作为后端，所以需要转换下权重格式。矩阵转换在 python 里很容易，还好我找到了 Swift 版本的实现：&lt;a href=&quot;https://github.com/kazoo-kmt/MPSCNNfeeder/blob/master/swapaxes.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SwapAxes&lt;/a&gt;，直接拿过来用了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 科普下，[oC kH kW iC] 是四维数组（矩阵） [outputChannels][kernelHeight][kernelWidth][inputChannels/groups] 的 shape。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用-MPS-构建网络并预测&quot;&gt;&lt;a href=&quot;#使用-MPS-构建网络并预测&quot; class=&quot;headerlink&quot; title=&quot;使用 MPS 构建网络并预测&quot;&gt;&lt;/a&gt;使用 MPS 构建网络并预测&lt;/h3&gt;&lt;p&gt;MPS 预测的执行流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取可用的 device&lt;/li&gt;
&lt;li&gt;从 &lt;code&gt;device&lt;/code&gt; 获取 &lt;code&gt;commandQueue&lt;/code&gt;，从 &lt;code&gt;commandQueue&lt;/code&gt; 获取 &lt;code&gt;commandBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;构建网络模型和输入数据的 &lt;code&gt;MSPImage&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;调用网络每层的 &lt;code&gt;encode&lt;/code&gt; 方法，输入为 &lt;code&gt;commandBuffer&lt;/code&gt; 和上一层网络输出的 &lt;code&gt;MSPImage&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;提交 &lt;code&gt;commandBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;等待输出结果，并处理成 one-hot 格式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;剩下的工作就是修改工程中的 &lt;code&gt;Inception3Net.swift&lt;/code&gt; 文件，使其网络结构与我们用 Keras 搭建的网络结构一样即可。前面提到过，&lt;code&gt;Flatten&lt;/code&gt; 和 &lt;code&gt;Dropout&lt;/code&gt; 没有权重，不改变数据。&lt;code&gt;Flatten&lt;/code&gt; 其实就是 &lt;code&gt;reshape&lt;/code&gt; 操作，在 MPS 中不需要特意做 &lt;code&gt;reshape&lt;/code&gt; 操作也没有 &lt;code&gt;Flatten&lt;/code&gt; 层，&lt;code&gt;MPSImage&lt;/code&gt; 被描述成什么 shape，数据就会被排列成那个 shape。&lt;code&gt;Dropout&lt;/code&gt; 层在训练的时候按一定几率丢弃结果，在预测模型的时候根本用不到。&lt;/p&gt;
&lt;p&gt;回顾下之前用 Keras 写的全连接层结构的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt; = Sequential()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Flatten(input_shape=train_data.shape[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Dense(&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;relu&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Dropout(&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;model&lt;/span&gt;.add(Dense(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, activation=&lt;span class=&quot;string&quot;&gt;&#39;softmax&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;转换成 MPS 的代码后差不多是这个样子（省略无关代码）：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let device = inputCommandQueue.device&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let relu = MPSCNNNeuronReLU(&lt;span class=&quot;string&quot;&gt;device:&lt;/span&gt; device!, &lt;span class=&quot;string&quot;&gt;a:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let softmax = MPSCNNSoftMax(&lt;span class=&quot;string&quot;&gt;device:&lt;/span&gt; device!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let sftid = MPSImageDescriptor(&lt;span class=&quot;string&quot;&gt;channelFormat:&lt;/span&gt; textureFormat, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  , &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;  , &lt;span class=&quot;string&quot;&gt;featureChannels:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// logits&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let fc0 = SlimMPSCNNFullyConnected(&lt;span class=&quot;string&quot;&gt;kernelWidth:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             kernelHeight:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             inputFeatureChannels:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             outputFeatureChannels:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             neuronFilter:&lt;/span&gt; relu,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             device:&lt;/span&gt; device,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             kernelParamsBinaryName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fc1&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let fc1 = SlimMPSCNNFullyConnected(&lt;span class=&quot;string&quot;&gt;kernelWidth:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             kernelHeight:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             inputFeatureChannels:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             outputFeatureChannels:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             neuronFilter:&lt;/span&gt; nil,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             device:&lt;/span&gt; device,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;                             kernelParamsBinaryName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;fc2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let image10 = ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let sftImage    = MPSImage(&lt;span class=&quot;string&quot;&gt;device:&lt;/span&gt; device!, &lt;span class=&quot;string&quot;&gt;imageDescriptor:&lt;/span&gt; sftid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// MPSImageDescriptor for final logits generating layers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let fc0id = MPSImageDescriptor(&lt;span class=&quot;string&quot;&gt;channelFormat:&lt;/span&gt; textureFormat, &lt;span class=&quot;string&quot;&gt;width:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;height:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;featureChannels:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var fc0Image, &lt;span class=&quot;string&quot;&gt;fc1Image :&lt;/span&gt; MPSTemporaryImage!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func logits_layer(&lt;span class=&quot;string&quot;&gt;commandBuffer:&lt;/span&gt; MTLCommandBuffer)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// These images are only needed in this layer and will not be read by the CPU or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// outside of the command bufer, so we can allocate them as MPSTemporaryImages and&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// save the CPU cost and memory size of allocating reserved storage for them.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// These objects can not be reused outside of the command buffer, which is why&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// we did not make them in the init(withDevice:commandQueue:) call.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// Temporary images are designed to be efficiently created as needed, used a few times&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// and thrown away almost immediately&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fc0Image     = MPSTemporaryImage(&lt;span class=&quot;string&quot;&gt;commandBuffer:&lt;/span&gt; commandBuffer, &lt;span class=&quot;string&quot;&gt;imageDescriptor:&lt;/span&gt; fc0id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fc1Image     = MPSTemporaryImage(&lt;span class=&quot;string&quot;&gt;commandBuffer:&lt;/span&gt; commandBuffer, &lt;span class=&quot;string&quot;&gt;imageDescriptor:&lt;/span&gt; sftid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// encode layers to metal commandBuffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fc0.encode    (&lt;span class=&quot;string&quot;&gt;commandBuffer:&lt;/span&gt; commandBuffer, &lt;span class=&quot;string&quot;&gt;sourceImage:&lt;/span&gt; image10, &lt;span class=&quot;string&quot;&gt;destinationImage:&lt;/span&gt; fc0Image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   fc1.encode    (&lt;span class=&quot;string&quot;&gt;commandBuffer:&lt;/span&gt; commandBuffer, &lt;span class=&quot;string&quot;&gt;sourceImage:&lt;/span&gt; fc0Image, &lt;span class=&quot;string&quot;&gt;destinationImage:&lt;/span&gt; fc1Image)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   softmax.encode(&lt;span class=&quot;string&quot;&gt;commandBuffer:&lt;/span&gt; commandBuffer, &lt;span class=&quot;string&quot;&gt;sourceImage:&lt;/span&gt; fc1Image, &lt;span class=&quot;string&quot;&gt;destinationImage:&lt;/span&gt; sftImage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;这是一篇行外人看不懂，行内人觉得水，我自己觉得收获满满的实践笔记。并没有花大量篇幅总结Machine Learning 的基础知识，也没有逐个讲述框架 API 的使用，更没有列一堆公式和数学定义。。。因为这种知识体系大而全的文章，网上不胜枚举，而且肯定比我总结的好。本着一个小白去探索世界的心态，把自己从理论学习到训练模型再到 iOS 上的预测的实践流程记录下来。很多枯燥耗时的学习 ML、TF 和配置环境的过程都省略掉了。&lt;/p&gt;
&lt;p&gt;最后建议如果有条件的话，还是用配置较高的集群或者云服务来训练模型，节省程序员宝贵的时间。如果不能做到自己提出创新有效的网络模型，其实深度学习的大量工作就是调参、采集数据、看别人论文如何改参数和网络结构，然后等待机器训练结果。。。反复循环。。。&lt;/p&gt;
&lt;p&gt;神经网络不是真的模拟出人脑的生物特征，CNN 跟人眼扫视世界或人脑辨别物体其实差很多，深度学习只是尽力让机器拟合出想要的结果罢了，离真正的人工智能还差远了。所以不要被铺天盖地的吹嘘洗脑了，一个 AlphaGo 就能又让一大堆所谓的科技媒体高潮出机器快要统治人类了，不要老想搞个大新闻！&lt;/p&gt;
&lt;p&gt;深度学习发展很快，要学习的内容还有很多。学习得越多，就发现自己越是无知，以至于怀疑自己的智商和精力了。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/machine-learning/home&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Coursera Machine Learning&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.tensorflow.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TensorFlow&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://keras-cn.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keras 中文文档&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://keras.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Keras Documentation&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://image-net.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ImageNet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.kaggle.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;kaggle&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cs231n.stanford.edu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CS231n: Convolutional Neural Networks for Visual Recognition&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://cs231n.github.io/convolutional-networks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Convolutional Neural Networks (CNNs / ConvNets)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://machinethink.net/blog/convolutional-neural-networks-on-the-iphone-with-vggnet/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Convolutional neural networks on the iPhone with VGGNet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building powerful image classification models using very little data&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.hdfgroup.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HDF Group&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/reference/metalperformanceshaders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MetalPerformanceShaders&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://developer.apple.com/reference/accelerate/bnns&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BNNS&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/aleph7/HDF5Kit&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HDF5Kit&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/shu223/iOS-10-Sampler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS-10-Sampler&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/kazoo-kmt/MPSCNNfeeder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MPSCNNfeeder&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近一个月从零开始自学了下有关 iOS 上的机器学习相关知识，亲身实践了从数据采集到训练模型再到移动端预测的流程。理论知识学习路径为：&lt;strong&gt;机器学习-&amp;gt;深度学习-&amp;gt;迁移学习&lt;/strong&gt;；实践框架学习路径为：&lt;strong&gt;TensorFlow-&amp;gt;Keras-&amp;gt;MPS(iOS 10)&lt;/strong&gt;。最终完成一个简单的手势图像五分类问题，并预测 iOS 摄像头采集的图片。最终结果，训练集准确率 96.26%，交叉验证集准确率 73.86%。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
      <category term="Machine Leaning" scheme="http://yulingtianxia.com/tags/Machine-Leaning/"/>
    
      <category term="Metal" scheme="http://yulingtianxia.com/tags/Metal/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C Method Swizzling</title>
    <link href="http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/"/>
    <id>http://yulingtianxia.com/blog/2017/04/17/Objective-C-Method-Swizzling/</id>
    <published>2017-04-16T16:11:48.000Z</published>
    <updated>2017-04-16T16:15:35.000Z</updated>
    
    <content type="html">&lt;p&gt;Objective-C 中的 Hook 又被称作 Method Swizzling，这是动态语言大都具有的特性。在 Objective-C 中经常会把 Hook 的逻辑写在 &lt;code&gt;+ load&lt;/code&gt; 方法中，这是利用它调用时机较提前等性质。&lt;/p&gt;
&lt;p&gt;有时候需要 Hook 子类和父类的同一个方法，但是它们的 &lt;code&gt;+ load&lt;/code&gt; 方法调用顺序不同。一个常见的顺序可能是：父类-&amp;gt;子类-&amp;gt;子类类别-&amp;gt;父类类别。所以 Hook 的顺序并不能保证，就不能保证 Hook 后方法调用的顺序是对的。而且使用不同方法 Method Swizzling 也会带来不同的结果。本文将会对这些情况下的 Hook 结果进行分析和总结。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Method-Swizzling-常用实现方案&quot;&gt;&lt;a href=&quot;#Method-Swizzling-常用实现方案&quot; class=&quot;headerlink&quot; title=&quot;Method Swizzling 常用实现方案&quot;&gt;&lt;/a&gt;Method Swizzling 常用实现方案&lt;/h2&gt;&lt;p&gt;目前有两类常用的 Method Swizzling 实现方案，诸如 &lt;a href=&quot;https://github.com/rabovik/RSSwizzle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RSSwizzle&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/rentzsch/jrswizzle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jrswizzle&lt;/a&gt; 这种较为复杂且周全的一些实现方案这里暂且不提。&lt;/p&gt;
&lt;h3 id=&quot;方案-A&quot;&gt;&lt;a href=&quot;#方案-A&quot; class=&quot;headerlink&quot; title=&quot;方案 A&quot;&gt;&lt;/a&gt;方案 A&lt;/h3&gt;&lt;p&gt;如果类中没有实现 Original &lt;code&gt;selector&lt;/code&gt; 对应的方法，那就先添加 &lt;code&gt;Method&lt;/code&gt;，并将其 &lt;code&gt;IMP&lt;/code&gt; 映射为 Swizzle 的实现。然后替换 Swizzle &lt;code&gt;selector&lt;/code&gt; 的 &lt;code&gt;IMP&lt;/code&gt; 为 Original 的实现；否则交换二者 &lt;code&gt;IMP&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (void)load&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static &lt;span class=&quot;keyword&quot;&gt;dispatch_once_t &lt;/span&gt;onceToken&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dispatch_once(&amp;amp;onceToken, &lt;/span&gt;^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class aClass = [self class]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SEL &lt;span class=&quot;keyword&quot;&gt;originalSelector &lt;/span&gt;= @selector(method_original:)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SEL &lt;span class=&quot;keyword&quot;&gt;swizzledSelector &lt;/span&gt;= @selector(method_swizzle:)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method &lt;span class=&quot;keyword&quot;&gt;originalMethod &lt;/span&gt;= class_getInstanceMethod(aClass, &lt;span class=&quot;keyword&quot;&gt;originalSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        Method &lt;span class=&quot;keyword&quot;&gt;swizzledMethod &lt;/span&gt;= class_getInstanceMethod(aClass, &lt;span class=&quot;keyword&quot;&gt;swizzledSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;BOOL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;didAddMethod &lt;/span&gt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        class_addMethod(aClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;originalSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                        method_getImplementation(&lt;span class=&quot;keyword&quot;&gt;swizzledMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                        method_getTypeEncoding(&lt;span class=&quot;keyword&quot;&gt;swizzledMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (&lt;span class=&quot;keyword&quot;&gt;didAddMethod) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            class_replaceMethod(aClass,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                               &lt;span class=&quot;keyword&quot;&gt;swizzledSelector,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                                               method_getImplementation(&lt;span class=&quot;keyword&quot;&gt;originalMethod),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;                                               method_getTypeEncoding(&lt;span class=&quot;keyword&quot;&gt;originalMethod));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method_exchangeImplementations(&lt;span class=&quot;keyword&quot;&gt;originalMethod, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有时为了避免方法命名冲突和参数 &lt;code&gt;_cmd&lt;/code&gt; 被篡改，也会使用下面这种『静态方法版本』的 Method Swizzle。CaptainHook 中的宏定义也是采用这种方式，比较推荐：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; IMP *I&lt;span class=&quot;built_in&quot;&gt;MPPointer&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MethodSwizzle(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*MethodOriginal)(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MethodSwizzle(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; arg1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do custom work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MethodOriginal(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, _cmd, arg1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; class_swizzleMethodAndStore(Class class, SEL original, IMP replacement, I&lt;span class=&quot;built_in&quot;&gt;MPPointer&lt;/span&gt; store) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method method = class_getInstanceMethod(class, original);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (method) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *type = method_getTypeEncoding(method);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        imp = class_replaceMethod(class, original, replacement, type);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!imp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            imp = method_getImplementation(method);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (imp &amp;amp;&amp;amp; store) &amp;#123; *store = imp; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (imp != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)swizzle:(SEL)original with:(IMP)replacement store:(I&lt;span class=&quot;built_in&quot;&gt;MPPointer&lt;/span&gt;)store &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; class_swizzleMethodAndStore(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, original, replacement, store);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; swizzle:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(originalMethod:) with:(IMP)MethodSwizzle store:(IMP *)&amp;amp;MethodOriginal];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而上面的代码依然不是 Method Swizzling 的最佳实现。&lt;/p&gt;
&lt;h3 id=&quot;方案-B&quot;&gt;&lt;a href=&quot;#方案-B&quot; class=&quot;headerlink&quot; title=&quot;方案 B&quot;&gt;&lt;/a&gt;方案 B&lt;/h3&gt;&lt;p&gt;其实就是方案 A 的阉割版：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (void)load&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static &lt;span class=&quot;keyword&quot;&gt;dispatch_once_t &lt;/span&gt;onceToken&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;dispatch_once(&amp;amp;onceToken, &lt;/span&gt;^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Class aClass = [self class]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SEL &lt;span class=&quot;keyword&quot;&gt;originalSelector &lt;/span&gt;= @selector(method_original:)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SEL &lt;span class=&quot;keyword&quot;&gt;swizzledSelector &lt;/span&gt;= @selector(method_swizzle:)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Method &lt;span class=&quot;keyword&quot;&gt;originalMethod &lt;/span&gt;= class_getInstanceMethod(aClass, &lt;span class=&quot;keyword&quot;&gt;originalSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        Method &lt;span class=&quot;keyword&quot;&gt;swizzledMethod &lt;/span&gt;= class_getInstanceMethod(aClass, &lt;span class=&quot;keyword&quot;&gt;swizzledSelector);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;       method_exchangeImplementations(&lt;span class=&quot;keyword&quot;&gt;originalMethod, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;swizzledMethod);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;直接交换 &lt;code&gt;IMP&lt;/code&gt; 是很危险的。因为如果这个类中没有实现这个方法，&lt;code&gt;class_getInstanceMethod()&lt;/code&gt; 返回的是某个父类的 &lt;code&gt;Method&lt;/code&gt; 对象，这样 &lt;code&gt;method_exchangeImplementations()&lt;/code&gt; 就把父类的原始实现（&lt;code&gt;IMP&lt;/code&gt;）跟这个类的 Swizzle 实现交换了。这样其他父类及其其他子类的方法调用就会出问题，最严重的就是 Crash。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但如果这个类中实现了此方法，那么方案 A 等价于方案 B&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;研究背景&quot;&gt;&lt;a href=&quot;#研究背景&quot; class=&quot;headerlink&quot; title=&quot;研究背景&quot;&gt;&lt;/a&gt;研究背景&lt;/h2&gt;&lt;p&gt;这里对本文的研究背景进行一些假设和约定：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有三个类，Child 类继承 Super 类，Super 类继承 Base 类。&lt;/li&gt;
&lt;li&gt;我们 Hook 了 Child 和 Super 的某个方法（而且是同一个方法）。&lt;/li&gt;
&lt;li&gt;为了方便表示，Child 的原始方法被称作 &lt;code&gt;Child_Original&lt;/code&gt;，Hook 后的方法被称作 &lt;code&gt;Child_Swizzle&lt;/code&gt;。Super 以此类推。&lt;/li&gt;
&lt;li&gt;为了让 Swizzle 的实现调用 Original 实现，&lt;code&gt;Child_Swizzle&lt;/code&gt; 的  IMP 中会调用 &lt;code&gt;Child_Swizzle&lt;/code&gt; 的 &lt;code&gt;selector&lt;/code&gt;。Super 以此类推。&lt;/li&gt;
&lt;li&gt;我们期望执行 Child 对象的 &lt;code&gt;Child_Original&lt;/code&gt; 方法时的 IMP 执行顺序是：&lt;code&gt;Child_Swizzle&lt;/code&gt;-&amp;gt;&lt;code&gt;Child_Original&lt;/code&gt;-&amp;gt;&lt;code&gt;Super_Swizzle&lt;/code&gt;-&amp;gt;&lt;code&gt;Super_Original&lt;/code&gt;-&amp;gt;&lt;code&gt;Base&lt;/code&gt;。我们只需关注其中 Swizzle 的部分，所以约定简写为：Child-&amp;gt;Super-&amp;gt;Base。&lt;/li&gt;
&lt;li&gt;本文会按 Hook 顺序、类是否实现方法、Hook 方案(A/B) 来细分不同情况下的结果。一共细分为 18 种情况。&lt;/li&gt;
&lt;li&gt;本文会使用图例表示每种情况下的方法调用和映射关系，分为三个维度（Super/Child;Original/Swizzle;&lt;code&gt;Selector&lt;/code&gt;/&lt;code&gt;Method&lt;/code&gt;/&lt;code&gt;IMP&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/模板.png&quot; alt=&quot;模板&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下文中的图例均为 Hook 后的结果(Hook 前的太简单了懒得画)。如果不理解 &lt;code&gt;Selector&lt;/code&gt;,&lt;code&gt;Method&lt;/code&gt; 与 &lt;code&gt;IMP&lt;/code&gt; 三者的关系，甚至不理解 Method Swizzling 原理，请先阅读 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt;！如果还是看不懂，那就再看一遍吧！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hook-顺序：先-Child-后-Super&quot;&gt;&lt;a href=&quot;#Hook-顺序：先-Child-后-Super&quot; class=&quot;headerlink&quot; title=&quot;Hook 顺序：先 Child 后 Super&quot;&gt;&lt;/a&gt;Hook 顺序：先 Child 后 Super&lt;/h2&gt;&lt;p&gt;这个顺序本身就不被大众认可却又不得不广泛被使用，因为很多想 Hook 系统 API 只能从 Category 下手。当子类同样的方法也被 Hook 后，奇怪的事情便发生了。&lt;/p&gt;
&lt;h3 id=&quot;Super-未实现方法-Child-未实现方法&quot;&gt;&lt;a href=&quot;#Super-未实现方法-Child-未实现方法&quot; class=&quot;headerlink&quot; title=&quot;Super 未实现方法,Child 未实现方法&quot;&gt;&lt;/a&gt;Super 未实现方法,Child 未实现方法&lt;/h3&gt;&lt;h4 id=&quot;Super-Plan-A-Child-Plan-A&quot;&gt;&lt;a href=&quot;#Super-Plan-A-Child-Plan-A&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan A,Child:Plan A&quot;&gt;&lt;/a&gt;Super:Plan A,Child:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_SuperAChildA.png&quot; alt=&quot;CS_SuperAChildA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象：Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-B-Child-Plan-A&quot;&gt;&lt;a href=&quot;#Super-Plan-B-Child-Plan-A&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan B,Child:Plan A&quot;&gt;&lt;/a&gt;Super:Plan B,Child:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_SuperBChildA.png&quot; alt=&quot;CS_SuperBChildA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象：Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Super 对象正常&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常，此情况亦等同于：在子类类别中 Hook 了子类未实现而父类实现了的方法。（Super 是 Base 的子类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-A-Child-Plan-B&quot;&gt;&lt;a href=&quot;#Super-Plan-A-Child-Plan-B&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan A,Child Plan B&quot;&gt;&lt;/a&gt;Super:Plan A,Child Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_SuperAChildB.png&quot; alt=&quot;CS_SuperAChildB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象：Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Super 对象：如果 Super_Swizzle 与 Child_Swizzle 的 &lt;code&gt;selector&lt;/code&gt; 不同，则会产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常；如果两个 &lt;code&gt;selector&lt;/code&gt; 相同则会一直调用 Child_Swizzle 进入死循环&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常，此情况亦间接等同于：在子类类别中 Hook 了子类未实现而父类实现了的方法。（Super 是 Base 的子类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-B-Child-Plan-B&quot;&gt;&lt;a href=&quot;#Super-Plan-B-Child-Plan-B&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan B,Child Plan B&quot;&gt;&lt;/a&gt;Super:Plan B,Child Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_SuperBChildB.png&quot; alt=&quot;CS_SuperBChildB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象：Super-&amp;gt;Child-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象：如果 Super_Swizzle 与 Child_Swizzle 的 &lt;code&gt;selector&lt;/code&gt; 不同，则会产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常；如果两个 &lt;code&gt;selector&lt;/code&gt; 相同则会一直调用 Child_Swizzle 进入死循环&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Super-实现方法-Child-未实现方法&quot;&gt;&lt;a href=&quot;#Super-实现方法-Child-未实现方法&quot; class=&quot;headerlink&quot; title=&quot;Super 实现方法,Child 未实现方法&quot;&gt;&lt;/a&gt;Super 实现方法,Child 未实现方法&lt;/h3&gt;&lt;p&gt;由于 Super 类被 Hook 的方法已经被实现，所以只需区分 Child 的 Hook 方案。&lt;/p&gt;
&lt;h4 id=&quot;Child-Plan-A&quot;&gt;&lt;a href=&quot;#Child-Plan-A&quot; class=&quot;headerlink&quot; title=&quot;Child:Plan A&quot;&gt;&lt;/a&gt;Child:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_ChildA.png&quot; alt=&quot;CS_ChildA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象：Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Child-Plan-B&quot;&gt;&lt;a href=&quot;#Child-Plan-B&quot; class=&quot;headerlink&quot; title=&quot;Child:Plan B&quot;&gt;&lt;/a&gt;Child:Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_ChildB.png&quot; alt=&quot;CS_ChildB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象：Super-&amp;gt;Child-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象：如果 Super_Swizzle 与 Child_Swizzle 的 &lt;code&gt;selector&lt;/code&gt; 不同，则会产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常；如果两个 &lt;code&gt;selector&lt;/code&gt; 相同则会一直调用 Child_Swizzle 进入死循环&lt;/li&gt;
&lt;li&gt;Base 对象正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Super-未实现方法-Child-实现方法&quot;&gt;&lt;a href=&quot;#Super-未实现方法-Child-实现方法&quot; class=&quot;headerlink&quot; title=&quot;Super 未实现方法,Child 实现方法&quot;&gt;&lt;/a&gt;Super 未实现方法,Child 实现方法&lt;/h3&gt;&lt;p&gt;由于 Child 类被 Hook 的方法已经被实现，所以只需区分 Super 的 Hook 方案。&lt;/p&gt;
&lt;h4 id=&quot;Super-Plan-A&quot;&gt;&lt;a href=&quot;#Super-Plan-A&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan A&quot;&gt;&lt;/a&gt;Super:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_SuperA.png&quot; alt=&quot;CS_SuperA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果（一切正常）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-B&quot;&gt;&lt;a href=&quot;#Super-Plan-B&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan B&quot;&gt;&lt;/a&gt;Super:Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_SuperB.png&quot; alt=&quot;CS_SuperB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象正常：Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常，此情况亦等同于：在子类类别中 Hook 了子类未实现而父类实现了的方法。（Super 是 Base 的子类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Super-实现方法-Child-实现方法&quot;&gt;&lt;a href=&quot;#Super-实现方法-Child-实现方法&quot; class=&quot;headerlink&quot; title=&quot;Super 实现方法,Child 实现方法&quot;&gt;&lt;/a&gt;Super 实现方法,Child 实现方法&lt;/h3&gt;&lt;p&gt;相当于 Super 和 Child 都使用方案 B 进行 Hook，所以只有一种情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/CS_Perfect.png&quot; alt=&quot;CS_Perfect&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果（一切正常）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Hook-顺序：先-Super-后-Child&quot;&gt;&lt;a href=&quot;#Hook-顺序：先-Super-后-Child&quot; class=&quot;headerlink&quot; title=&quot;Hook 顺序：先 Super 后 Child&quot;&gt;&lt;/a&gt;Hook 顺序：先 Super 后 Child&lt;/h2&gt;&lt;p&gt;并不是 Hook 顺序对了就能保平安，姿势也同样重要。&lt;/p&gt;
&lt;h3 id=&quot;Super-未实现方法-Child-未实现方法-1&quot;&gt;&lt;a href=&quot;#Super-未实现方法-Child-未实现方法-1&quot; class=&quot;headerlink&quot; title=&quot;Super 未实现方法,Child 未实现方法&quot;&gt;&lt;/a&gt;Super 未实现方法,Child 未实现方法&lt;/h3&gt;&lt;h4 id=&quot;Super-Plan-A-Child-Plan-A-1&quot;&gt;&lt;a href=&quot;#Super-Plan-A-Child-Plan-A-1&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan A,Child:Plan A&quot;&gt;&lt;/a&gt;Super:Plan A,Child:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_SuperAChildA.png&quot; alt=&quot;SC_SuperAChildA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果（一切正常）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-B-Child-Plan-A-1&quot;&gt;&lt;a href=&quot;#Super-Plan-B-Child-Plan-A-1&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan B,Child:Plan A&quot;&gt;&lt;/a&gt;Super:Plan B,Child:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_SuperBChildA.png&quot; alt=&quot;SC_SuperBChildA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象正常：Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常，此情况亦等同于：在子类类别中 Hook 了子类未实现而父类实现了的方法。（Super 是 Base 的子类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-A-Child-Plan-B-1&quot;&gt;&lt;a href=&quot;#Super-Plan-A-Child-Plan-B-1&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan A,Child Plan B&quot;&gt;&lt;/a&gt;Super:Plan A,Child Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_SuperAChildB.png&quot; alt=&quot;SC_SuperAChildB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象：如果 Super_Swizzle 与 Child_Swizzle 的 &lt;code&gt;selector&lt;/code&gt; 不同，则会产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常；如果两个 &lt;code&gt;selector&lt;/code&gt; 相同则 Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Base 对象正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-B-Child-Plan-B-1&quot;&gt;&lt;a href=&quot;#Super-Plan-B-Child-Plan-B-1&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan B,Child Plan B&quot;&gt;&lt;/a&gt;Super:Plan B,Child Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_SuperBChildB.png&quot; alt=&quot;SC_SuperBChildB&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象：如果 Super_Swizzle 与 Child_Swizzle 的 &lt;code&gt;selector&lt;/code&gt; 不同，则会产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常；如果两个 &lt;code&gt;selector&lt;/code&gt; 相同则 Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Super-实现方法-Child-未实现方法-1&quot;&gt;&lt;a href=&quot;#Super-实现方法-Child-未实现方法-1&quot; class=&quot;headerlink&quot; title=&quot;Super 实现方法,Child 未实现方法&quot;&gt;&lt;/a&gt;Super 实现方法,Child 未实现方法&lt;/h3&gt;&lt;p&gt;由于 Super 类被 Hook 的方法已经被实现，所以只需区分 Child 的 Hook 方案。&lt;/p&gt;
&lt;h4 id=&quot;Child-Plan-A-1&quot;&gt;&lt;a href=&quot;#Child-Plan-A-1&quot; class=&quot;headerlink&quot; title=&quot;Child:Plan A&quot;&gt;&lt;/a&gt;Child:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_ChildA.png&quot; alt=&quot;SC_ChildA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果（一切正常）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Child-Plan-B-1&quot;&gt;&lt;a href=&quot;#Child-Plan-B-1&quot; class=&quot;headerlink&quot; title=&quot;Child:Plan B&quot;&gt;&lt;/a&gt;Child:Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_ChildB.png&quot; alt=&quot;SC_ChildB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象：如果 Super_Swizzle 与 Child_Swizzle 的 &lt;code&gt;selector&lt;/code&gt; 不同，则会产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常；如果两个 &lt;code&gt;selector&lt;/code&gt; 相同则 Child-&amp;gt;Base (Super 被忽略)&lt;/li&gt;
&lt;li&gt;Base 对象正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Super-未实现方法-Child-实现方法-1&quot;&gt;&lt;a href=&quot;#Super-未实现方法-Child-实现方法-1&quot; class=&quot;headerlink&quot; title=&quot;Super 未实现方法,Child 实现方法&quot;&gt;&lt;/a&gt;Super 未实现方法,Child 实现方法&lt;/h3&gt;&lt;p&gt;由于 Child 类被 Hook 的方法已经被实现，所以只需区分 Super 的 Hook 方案。&lt;/p&gt;
&lt;h4 id=&quot;Super-Plan-A-1&quot;&gt;&lt;a href=&quot;#Super-Plan-A-1&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan A&quot;&gt;&lt;/a&gt;Super:Plan A&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_SuperA.png&quot; alt=&quot;SC_SuperA&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果（一切正常）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Super-Plan-B-1&quot;&gt;&lt;a href=&quot;#Super-Plan-B-1&quot; class=&quot;headerlink&quot; title=&quot;Super:Plan B&quot;&gt;&lt;/a&gt;Super:Plan B&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_SuperB.png&quot; alt=&quot;SC_SuperB&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 对象正常：Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Base 对象产生 &lt;code&gt;unrecognized selector&lt;/code&gt; 异常，此情况亦等同于：在子类类别中 Hook 了子类未实现而父类实现了的方法。（Super 是 Base 的子类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Super-实现方法-Child-实现方法-1&quot;&gt;&lt;a href=&quot;#Super-实现方法-Child-实现方法-1&quot; class=&quot;headerlink&quot; title=&quot;Super 实现方法,Child 实现方法&quot;&gt;&lt;/a&gt;Super 实现方法,Child 实现方法&lt;/h3&gt;&lt;p&gt;相当于 Super 和 Child 都使用方案 B 进行 Hook，所以只有一种情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MethodSwizzling/SC_Perfect.png&quot; alt=&quot;SC_Perfect&quot;&gt;&lt;/p&gt;
&lt;p&gt;方法执行结果（一切正常）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 对象正常：Child-&amp;gt;Super-&amp;gt;Base&lt;/li&gt;
&lt;li&gt;Super 和 Base 对象均正常&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;h3 id=&quot;Hook-顺序：先-Child-类后-Super-类&quot;&gt;&lt;a href=&quot;#Hook-顺序：先-Child-类后-Super-类&quot; class=&quot;headerlink&quot; title=&quot;Hook 顺序：先 Child 类后 Super 类&quot;&gt;&lt;/a&gt;Hook 顺序：先 Child 类后 Super 类&lt;/h3&gt;&lt;p&gt;为了保证 Hook 后方法调用顺序是对的，需要同时满足以下两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Child 类实现被 Hook 的方法&lt;/li&gt;
&lt;li&gt;Super 类实现被 Hook 的方法或使用 A 方案 Hook&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Hook-顺序：先-Super-类后-Child-类&quot;&gt;&lt;a href=&quot;#Hook-顺序：先-Super-类后-Child-类&quot; class=&quot;headerlink&quot; title=&quot;Hook 顺序：先 Super 类后 Child 类&quot;&gt;&lt;/a&gt;Hook 顺序：先 Super 类后 Child 类&lt;/h3&gt;&lt;p&gt;因为 Hook 的顺序是正确的，所以只需满足以下任意一个条件即可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;实现被 Hook 的方法&lt;/li&gt;
&lt;li&gt;使用方案 A 进行 Hook&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Objective-C-Method-Swizzling-最佳实践&quot;&gt;&lt;a href=&quot;#Objective-C-Method-Swizzling-最佳实践&quot; class=&quot;headerlink&quot; title=&quot;Objective-C Method Swizzling 最佳实践&quot;&gt;&lt;/a&gt;Objective-C Method Swizzling 最佳实践&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Hook 顺序并不能保证结果一定正确，但先 Super 后 Child 效果更佳&lt;/li&gt;
&lt;li&gt;方案 A 明显优于方案 B&lt;/li&gt;
&lt;li&gt;方案 A 中的『静态方法版本』固然更缜密，但操作复杂。为了提升开发效率，建议参考 CaptainHook 的宏定义实现。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rabovik/RSSwizzle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RSSwizzle&lt;/a&gt; 被很多人推荐，它用很复杂的方式解决了 &lt;a href=&quot;http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the Dangers of Method Swizzling in Objective C?&lt;/a&gt; 中提到的一系列问题。不过引入它还是有一些成本的，建议在本文列举的那些极端特殊情况下才使用它，毕竟方案 A 已经能 Cover 到大部分情况了。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rentzsch/jrswizzle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jrswizzle&lt;/a&gt; 尝试解决在不同平台和系统版本上的 Method Swizzling 与类继承关系的冲突。对各平台低版本系统兼容性较强。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我觉得最适合项目的方案才是最佳实践。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5339276/what-are-the-dangers-of-method-swizzling-in-objective-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;What are the Dangers of Method Swizzling in Objective C?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Objective-C 中的 Hook 又被称作 Method Swizzling，这是动态语言大都具有的特性。在 Objective-C 中经常会把 Hook 的逻辑写在 &lt;code&gt;+ load&lt;/code&gt; 方法中，这是利用它调用时机较提前等性质。&lt;/p&gt;
&lt;p&gt;有时候需要 Hook 子类和父类的同一个方法，但是它们的 &lt;code&gt;+ load&lt;/code&gt; 方法调用顺序不同。一个常见的顺序可能是：父类-&amp;gt;子类-&amp;gt;子类类别-&amp;gt;父类类别。所以 Hook 的顺序并不能保证，就不能保证 Hook 后方法调用的顺序是对的。而且使用不同方法 Method Swizzling 也会带来不同的结果。本文将会对这些情况下的 Hook 结果进行分析和总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>如何在逆向工程中 Hook 得更准 - 微信屏蔽好友&amp;群消息实战</title>
    <link href="http://yulingtianxia.com/blog/2017/03/06/How-to-hook-the-correct-method-in-reverse-engineering/"/>
    <id>http://yulingtianxia.com/blog/2017/03/06/How-to-hook-the-correct-method-in-reverse-engineering/</id>
    <published>2017-03-05T16:06:51.000Z</published>
    <updated>2017-03-23T04:58:56.000Z</updated>
    
    <content type="html">&lt;p&gt;在逆向工程中往往需要针对想要做的功能 Hook 到相应的方法和属性，小白面对 &lt;code&gt;class-dump&lt;/code&gt; 后的大量头文件表示只能靠『猜』。这里我分享下逆向微信实现屏蔽群消息和好友消息的实战经验，适用于&lt;strong&gt;非越狱机&lt;/strong&gt;，项目 GitHub 地址: &lt;a href=&quot;https://github.com/yulingtianxia/FishChat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FishChat&lt;/a&gt;。为了能读懂此文，建议先阅读我的上一篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2017/02/28/Make-WeChat-Great-Again/&quot;&gt;Make WeChat Great Again&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;从-UI-猜&quot;&gt;&lt;a href=&quot;#从-UI-猜&quot; class=&quot;headerlink&quot; title=&quot;从 UI 猜&quot;&gt;&lt;/a&gt;从 UI 猜&lt;/h2&gt;&lt;p&gt;先用 &lt;code&gt;Cycript&lt;/code&gt; 或 Reveal 获取视图层级信息，然后从 &lt;code&gt;View&lt;/code&gt; 和 &lt;code&gt;ViewController&lt;/code&gt; 的头文件中寻找信息。然后就凭编程经验去猜了，比如一些方法属性的命名，一些常用的代码设计等等套路。&lt;/p&gt;
&lt;p&gt;比如现在我想在群信息页面和个人聊天详情页面增加个屏蔽消息的开关，先找到对应的 &lt;code&gt;ViewController&lt;/code&gt; 类，然后到头文件中去找信息。因为这都是两个列表 UI，这种信息页面的列表 Cell 一般不需要重用的，直接数据配置即可。然后很容易发现这两个 &lt;code&gt;ViewController&lt;/code&gt; 都有 &lt;code&gt;m_tableViewInfo&lt;/code&gt; 这个属性，类型为 &lt;code&gt;MMTableViewInfo&lt;/code&gt;。接着顺藤摸瓜，发现其与 &lt;code&gt;MMTableViewSectionInfo&lt;/code&gt; 和 &lt;code&gt;MMTableViewCellInfo&lt;/code&gt; 这两个类构成了整个列表的数据。Table-Section-Cell 这三个层级的的数据对应着 UI，熟悉 iOS 的很容易看懂。进而使用这三个类的方法来修改 &lt;code&gt;m_tableViewInfo&lt;/code&gt; 中的数据，实现修改 UI 的目的。因为是列表数据，凭经验应该是 &lt;code&gt;reloadData&lt;/code&gt; 的时候去做修改。恰好这两个 &lt;code&gt;ViewController&lt;/code&gt; 中都有 &lt;code&gt;reloadTableData&lt;/code&gt; 方法，Hook 后果然生效，效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/weichat_ignore_chatroom.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/wechat_ignore_somone.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;逆向的时候需要处处为对方着想，换位思考。如果仅想着 Hook 系统的 API 来修改 UI，在这个例子里显然要多走些弯路。&lt;/p&gt;
&lt;p&gt;剩下的就是获取好友 ID 和群 ID，用一个字典存储是否屏蔽的标记，在操作开关的时候对字典赋值。这些功能也能够通过分析 UI 逆向实现。&lt;/p&gt;
&lt;h2 id=&quot;关联相关类一起猜&quot;&gt;&lt;a href=&quot;#关联相关类一起猜&quot; class=&quot;headerlink&quot; title=&quot;关联相关类一起猜&quot;&gt;&lt;/a&gt;关联相关类一起猜&lt;/h2&gt;&lt;p&gt;在我之前写的 &lt;a href=&quot;http://yulingtianxia.com/blog/2017/02/28/Make-WeChat-Great-Again/&quot;&gt;Make WeChat Great Again&lt;/a&gt; 里有提到 &lt;code&gt;CMessageMgr&lt;/code&gt; 这个类，它是个管理消息的单例，而消息被包装成 &lt;code&gt;CMessageWrap&lt;/code&gt; 对象来传递。在 &lt;code&gt;CMessageMgr&lt;/code&gt; 中搜索 getmsg 会发现有好几个方法。因为 &lt;code&gt;CMessageWrap&lt;/code&gt; 中包含 &lt;code&gt;m_uiMesLocalID&lt;/code&gt; 和 &lt;code&gt;m_n64MesSvrID&lt;/code&gt; 属性，所以锁定目标为 &lt;code&gt;- (id)GetMsg:n64SvrID:&lt;/code&gt; 和 &lt;code&gt;- (id)GetMsg:LocalID:&lt;/code&gt;，经过验证后发现获取消息时调用的是后者。PS：进入聊天窗口时其实还调用了 &lt;code&gt;- (id)GetMsgByCreateTime:FromID:FromCreateTime:Limit:LeftCount:FromSequence:&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;不过，Hook &lt;code&gt;- (id)GetMsg:LocalID:&lt;/code&gt; 之后发现即便不调用原始方法的实现，直接返回 &lt;code&gt;nil&lt;/code&gt;，也依然不能屏蔽消息。这时需要找到调用它的上层方法，然后继续寻找真正处理消息的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;逆向工程绝不仅仅靠猜&quot;&gt;&lt;a href=&quot;#逆向工程绝不仅仅靠猜&quot; class=&quot;headerlink&quot; title=&quot;逆向工程绝不仅仅靠猜&quot;&gt;&lt;/a&gt;逆向工程绝不仅仅靠猜&lt;/h2&gt;&lt;p&gt;初步思路是获取到方法的调用栈，然后查找上一层的方法，并将方法调用的地址换算成 Hopper 反汇编后的地址，这样就能获取到方法名了，然后进行 Hook。&lt;/p&gt;
&lt;h3 id=&quot;获取方法的-IMP&quot;&gt;&lt;a href=&quot;#获取方法的-IMP&quot; class=&quot;headerlink&quot; title=&quot;获取方法的 IMP&quot;&gt;&lt;/a&gt;获取方法的 IMP&lt;/h3&gt;&lt;p&gt;如果是越狱手机，直接 ssh 到手机执行 &lt;code&gt;debugserver&lt;/code&gt;，然后就可以像平时 debug 那样用 lldb 尽情调戏程序了。而我这里因为是非越狱机，只能打 Log 了。&lt;/p&gt;
&lt;p&gt;WeChat 可执行文件和我注入的 FishChat.dylib 文件加载的地址是随机的，而且我打的 Log 都是在 FishChat.dylib 中已经 Hook 过的方法中。熟悉 image 加载过程和 Hook 概念很重要，后面会用到。可以参考这篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/&quot;&gt;优化 App 的启动时间&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果是自己用 Method Swizzling 写的 Hook 逻辑，很容易拿到原始方法的 &lt;code&gt;IMP&lt;/code&gt;。但这里是使用 &lt;code&gt;CaptainHook&lt;/code&gt;，是对 Method Swizzling 的宏定义封装而已，创建了很多内联函数。所谓的 Method Swizzling 其实也就是 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 的一种应用而已。&lt;/p&gt;
&lt;p&gt;那么该如何找到 &lt;code&gt;CaptainHook&lt;/code&gt; 为我们保存的原始的方法 IMP 呢？&lt;/p&gt;
&lt;p&gt;首先先新建一个 &lt;code&gt;hook.m&lt;/code&gt; 文件，内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;CaptainHook.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHDeclareMethod2(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, CMessageMgr, GetMsg, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg1, LocalID, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, arg2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用 &lt;code&gt;clang -E hook.m -o hook.c&lt;/code&gt; 命令将宏展开，因为文件内容很多，只截取其中比较有意义的部分：&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;static id (*$CMessageMgr_GetMsg$LocalID$_super)(CMessageMgr * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, id arg1, unsigned int arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static id $CMessageMgr_GetMsg$LocalID$_closure(CMessageMgr * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, id arg1, unsigned int arg2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    typedef id (*supType)(CMessageMgr *, SEL, id arg1, unsigned int arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    supType supFn = (supType)class_getMethodImplementation(CMessageMgr$.superClass&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;, _cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; supFn (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, _cmd, arg1, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;static id $CMessageMgr_GetMsg$LocalID$_method(CMessageMgr * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL _cmd, id arg1, unsigned int arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__attribute_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;((always_inline)) static inline void $CMessageMgr_GetMsg$LocalID$_register() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method method = class_getInstanceMethod(CMessageMgr$.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;, @selector(&lt;span class=&quot;symbol&quot;&gt;GetMsg:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;LocalID:&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (method) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $CMessageMgr_GetMsg$LocalID$_super = (__typeof_&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;($CMessageMgr_GetMsg$LocalID$_super))method_getImplementation(method);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (class_addMethod(CMessageMgr$.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt;, @selector(&lt;span class=&quot;symbol&quot;&gt;GetMsg:&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;LocalID:&lt;/span&gt;), (IMP)&amp;amp;$CMessageMgr_GetMsg$LocalID$_method, method_getTypeEncoding(method))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $CMessageMgr_GetMsg$LocalID$_super = &amp;amp;$CMessageMgr_GetMsg$LocalID$_closure;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            method_setImplementation(method, (IMP)&amp;amp;$CMessageMgr_GetMsg$LocalID$_method);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结合 &lt;code&gt;CaptainHook.h&lt;/code&gt; 中的宏定义，不难找出 &lt;code&gt;$CMessageMgr_GetMsg$LocalID$_super&lt;/code&gt; 就是原始方法对应实现的函数指针，也就是 &lt;code&gt;IMP&lt;/code&gt;。&lt;code&gt;$CMessageMgr_GetMsg$LocalID$_method&lt;/code&gt; 是 Hook 过后方法的函数指针。&lt;/p&gt;
&lt;p&gt;这里真的不是靠猜，纯粹 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 玩的熟。理解 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 的一些概念和常用函数后很容易判断 Hook 的原始方法和新的方法。&lt;/p&gt;
&lt;p&gt;所以最后的代码如下。这里打印了方法传入的参数、原始方法的 &lt;code&gt;IMP&lt;/code&gt; 和方法调用栈。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHDeclareMethod2(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, CMessageMgr, GetMsg, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg1, LocalID, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, arg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;GetMsg:%@ LocalID:%d&quot;&lt;/span&gt;,arg1,arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;originalIMP:%p&quot;&lt;/span&gt;,$CMessageMgr_GetMsg$LocalID$_&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,[&lt;span class=&quot;built_in&quot;&gt;NSThread&lt;/span&gt; callStackSymbols]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; CHSuper2(CMessageMgr, GetMsg, arg1, LocalID, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;打印结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight dns&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Mar  &lt;span class=&quot;number&quot;&gt;2 00:37:36&lt;/span&gt; yangxiaoyude-iPhone WeChat(FishChat.dylib)[&lt;span class=&quot;number&quot;&gt;22880&lt;/span&gt;] &amp;lt;Notice&amp;gt;: GetMsg:weixin LocalID:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mar  &lt;span class=&quot;number&quot;&gt;2 00:37:36&lt;/span&gt; yangxiaoyude-iPhone WeChat(FishChat.dylib)[&lt;span class=&quot;number&quot;&gt;22880&lt;/span&gt;] &amp;lt;Notice&amp;gt;: originalIMP:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x&lt;span class=&quot;number&quot;&gt;1028821d4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mar  &lt;span class=&quot;number&quot;&gt;2 00:37:36&lt;/span&gt; yangxiaoyude-iPhone WeChat(FishChat.dylib)[&lt;span class=&quot;number&quot;&gt;22880&lt;/span&gt;] &amp;lt;Notice&amp;gt;: (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   FishChat.dylib                      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x000000010437dd08 _ZL35$CMessageMgr_GetMsg$LocalID$_methodP11CMessageMgrP13objc_selectorP11objc_objectj + &lt;span class=&quot;number&quot;&gt;224&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;   WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0000000102afb960 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;1218052&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;   WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0000000102afe4b8 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;1229148&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;   WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x000000&lt;span class=&quot;number&quot;&gt;01029f1554&lt;/span&gt; _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;127480&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;   WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0000&lt;span class=&quot;number&quot;&gt;000102a47390&lt;/span&gt; _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;479284&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;   WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0000000102ad4d64 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;1059336&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;   WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0000&lt;span class=&quot;number&quot;&gt;000102a52050&lt;/span&gt; _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;523508&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;   Foundation                          &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x0000&lt;span class=&quot;number&quot;&gt;000194125048&lt;/span&gt; &amp;lt;redacted&amp;gt; + &lt;span class=&quot;number&quot;&gt;340&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;   CoreFounda&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;将地址翻译成-Selector&quot;&gt;&lt;a href=&quot;#将地址翻译成-Selector&quot; class=&quot;headerlink&quot; title=&quot;将地址翻译成 Selector&quot;&gt;&lt;/a&gt;将地址翻译成 Selector&lt;/h3&gt;&lt;p&gt;这里分详细和快速两种方法来讲述如何通过内存地址找到对应的 &lt;code&gt;Selector&lt;/code&gt;。分步骤计算适合对操作系统原理不太熟悉的新手，老司机可以直接进入『快速计算方法』。&lt;/p&gt;
&lt;h4 id=&quot;分步详细剖析计算方法&quot;&gt;&lt;a href=&quot;#分步详细剖析计算方法&quot; class=&quot;headerlink&quot; title=&quot;分步详细剖析计算方法&quot;&gt;&lt;/a&gt;分步详细剖析计算方法&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;反汇编得出方法相对地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记得在&lt;strong&gt;选择 FAT 架构时选择跟手机 CPU 相匹配的架构&lt;/strong&gt;，有 armv7 和 aarch64 两种可选。我这里以 aarch64 为例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 在 Hopper 中的地址 &lt;code&gt;0x000000010280e1d4&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/reverse%20engineering/original_method_address@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;WeChat Mach-O 在 Hopper 中的基地址 &lt;code&gt;0x0000000100000000&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/reverse%20engineering/wechat_base_address@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;得出 &lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 在 WeChat 中的相对地址为 &lt;code&gt;0x280E1D4&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x000000010280e1d4 - 0x0000000100000000 = 0x280E1D4&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算 Mach-O 文件加载的随机地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前打印 &lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 原始实现的 &lt;code&gt;IMP&lt;/code&gt; 为 &lt;code&gt;0x1028821d4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;WeChat 文件在手机中加载的随机地址为 &lt;strong&gt;『原始 IMP 的地址 - 方法相对地址』&lt;/strong&gt;，结果为 &lt;code&gt;0x100074000&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x1028821d4 - 0x280E1D4 = 0x100074000&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;还原调用栈为相对地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将之前打印出调用栈上的地址转换成相对地址，再加上 Hopper 上的基地址 &lt;code&gt;0x0000000100000000&lt;/code&gt;，公式为 &lt;strong&gt;『调用栈上的地址 - WeChat 随机地址 + &lt;code&gt;0x0000000100000000&lt;/code&gt;』&lt;/strong&gt;，结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;  WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x102A87960 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;1218052&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;2 &lt;/span&gt;  WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x102A8A4B8 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;1229148&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;  WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10297D554 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;127480&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;4 &lt;/span&gt;  WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x1029D3390 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;479284&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;5 &lt;/span&gt;  WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x102A60D64 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;1059336&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;6 &lt;/span&gt;  WeChat                              &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x1029DE050 _ZN16ClearSessionItem7compareERKNSt3__110shared_ptrIS_EES4_ + &lt;span class=&quot;number&quot;&gt;523508&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;快速计算方法&quot;&gt;&lt;a href=&quot;#快速计算方法&quot; class=&quot;headerlink&quot; title=&quot;快速计算方法&quot;&gt;&lt;/a&gt;快速计算方法&lt;/h4&gt;&lt;p&gt;已知条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 在 Hopper 反汇编后的地址 &lt;code&gt;0x10280e1d4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 方法内存地址为 &lt;code&gt;0x1028821d4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 在内存中 &lt;code&gt;0x102afb960&lt;/code&gt; 处被调用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;求 &lt;code&gt;0x102afb960&lt;/code&gt; 对应 Hopper 反汇编后的地址？&lt;/p&gt;
&lt;p&gt;因为方法间的相对地址是不变的，所以：&lt;/p&gt;
&lt;p&gt;A 方法反汇编地址 - B 方法反汇编地址 = A 方法真实地址 - B 方法真实地址&lt;/p&gt;
&lt;p&gt;所以结果为 &lt;code&gt;0x102A87960&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x102afb960 - 0x1028821d4 + 0x10280e1d4 = 0x102A87960&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;跟之前的分步骤计算结果一样。&lt;/p&gt;
&lt;h4 id=&quot;还原-Selector&quot;&gt;&lt;a href=&quot;#还原-Selector&quot; class=&quot;headerlink&quot; title=&quot;还原 Selector&quot;&gt;&lt;/a&gt;还原 Selector&lt;/h4&gt;&lt;p&gt;根据反汇编地址在 Hopper 中定位方法名，快捷键 &lt;code&gt;G&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最终得到的方法调用栈如下，调用次序是自底向上：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-[CSyncBaseEvent &lt;span class=&quot;string&quot;&gt;BatchAddMsg:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;ShowPush:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-[CSyncBaseEvent &lt;span class=&quot;string&quot;&gt;HandleBatch:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;ShowPush:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-[NewSyncHandler &lt;span class=&quot;string&quot;&gt;HandleSyncResp:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;Push:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;ShowPush:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;ContinueFlag:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;Scene:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;syncKeyMd5:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-[NewSyncService &lt;span class=&quot;string&quot;&gt;HandleSyncResp:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;Push:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;ShowPush:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;Scene:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-[CNewSyncPrtl &lt;span class=&quot;string&quot;&gt;HandleResp:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-[EventService &lt;span class=&quot;string&quot;&gt;HandleRespThread:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;从汇编代码继续猜&quot;&gt;&lt;a href=&quot;#从汇编代码继续猜&quot; class=&quot;headerlink&quot; title=&quot;从汇编代码继续猜&quot;&gt;&lt;/a&gt;从汇编代码继续猜&lt;/h2&gt;&lt;p&gt;虽然可以锁定添加消息的实现逻辑在 &lt;code&gt;-[CSyncBaseEvent BatchAddMsg:ShowPush:]&lt;/code&gt; 方法里，但是查找头文件发现它的两个参数和一个返回值竟然都是 &lt;code&gt;BOOL&lt;/code&gt; 类型。直接 Hook 掉并返回 &lt;code&gt;NO&lt;/code&gt; 虽然可以屏蔽消息，但是却屏蔽了所有的消息，没有对消息来源进行筛选。可以肯定的是在其内部已经获取到了 &lt;code&gt;CMessageWrap&lt;/code&gt; 消息数组（Batch 暗示批量），然后才调用的 &lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 方法。而真正添加消息的逻辑可能在 &lt;code&gt;-[CMessageMgr GetMsg:LocalID:]&lt;/code&gt; 调用之前，也可能在它调用之后。&lt;/p&gt;
&lt;p&gt;在不能反编译的情况下，只能浏览下方法的汇编代码中调用到什么其他方法。消息被封装成 &lt;code&gt;CMessageWrap&lt;/code&gt; 类，所以要格外注意这个类的一些属性名，或者 &lt;code&gt;MsgWrap&lt;/code&gt; 这个词。进而找到 &lt;code&gt;BatchAddMsgInfo&lt;/code&gt; 这个类有一些汇编中出现的消息处理的标志位（&lt;code&gt;isInsertNew&lt;/code&gt;,&lt;code&gt;isNeedChangeDisplay&lt;/code&gt;,&lt;code&gt;isNotify&lt;/code&gt;,&lt;code&gt;isCanAddDB&lt;/code&gt;） 和 &lt;code&gt;CMessageWrap&lt;/code&gt;。打开头文件，一眼就看到一个成员变量 &lt;code&gt;m_arrMsgList&lt;/code&gt;，果然是我我想要的消息数组，过滤下即可：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHDeclareClass(CSyncBaseEvent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHDeclareMethod2(&lt;span class=&quot;keyword&quot;&gt;BOOL, &lt;/span&gt;CSyncBaseEvent, &lt;span class=&quot;keyword&quot;&gt;BatchAddMsg, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;BOOL, &lt;/span&gt;arg1, &lt;span class=&quot;keyword&quot;&gt;ShowPush, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;BOOL, &lt;/span&gt;arg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray *msgList = [self valueForKeyPath:@&lt;span class=&quot;string&quot;&gt;&quot;m_arrMsgList&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray *msgListResult = filtMessageWrapArr(msgList)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self setValue:msgListResult forKeyPath:@&lt;span class=&quot;string&quot;&gt;&quot;m_arrMsgList&quot;&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return CHSuper2(CSyncBaseEvent, &lt;span class=&quot;keyword&quot;&gt;BatchAddMsg, &lt;/span&gt;arg1, &lt;span class=&quot;keyword&quot;&gt;ShowPush, &lt;/span&gt;arg2)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;写过滤函数时注意 MRC 下的内存管理，不要产生内存泄露。拿到 &lt;code&gt;CMessageWrap&lt;/code&gt; 对象时判断消息来源是否需要被屏蔽，删掉数组中需要被屏蔽的消息对象。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; * filtMessageWrapArr(&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *msgList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *msgListResult = [msgList mutableCopy];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; msgWrap &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; msgList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Ivar nsFromUsrIvar = class_getInstanceVariable(objc_getClass(&lt;span class=&quot;string&quot;&gt;&quot;CMessageWrap&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;m_nsFromUsr&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *m_nsFromUsr = object_getIvar(msgWrap, nsFromUsrIvar);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([FishConfigurationCenter sharedInstance].chatIgnoreInfo[m_nsFromUsr].boolValue) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [msgListResult removeObject:msgWrap];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [msgListResult autorelease];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终屏蔽消息功能大功告成。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;这里只是做个示范，并不代表我 Hook 得最准。因为条条大路通罗马，只要达到目的就好。本来逆向工程就是在没有源码的情况下揣测和分析，所以不同的人会给出不同的逆向过程，这就像从南坡和北坡一起爬山一样。&lt;/p&gt;
&lt;p&gt;由于篇幅有限，没能讲解实现屏蔽消息功能的所有代码。源码 GitHub 地址 &lt;a href=&quot;https://github.com/yulingtianxia/FishChat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FishChat&lt;/a&gt;，欢迎提 PR 一起切磋，钻研。&lt;/p&gt;
&lt;p&gt;本人是个 iOS 逆向新手，基本是现学现卖，如有疏漏，还请大牛们指正。&lt;/p&gt;
&lt;p&gt;本项目仅做学习研究用途，禁止用于黑产获利等行为。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在逆向工程中往往需要针对想要做的功能 Hook 到相应的方法和属性，小白面对 &lt;code&gt;class-dump&lt;/code&gt; 后的大量头文件表示只能靠『猜』。这里我分享下逆向微信实现屏蔽群消息和好友消息的实战经验，适用于&lt;strong&gt;非越狱机&lt;/strong&gt;，项目 GitHub 地址: &lt;a href=&quot;https://github.com/yulingtianxia/FishChat&quot;&gt;FishChat&lt;/a&gt;。为了能读懂此文，建议先阅读我的上一篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2017/02/28/Make-WeChat-Great-Again/&quot;&gt;Make WeChat Great Again&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Make WeChat Great Again</title>
    <link href="http://yulingtianxia.com/blog/2017/02/28/Make-WeChat-Great-Again/"/>
    <id>http://yulingtianxia.com/blog/2017/02/28/Make-WeChat-Great-Again/</id>
    <published>2017-02-27T17:08:05.000Z</published>
    <updated>2017-03-23T04:58:56.000Z</updated>
    
    <content type="html">&lt;p&gt;关闭朋友圈有一年多了，突然有一天微信的策略变了，在关闭朋友圈的同时也不让别人查看自己的朋友圈了。有妹子表示看不到我朋友圈很不爽，于是我决定对微信进行一番改造！初步实现效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭『发现』页面的『朋友圈』、『购物』和『游戏』入口&lt;/li&gt;
&lt;li&gt;修改微信运动步数&lt;/li&gt;
&lt;li&gt;去除各种小红点提示&lt;/li&gt;
&lt;li&gt;设置夜间模式&lt;/li&gt;
&lt;li&gt;阻止撤回消息&lt;/li&gt;
&lt;li&gt;屏蔽群&amp;amp;好友消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;手机无需越狱&lt;/strong&gt;，项目 GitHub 地址: &lt;a href=&quot;https://github.com/yulingtianxia/FishChat&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FishChat&lt;/a&gt;，Make WeChat Great Again！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;工欲善其事必先利其器&quot;&gt;&lt;a href=&quot;#工欲善其事必先利其器&quot; class=&quot;headerlink&quot; title=&quot;工欲善其事必先利其器&quot;&gt;&lt;/a&gt;工欲善其事必先利其器&lt;/h2&gt;&lt;p&gt;因为没有越狱手机，所以不是直接写 tweak 放手机里，而是需要将 &lt;code&gt;CaptainHook&lt;/code&gt; 工程编译出的 dylib 注入到已砸壳 app 的二进制文件中。同样因为没有越狱机，所以砸壳的文件只能从 某 P 助手下载了。&lt;/p&gt;
&lt;p&gt;我写了一个 Shell 脚本 &lt;a href=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Shell/autoswimfi.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autoswimfi.sh&lt;/a&gt; 帮我完成一些重复性的任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查找可用的 iPhone 开发者证书&lt;/li&gt;
&lt;li&gt;解压 ipa 文件&lt;/li&gt;
&lt;li&gt;拷贝 mobileprovision 文件和要注入的 dylib 文件到 app 文件夹中&lt;/li&gt;
&lt;li&gt;向 app 中可执行文件的 &lt;code&gt;Load Commands&lt;/code&gt; 段中加入一条加载 dylib 的指令&lt;/li&gt;
&lt;li&gt;对 app 中所有的 app，appx，framework，dylib 文件用第 1 步获取的证书进行重签名&lt;/li&gt;
&lt;li&gt;打包签名好的 ipa 文件&lt;/li&gt;
&lt;li&gt;删除上述过程中产生的中间文件&lt;/li&gt;
&lt;li&gt;通过 USB 线安装 ipa 文件手机上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Shell/autoswimfi.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autoswimfi.sh&lt;/a&gt; 需要传入的三个参数分别为：已砸壳的 ipa 文件，没过期的 mobileprovision 文件，要注入的 dylib 文件。&lt;/p&gt;
&lt;p&gt;犹豫了很久，还是贴上脚本代码，壮气势充篇幅吧。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# !/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SOURCEIPA=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MOBILEPROV=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DYLIB=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$3&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$&amp;#123;SOURCEIPA%/*&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;security find-identity -v -p codesigning &amp;gt; cers.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; IFS=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; -r line || [[ -n &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt; ]]; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [[ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt; =~ &lt;span class=&quot;string&quot;&gt;&quot;iPhone Developer&quot;&lt;/span&gt; ]]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      DEVELOPER=&lt;span class=&quot;variable&quot;&gt;$&amp;#123;line:47:$&amp;#123;#line&amp;#125;&lt;/span&gt;-48&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &amp;lt; cers.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unzip -qo &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$SOURCEIPA&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; extracted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;APPLICATION=$(ls extracted/Payload/)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Copying dylib and mobileprovision&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$DYLIB&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;extracted/Payload/&lt;span class=&quot;variable&quot;&gt;$APPLICATION&lt;/span&gt;/&lt;span class=&quot;variable&quot;&gt;$&amp;#123;DYLIB##*/&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$MOBILEPROV&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;extracted/Payload/&lt;span class=&quot;variable&quot;&gt;$APPLICATION&lt;/span&gt;/embedded.mobileprovision&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Insert dylib into Mach-O file&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yololib &lt;span class=&quot;string&quot;&gt;&quot;extracted/Payload/&lt;span class=&quot;variable&quot;&gt;$APPLICATION&lt;/span&gt;/&lt;span class=&quot;variable&quot;&gt;$&amp;#123;APPLICATION%.*&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$&amp;#123;DYLIB##*/&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Resigning with certificate: &lt;span class=&quot;variable&quot;&gt;$DEVELOPER&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; extracted  \( -name &lt;span class=&quot;string&quot;&gt;&quot;*.app&quot;&lt;/span&gt; -o -name &lt;span class=&quot;string&quot;&gt;&quot;*.appex&quot;&lt;/span&gt; -o -name &lt;span class=&quot;string&quot;&gt;&quot;*.framework&quot;&lt;/span&gt; -o -name &lt;span class=&quot;string&quot;&gt;&quot;*.dylib&quot;&lt;/span&gt; \) &amp;gt; directories.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;security cms -D -i &lt;span class=&quot;string&quot;&gt;&quot;extracted/Payload/&lt;span class=&quot;variable&quot;&gt;$APPLICATION&lt;/span&gt;/embedded.mobileprovision&quot;&lt;/span&gt; &amp;gt; t_entitlements_full.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/libexec/PlistBuddy -x -c &lt;span class=&quot;string&quot;&gt;&#39;Print:Entitlements&#39;&lt;/span&gt; t_entitlements_full.plist &amp;gt; t_entitlements.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; IFS=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; -r line || [[ -n &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt; ]]; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/codesign --continue &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$DEVELOPER&lt;/span&gt;&quot;&lt;/span&gt; --entitlements &lt;span class=&quot;string&quot;&gt;&quot;t_entitlements.plist&quot;&lt;/span&gt;  &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$line&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt; &amp;lt; directories.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Creating the Signed IPA&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; extracted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zip -qry ../extracted.ipa *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm -rf &lt;span class=&quot;string&quot;&gt;&quot;extracted&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm directories.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm cers.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm t_entitlements.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rm t_entitlements_full.plist&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Installing APP to your iOS Device&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mobiledevice install_app extracted.ipa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;想要让 &lt;a href=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Shell/autoswimfi.sh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;autoswimfi.sh&lt;/a&gt; 一气呵成执行下去，需要依赖以下几项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mac 上需要有唯一可用的 iPhone 开发者证书，如果有多个，默认选最后一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yololib&lt;/code&gt; 工具用于注入 dylib 文件到二进制文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mobiledevice&lt;/code&gt; 可以将 ipa 安装到 USB 连接到 Mac 上的手机中&lt;/li&gt;
&lt;li&gt;一个可用的 mobileprovision 文件，十分关键，可以新建个工程在自己手机 Run 一下，新生成的 app 里面就有 mobileprovision 文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这里多再说几句：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一年多前我尝试安装 &lt;code&gt;iOSOpenDev&lt;/code&gt; 很多次，一直失败，就当前辈们劝我还是用 &lt;code&gt;theos&lt;/code&gt; 稳妥的时候，我觉得还是再试一次吧，果然还是失败了。不过新建 Xcode 项目选择 template 时却出现了 &lt;code&gt;iOSOpenDev&lt;/code&gt; 哈哈哈哈！&lt;/li&gt;
&lt;li&gt;一开始用 &lt;code&gt;insert_dylib&lt;/code&gt; 注入 dylib 后 crash，后来用 &lt;code&gt;yololib&lt;/code&gt; 就好了！不过 &lt;code&gt;yololib&lt;/code&gt; 有个 bug 是对 dylib 的版本号有要求。这里可以直接改源码，把 &lt;code&gt;DYLIB_CURRENT_VER&lt;/code&gt; 和 &lt;code&gt;DYLIB_COMPATIBILITY_VERSION&lt;/code&gt; 的宏定义都改成 &lt;code&gt;0x0000&lt;/code&gt;。懒人直接用我上传的 &lt;a href=&quot;https://github.com/yulingtianxia/FishChat/blob/master/yololib&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yololib&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;如果要查看 Mach-O 文件完整信息，建议用 MachOView。&lt;code&gt;otool -l&lt;/code&gt; 打印所有的 &lt;code&gt;Load Commands&lt;/code&gt;，建议搭配 &lt;code&gt;grep&lt;/code&gt; 进行正则过滤。&lt;code&gt;otool -L&lt;/code&gt; 可以查看使用的库文件。&lt;/li&gt;
&lt;li&gt;网上一些重签名工具没有将插件拓展或 Watch 中的 dylib 重签名，导致签名失败等问题。微信的 Apple Watch 客户端用 Swift 写的，因为还没有 ABI 稳定，所以只好把大量 dylib 打包进去。&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;Cycript&lt;/code&gt; 来完成一些调试工作，这样就不用一次次打 Log 了。同样也可以打印出视图层级，不过建议有条件的同学用 Reveal 2，已经支持 USB 调试了。&lt;code&gt;Cycript&lt;/code&gt; 只支持在同网段下连接到手机 IP 的 &lt;code&gt;8888&lt;/code&gt; 端口，cy 脚本还是跟 &lt;code&gt;lldb&lt;/code&gt; 命令有一些差别的。如果 &lt;code&gt;Cycript&lt;/code&gt; 官网的 sdk 不好用，那就用用我上传的吧：&lt;a href=&quot;https://github.com/yulingtianxia/FishChat/tree/master/Cycript.framework&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Cycript.framework&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;找到视图对应的类之后，就需要在 &lt;code&gt;class-dump&lt;/code&gt; 得到的头文件寻找蛛丝马迹了。Dump 出的文件：&lt;a href=&quot;https://github.com/yulingtianxia/FishChat/tree/master/WeChat-Headers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WeChat-Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;查看设备 Log 最简单的方式当然是从 Xcode-&amp;gt;Devices-&amp;gt;你的设备。 &lt;/li&gt;
&lt;li&gt;安装时如果遇到 &lt;code&gt;AMDeviceSecureInstallApplication&lt;/code&gt; 安装失败，可以将工程 Clean 和 Clean Build Folder 后重新编译，再跑一次我的脚本。如果还不行，尝试用 iTools 等软件安装 ipa 到手机上。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;之后就是不停地-Hook&quot;&gt;&lt;a href=&quot;#之后就是不停地-Hook&quot; class=&quot;headerlink&quot; title=&quot;之后就是不停地 Hook&quot;&gt;&lt;/a&gt;之后就是不停地 Hook&lt;/h2&gt;&lt;p&gt;我曾经在『&lt;a href=&quot;http://yulingtianxia.com/blog/2016/05/06/Let-your-WeChat-for-Mac-never-revoke-messages/&quot;&gt;让你的微信不再被人撤回消息&lt;/a&gt;』这篇文章中说过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前看的一些逆向的教程里，感觉前期工作都是装软件配环境，噼里啪啦命令一顿敲，整的挺玄乎，其实都是用人家现成儿的工具做些事情，美其名曰『站在巨人的肩膀上』，这里不再赘述。在我看来第一个真正意义上有难度的事情就是一个字儿：『猜』！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是啊，头文件有了，UI 层级有了，该猜了！那么检验是否猜对需要做啥？Hook 呗！&lt;code&gt;CaptainHook&lt;/code&gt; 的用法很简单，新建工程的模板注释里面已经写得很详细了，就不赘述了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mac 上需要安装 &lt;code&gt;iOSOpenDev&lt;/code&gt; 或 &lt;code&gt;theos&lt;/code&gt;，本项目新建工程时使用 &lt;code&gt;iOSOpenDev&lt;/code&gt; 的 &lt;code&gt;CaptainHook&lt;/code&gt; 模板。编译的时候要选自己的手机，不要选模拟器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;关闭『发现』页面的各种入口-清君侧&quot;&gt;&lt;a href=&quot;#关闭『发现』页面的各种入口-清君侧&quot; class=&quot;headerlink&quot; title=&quot;关闭『发现』页面的各种入口 - 清君侧&quot;&gt;&lt;/a&gt;关闭『发现』页面的各种入口 - 清君侧&lt;/h3&gt;&lt;p&gt;在关掉各种乱码七糟的功能之后，发现页面仍留下几个无法关闭的入口。本次逆向微信的动机也由此引发：我只想关闭朋友圈入口，并没想关闭自己朋友圈内容，不过微信的这项策略也是很符合一些人的需求的。很多人真的想关闭自己朋友圈不让别人看，不过将这个需求跟旧的『关闭朋友圈入口』功能强绑定在一起，就有些绑架用户的味道了，鱼和熊掌不可兼得啊！不过关闭朋友圈后，别人依然能看到自己在 TimeLine 上新发的内容，但是一旦点击头像进入主页后就提示『该朋友暂未开启朋友圈』，奇怪的是回到自己的 TimeLine 上后，以前那条新发的内容就消失了。我觉得这不是 bug，而是产品策略。微信在努力保持用户粘性，不得不在用户需求和产品数据之间权衡。好吧，扯远了。。。&lt;/p&gt;
&lt;p&gt;我只保留了这俩『活儿好不粘人』的工具类入口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/wechat_discover.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实扫一扫页面可以通过右上角加号更快进入，也可以去掉。小程序其实平时也基本不用，偶尔用的时候现搜，鸡肋入口。不能再干掉了，否则还不如索性干掉整个发现页面。&lt;/p&gt;
&lt;p&gt;删入口有两种思路，一种是删数据源，另一种是 hook &lt;code&gt;UITableViewDelegate&lt;/code&gt; 和 &lt;code&gt;UITableViewDataSource&lt;/code&gt;。发现页面的 VC 是 &lt;code&gt;FindFriendEntryViewController&lt;/code&gt;，发现数据源数组包含的结构体需要花功夫猜下含义，索性简单粗暴 Plan B。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 关闭朋友圈入口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod2(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;, FindFriendEntryViewController, tableView, &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *, tableView, heightForRowAtIndexPath, &lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *, indexPath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *timelineIndexPath = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueForKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;m_WCTimeLineIndexPath&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([indexPath isEqual: timelineIndexPath] || indexPath.section == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;## Hide Time Line Entry ##&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; CHSuper2(FindFriendEntryViewController, tableView, tableView, heightForRowAtIndexPath, indexPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod2(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *, FindFriendEntryViewController, tableView, &lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *, tableView, cellForRowAtIndexPath, &lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *, indexPath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *timelineIndexPath = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; valueForKeyPath:&lt;span class=&quot;string&quot;&gt;@&quot;m_WCTimeLineIndexPath&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = CHSuper2(FindFriendEntryViewController, tableView, tableView, cellForRowAtIndexPath, indexPath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([indexPath isEqual: timelineIndexPath] || indexPath.section == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;## Hide Time Line Entry ##&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cell.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; cell.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [subview removeFromSuperview];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单粗暴地将想要隐藏的入口 Cell 高度设为 &lt;code&gt;0&lt;/code&gt; 后发现 &lt;code&gt;subview&lt;/code&gt; 被挤出来了，我日，只好再干掉这些 &lt;code&gt;subview&lt;/code&gt;。最后记得在页面出现时刷新下 table 数据：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod1(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, FindFriendEntryViewController, viewDidAppear, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;, animated)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHSuper1(FindFriendEntryViewController, viewDidAppear, animated);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(reloadData)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;修改微信运动步数-装逼党的自我修养&quot;&gt;&lt;a href=&quot;#修改微信运动步数-装逼党的自我修养&quot; class=&quot;headerlink&quot; title=&quot;修改微信运动步数 - 装逼党的自我修养&quot;&gt;&lt;/a&gt;修改微信运动步数 - 装逼党的自我修养&lt;/h3&gt;&lt;p&gt;修改微信运动步数的方法网上一搜就有好多文章，就是 hook &lt;code&gt;WCDeviceStepObject&lt;/code&gt; 的 &lt;code&gt;m7StepCount&lt;/code&gt; 方法罢了。我在这里为了更方便地装逼，当然不能 hook 时把步数写死了，随机数也不够屌，要装逼就装到位：&lt;/p&gt;
&lt;p&gt;先到设置页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/wechat_setting_keyboard.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;在文本框输入个正数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/wechat_setting_stepcount.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;完美：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/wechat_mystepcount.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;==我就问你怕不怕==&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微信的一些列表页面是由数据来驱动 UI 的。table 对应 &lt;code&gt;MMTableViewInfo&lt;/code&gt;，section 对应 &lt;code&gt;MMTableViewSectionInfo&lt;/code&gt;，cell 对应 &lt;code&gt;MMTableViewCellInfo&lt;/code&gt;。以前做项目时也见到过类似的框架，理解起来不难。但是这种过度的封装完全改变了原有系统 API，使用者碰到问题需要深入到框架去调试，又因为是内部框架，网上也搜不到方案。所以要求框架作者规范的编码习惯和较强的能力。又扯远了，我是用 &lt;code&gt;FishConfigurationCenter&lt;/code&gt; 这个单例类来保存状态值的，目前还没在持久层写入磁盘。可以在 &lt;code&gt;MMTableViewCellInfo&lt;/code&gt; 头文件看到微信中常用的 cell 是封装好的，这里直接获取个带文本框的就行了。我顺便还加了个夜间模式的开关 cell：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHDeclareMethod0(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, NewSettingViewController, reloadTableData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHSuper0(NewSettingViewController, reloadTableData);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MMTableViewInfo *tableInfo = [self &lt;span class=&quot;string&quot;&gt;valueForKeyPath:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;m_tableViewInfo&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MMTableViewSectionInfo *sectionInfo = [objc_getClass(&lt;span class=&quot;string&quot;&gt;&quot;MMTableViewSectionInfo&quot;&lt;/span&gt;) sectionInfoDefaut];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MMTableViewCellInfo *nightCellInfo = [objc_getClass(&lt;span class=&quot;string&quot;&gt;&quot;MMTableViewCellInfo&quot;&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;switchCellForSel:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;handleNightMode:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;target:&lt;/span&gt;[FishConfigurationCenter sharedInstance] &lt;span class=&quot;string&quot;&gt;title:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;夜间模式&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;on:&lt;/span&gt;[FishConfigurationCenter sharedInstance].isNightMode];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [sectionInfo &lt;span class=&quot;string&quot;&gt;addCell:&lt;/span&gt;nightCellInfo];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MMTableViewCellInfo *stepcountCellInfo = [objc_getClass(&lt;span class=&quot;string&quot;&gt;&quot;MMTableViewCellInfo&quot;&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;editorCellForSel:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;handleStepCount:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;target:&lt;/span&gt;[FishConfigurationCenter sharedInstance] &lt;span class=&quot;string&quot;&gt;tip:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;请输入步数&quot;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;focus:&lt;/span&gt;NO &lt;span class=&quot;string&quot;&gt;text:&lt;/span&gt;[NSString &lt;span class=&quot;string&quot;&gt;stringWithFormat:&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;&quot;%ld&quot;&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)[FishConfigurationCenter sharedInstance].stepCount]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [sectionInfo &lt;span class=&quot;string&quot;&gt;addCell:&lt;/span&gt;stepcountCellInfo];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [tableInfo &lt;span class=&quot;string&quot;&gt;insertSection:&lt;/span&gt;sectionInfo &lt;span class=&quot;string&quot;&gt;At:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MMTableView *tableView = [tableInfo getTableView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [tableView reloadData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后获取步数的时候从单例里取值就可以啦：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 微信运动步数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod0(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, WCDeviceStepObject, m7StepCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([FishConfigurationCenter sharedInstance].stepCount == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [FishConfigurationCenter sharedInstance].stepCount = CHSuper0(WCDeviceStepObject, m7StepCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [FishConfigurationCenter sharedInstance].stepCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;小红点消除计划-我想静静&quot;&gt;&lt;a href=&quot;#小红点消除计划-我想静静&quot; class=&quot;headerlink&quot; title=&quot;小红点消除计划 - 我想静静&quot;&gt;&lt;/a&gt;小红点消除计划 - 我想静静&lt;/h3&gt;&lt;p&gt;微信真的是越来越臃肿，大有追赶 QQ 的架势，连小红点也是越来越多。『发现』页面撸的挺干净了，我就不信扫一扫入口还能有小红点（flag 已立）。『我』Tab 页里什么钱包啊卡包啊老有小红点，真烦人，老得点进去。&lt;/p&gt;
&lt;p&gt;通过查看视图层级发现小红点来源有两种，一种是 TabBar 上的小红点，另一种是 cell 上的小红点。前者是系统 API 带的，后者是微信的 &lt;code&gt;MMBadgeView&lt;/code&gt; 类实现的。&lt;/p&gt;
&lt;p&gt;微信的 &lt;code&gt;MMTabBarController&lt;/code&gt; 继承于 &lt;code&gt;UITabBarController&lt;/code&gt;，它提供了几个设置小红点的快捷方法，统统 hook 掉，屏蔽后两个『发现』和『我』上的小红点：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod2(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, MMTabBarController, setTabBarBadgeImage, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg1, forIndex, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, arg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg2 != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; arg2 != &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHSuper2(MMTabBarController, setTabBarBadgeImage, arg1, forIndex, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod2(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, MMTabBarController, setTabBarBadgeString, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg1, forIndex, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, arg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg2 != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; arg2 != &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHSuper2(MMTabBarController, setTabBarBadgeString, arg1, forIndex, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod2(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, MMTabBarController, setTabBarBadgeValue, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg1, forIndex, &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, arg2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arg2 != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; arg2 != &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHSuper2(MMTabBarController, setTabBarBadgeValue, arg1, forIndex, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;去除 &lt;code&gt;MMBadgeView&lt;/code&gt; 就更简单了，直接隐藏掉就好了。不直接 remove 的好处是可以保留聊天页面的小红点提醒，而其他页面的小红点被隐藏了。我猜原因是聊天页面的小红点在添加上去后会设置下 &lt;code&gt;hidden = NO&lt;/code&gt;，因为 cell 是重用的。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod1(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt;, didAddSubview, &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *, subview)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([subview isKindOfClass:&lt;span class=&quot;built_in&quot;&gt;NSClassFromString&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;MMBadgeView&quot;&lt;/span&gt;)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        subview.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;夜间模式-辣眼睛&quot;&gt;&lt;a href=&quot;#夜间模式-辣眼睛&quot; class=&quot;headerlink&quot; title=&quot;夜间模式 - 辣眼睛&quot;&gt;&lt;/a&gt;夜间模式 - 辣眼睛&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;她说睡了，其实是躺在被窝里继续玩手机罢了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;夜间模式其实也就是主题适配，这个手机 QQ 玩的是最 6 的了，无人能敌。要想做一个完美的皮肤引擎是很庞大的工作，不仅是多套色值方案的存储和切换问题，还有多套图片资源的适配问题。这里由于时间仓促，只做了个很辣眼睛的夜间模式，而且切换回来需要杀进程重新进：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/FishChat/blob/master/Images/wechat_about.PNG?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;这么辣眼睛的审美会被狂吐槽，就不贴代码了，有兴趣的去项目里查看哈哈。&lt;/p&gt;
&lt;h3 id=&quot;阻止撤回消息-知道真相的我眼泪掉下来&quot;&gt;&lt;a href=&quot;#阻止撤回消息-知道真相的我眼泪掉下来&quot; class=&quot;headerlink&quot; title=&quot;阻止撤回消息 - 知道真相的我眼泪掉下来&quot;&gt;&lt;/a&gt;阻止撤回消息 - 知道真相的我眼泪掉下来&lt;/h3&gt;&lt;p&gt;有时候被撤回的消息看到了会后悔的，但这依然阻止不了我的好奇心+强迫症。&lt;/p&gt;
&lt;p&gt;在 『&lt;a href=&quot;http://yulingtianxia.com/blog/2016/05/06/Let-your-WeChat-for-Mac-never-revoke-messages/&quot;&gt;让你的微信不再被人撤回消息&lt;/a&gt;』 里我介绍过用 Hopper 逆向的方法。直接看汇编代码来的不那么直接，还是 hook OC 代码稳一些。&lt;/p&gt;
&lt;p&gt;撤回消息时会先调用 &lt;code&gt;-[CMessageMgr onRevokeMsg:]&lt;/code&gt; 方法，然后调用 &lt;code&gt;-[CMessageMgr DelMsg:MsgList: DelAll:]&lt;/code&gt; 方法删除消息。随意在撤回的时候记录下标志位就好，不影响删除消息功能。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 阻止撤回消息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHOptimizedMethod1(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, CMessageMgr, onRevokeMsg, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [FishConfigurationCenter sharedInstance].revokeMsg = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHSuper1(CMessageMgr, onRevokeMsg, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CHDeclareMethod3(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;, CMessageMgr, DelMsg, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg1, MsgList, &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, arg2, DelAll, &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;, arg3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([FishConfigurationCenter sharedInstance].revokeMsg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [FishConfigurationCenter sharedInstance].revokeMsg = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHSuper3(CMessageMgr, DelMsg, arg1, MsgList, arg2, DelAll, arg3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;要屏蔽-不要免打扰&quot;&gt;&lt;a href=&quot;#要屏蔽-不要免打扰&quot; class=&quot;headerlink&quot; title=&quot;要屏蔽 - 不要免打扰&quot;&gt;&lt;/a&gt;要屏蔽 - 不要免打扰&lt;/h3&gt;&lt;p&gt;详细内容请见：&lt;a href=&quot;http://yulingtianxia.com/blog/2017/03/06/How-to-hook-the-correct-method-in-reverse-engineering&quot;&gt;如何在逆向工程中 Hook 得更准 - 微信屏蔽好友&amp;amp;群消息实战&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h2&gt;&lt;p&gt;若不是时间匆忙，或许还可以让微信变得更伟大。比如加个『彻底清理缓存』按钮。平时使用微信确实有很多不爽的地方，尤其是群功能太弱太弱了。我还想加个功能就是如果对方发了超过 30s 的语音，并且对方不是妹子也不是老板不是亲戚，此时自动回复 #&amp;amp;*DF@$@(M!…..我没太听清，请你重新再发一遍？&lt;/p&gt;
&lt;p&gt;此项目仅用于逆向工程交流学习，黑产死开！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关闭朋友圈有一年多了，突然有一天微信的策略变了，在关闭朋友圈的同时也不让别人查看自己的朋友圈了。有妹子表示看不到我朋友圈很不爽，于是我决定对微信进行一番改造！初步实现效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭『发现』页面的『朋友圈』、『购物』和『游戏』入口&lt;/li&gt;
&lt;li&gt;修改微信运动步数&lt;/li&gt;
&lt;li&gt;去除各种小红点提示&lt;/li&gt;
&lt;li&gt;设置夜间模式&lt;/li&gt;
&lt;li&gt;阻止撤回消息&lt;/li&gt;
&lt;li&gt;屏蔽群&amp;amp;好友消息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;手机无需越狱&lt;/strong&gt;，项目 GitHub 地址: &lt;a href=&quot;https://github.com/yulingtianxia/FishChat&quot;&gt;FishChat&lt;/a&gt;，Make WeChat Great Again！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reverse Engineering" scheme="http://yulingtianxia.com/tags/Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title>DIY 双向滑动列表</title>
    <link href="http://yulingtianxia.com/blog/2017/01/16/DIY-a-simple-two-way-list/"/>
    <id>http://yulingtianxia.com/blog/2017/01/16/DIY-a-simple-two-way-list/</id>
    <published>2017-01-16T05:23:17.000Z</published>
    <updated>2017-02-27T12:59:40.000Z</updated>
    
    <content type="html">&lt;p&gt;公司项目中有个页面是双向滑动的列表，遂用 &lt;code&gt;UIScrollView&lt;/code&gt; 手撸了之，把一些 UI 和数据上的心得记录下来。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;需求简介&quot;&gt;&lt;a href=&quot;#需求简介&quot; class=&quot;headerlink&quot; title=&quot;需求简介&quot;&gt;&lt;/a&gt;需求简介&lt;/h2&gt;&lt;p&gt;UI 上的主要内容就是一个 &lt;code&gt;UITableView&lt;/code&gt;，其中一些 cell 内会嵌套一个横向滑动的 &lt;code&gt;ListView&lt;/code&gt;，&lt;code&gt;ListView&lt;/code&gt; 中包含一些尺寸相同可点击的 ItemView，ItemView 中的图片内容需要从网络加载。&lt;/p&gt;
&lt;p&gt;去掉一些跟本文内容无关的细枝末节，可以将原型抽象如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQStoryMemory/原型.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;蓝色的为 ItemView，白色为 &lt;code&gt;ListView&lt;/code&gt;，灰色为 TableView。&lt;/p&gt;
&lt;p&gt;竖向滑动会有分页加载和转菊花停顿，横向滑动无分页加载停顿，要求细腻丝滑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果只是单纯一个双向滑动列表，&lt;code&gt;UICollectionView&lt;/code&gt; 完全可以胜任。&lt;/strong&gt;但是真正的需求里还掺杂着很多其他 UI 元素，所以只能 DIY 了。&lt;/p&gt;
&lt;h2 id=&quot;数据请求&quot;&gt;&lt;a href=&quot;#数据请求&quot; class=&quot;headerlink&quot; title=&quot;数据请求&quot;&gt;&lt;/a&gt;数据请求&lt;/h2&gt;&lt;h3 id=&quot;格式设计&quot;&gt;&lt;a href=&quot;#格式设计&quot; class=&quot;headerlink&quot; title=&quot;格式设计&quot;&gt;&lt;/a&gt;格式设计&lt;/h3&gt;&lt;p&gt;因为主体 UI 为竖向列表嵌套横向列表，所以两个方向都需要有数据请求。&lt;/p&gt;
&lt;p&gt;为了方便叙述，这里简化下数据格式。&lt;/p&gt;
&lt;p&gt;ItemView 对应的数据 &lt;code&gt;ItemModel&lt;/code&gt; 包含唯一标识符 &lt;code&gt;itemID&lt;/code&gt; 和图片地址 &lt;code&gt;imageURL&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;ItemModel&lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSString *itemID; &lt;span class=&quot;comment&quot;&gt;// Item 唯一标识符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSString *imageURL; &lt;span class=&quot;comment&quot;&gt;// 封面图片 URL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ListView&lt;/code&gt; 对应的数据 &lt;code&gt;ListModel&lt;/code&gt; 包含分组唯一标识符 &lt;code&gt;listID&lt;/code&gt;，首屏需要展现的 Item 数据 &lt;code&gt;items&lt;/code&gt; 和列表所有 Item 的 ID &lt;code&gt;itemIDs&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;ListModel&lt;/span&gt;: NSObject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSString *listID; &lt;span class=&quot;comment&quot;&gt;// List 唯一标识符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSArray&amp;lt;ItemModel *&amp;gt; *items; &lt;span class=&quot;comment&quot;&gt;// 包含首屏前几个 Item 数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@property&lt;/span&gt; (nonatomic, strong) NSArray&amp;lt;NSString *&amp;gt; *itemIDs; &lt;span class=&quot;comment&quot;&gt;// 包含整行 List 所有 Item 的 ID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;竖向滑动时，TableView 会从后台分页获取 &lt;code&gt;ListModel&lt;/code&gt; 数组。&lt;code&gt;ListModel&lt;/code&gt; 中的 &lt;code&gt;items&lt;/code&gt; 填充了初始数据（此时不需要横向滑动拉取数据）。&lt;/p&gt;
&lt;p&gt;之所以不干脆在 &lt;code&gt;ListModel&lt;/code&gt; 装填所有 &lt;code&gt;ItemModel&lt;/code&gt;，是为了节省一次请求的数据流量，降低失败率。因为第一次展示页面时只需要填充前几个 ItemView 的数据，等用户横向滑动后再继续根据 &lt;code&gt;itemIDs&lt;/code&gt; 请求滑动到的 ItemView 对应数据。&lt;/p&gt;
&lt;h3 id=&quot;请求时机&quot;&gt;&lt;a href=&quot;#请求时机&quot; class=&quot;headerlink&quot; title=&quot;请求时机&quot;&gt;&lt;/a&gt;请求时机&lt;/h3&gt;&lt;p&gt;因为有了 &lt;code&gt;ListView&lt;/code&gt; 中所有 ItemView 对应的 ID，所以横向滑动没有分页逻辑，就没有转菊花的停顿时间用来请求网络数据和等待接受处理数据。虽然可以用 ID 请求到对应的 &lt;code&gt;ItemModel&lt;/code&gt;，但肯定不能在 &lt;code&gt;UITableView&lt;/code&gt; 的 datasource 回调中为每个 cell 去单独请求数据。所以 &lt;code&gt;ListView&lt;/code&gt; 即便直接使用 &lt;code&gt;UITableView&lt;/code&gt; 或 &lt;code&gt;UICollectionView&lt;/code&gt;，也无法享受到它带来的便捷，数据请求逻辑依然需要自己在 &lt;code&gt;UIScrollViewDelegate&lt;/code&gt; 中实现。&lt;strong&gt;所以 &lt;code&gt;ListView&lt;/code&gt; 是继承 &lt;code&gt;UIScrollView&lt;/code&gt; 自己 DIY 了一个横向滑动列表。如何合理控制数据请求次数成为了性能优化的重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;文中示例代码均经过简化，去除了无关信息，并使用 MRC。&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; `&lt;span class=&quot;title&quot;&gt;ListView&lt;/span&gt;` : &lt;span class=&quot;title&quot;&gt;UIScrollView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, retain) ListModel *model;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, retain) &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt;&amp;lt;ItemModel *&amp;gt; *itemModels;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemWidth = &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ItemView 宽度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemHeight = &lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ItemView 高度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemGap = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ItemView 间距&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; itemFirstToLeft = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 最左边的 ItemView 的 leftMargin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UIScrollViewDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidScroll:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (scrollView.contentSize.width == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算滚动的区间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; indexLeft = floorf((scrollView.contentOffset.x - itemFirstToLeft) / (itemWidth + itemGap)) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexLeft = MAX(indexLeft, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexLeft = MIN(indexLeft, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.model.itemIDs.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; indexRight = ceilf((scrollView.contentOffset.x - itemFirstToLeft + scrollView.width) / (itemWidth + itemGap));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexRight = MAX(indexRight, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    indexRight = MIN(indexRight, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.model.itemIDs.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; length = indexRight - indexLeft + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length = MAX(length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    length = MIN(length, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.model.itemIDs.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 加载区间内的 Item&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; loadItems:&lt;span class=&quot;built_in&quot;&gt;NSMakeRange&lt;/span&gt;(indexLeft, length)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewWillBeginDragging:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; reloadItemModels];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)scrollViewDidEndDecelerating:(&lt;span class=&quot;built_in&quot;&gt;UIScrollView&lt;/span&gt; *)scrollView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; reloadItemModels];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 在指定范围内加载可重用 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 针对本地没有数据的 itemID 请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param range 加载的范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)loadItems:(&lt;span class=&quot;built_in&quot;&gt;NSRange&lt;/span&gt;)range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 刷新页面数据，如果页面上有数据缺失，则再次请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)reloadItemModels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 省略一堆逻辑...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;ListView&lt;/code&gt; 中直接请求数据的位置有三处，但 &lt;code&gt;loadItems:&lt;/code&gt; 和 &lt;code&gt;reloadItemModels&lt;/code&gt; 这两个方法会被其他地方调用，所以可能间接请求数据的时机还是很多的。&lt;code&gt;reloadItemModels&lt;/code&gt; 方法也会在接收到网络数据时被调用。&lt;code&gt;loadItems:&lt;/code&gt; 计算滚动时屏幕上包含 &lt;code&gt;ItemView&lt;/code&gt; 的区间的方法完全是根据 frame 坐标来计算的，并且会预留出屏幕外左右各一个 &lt;code&gt;ItemView&lt;/code&gt;。&lt;code&gt;reloadItemModels&lt;/code&gt; 方法只是重新装载下数据，因为 &lt;code&gt;itemID&lt;/code&gt; 列表是完整的，但每个 &lt;code&gt;itemID&lt;/code&gt; 不一定都缓存到了对应的 &lt;code&gt;ItemModel&lt;/code&gt;，所以这个方法还对缺失数据进行请求，可以理解为『强刷』。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIScrollViewDelegate&lt;/code&gt; 中实现策略如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在列表滚动过程中计算当前显示在屏幕上的 ItemView 的区间，并调用 &lt;code&gt;loadItems:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在列表即将开始滚动和停止滚动的时刻，调用 &lt;code&gt;reloadItemModels&lt;/code&gt; 重新加载数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在计算需要加载的 &lt;code&gt;range&lt;/code&gt; 的时候需要注意一些边界数值的处理，擅用 &lt;code&gt;floorf&lt;/code&gt; 和 &lt;code&gt;ceilf&lt;/code&gt; 函数进行取舍，并用 &lt;code&gt;MAX()&lt;/code&gt; 和 &lt;code&gt;MIN()&lt;/code&gt; 来检查边界值合法性。&lt;/p&gt;
&lt;h2 id=&quot;可重用的-ItemView&quot;&gt;&lt;a href=&quot;#可重用的-ItemView&quot; class=&quot;headerlink&quot; title=&quot;可重用的 ItemView&quot;&gt;&lt;/a&gt;可重用的 &lt;code&gt;ItemView&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;需要自己实现一个类似 &lt;code&gt;UICollectionView&lt;/code&gt; 的 item 重用机制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/QQStoryMemory/reusableitem.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在用户横向滑动列表时，需要更新此时某个区间的 UI 和数据。这个任务是在 &lt;code&gt;loadItems:&lt;/code&gt; 中实现的，原理是计算出需要被加载的 itemID 数组，并与已有的数据进行比较。将不再需要显示在屏幕上的 &lt;code&gt;ItemView&lt;/code&gt; 进行回收（enqueue），并从根据 itemID 添加 &lt;code&gt;ItemView&lt;/code&gt; 对象（dequeue）。因为一开始只加载了首屏的 &lt;code&gt;ItemModel&lt;/code&gt; 数组，所以还需要对本地缓存中缺失的数据进行请求。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 在指定范围内加载可重用 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 针对本地没有数据的 itemID 请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param range 加载的范围&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)loadItems:(NSRange)range&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray&amp;lt;NSString *&amp;gt; *&lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad &lt;/span&gt;= [[&lt;span class=&quot;keyword&quot;&gt;self.model.itemIDs &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;subarrayWithRange:range] &lt;/span&gt;mutableCopy]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMutableArray&amp;lt;&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&amp;gt; *&lt;span class=&quot;keyword&quot;&gt;itemsToEnqueue &lt;/span&gt;= [NSMutableArray array]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 比较需要加载的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;数组和已经显示过的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;数组，计算出需要新添加的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;和不再需要显示而被回收的 &lt;span class=&quot;keyword&quot;&gt;Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    for (&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;self.visibleItems) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSString *&lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad &lt;/span&gt;= nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (NSString *&lt;span class=&quot;keyword&quot;&gt;itemIDToLoad &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;itemIDToLoad &lt;/span&gt;isEqualToString:&lt;span class=&quot;keyword&quot;&gt;item.itemID]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;itemIDToLoad;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;itemsToEnqueue &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad &lt;/span&gt;removeObject:&lt;span class=&quot;keyword&quot;&gt;itemIDAlreadyLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 回收不需要显示的 &lt;span class=&quot;keyword&quot;&gt;Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    for (&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;itemsToEnqueue) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;removeFromSuperview]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self.visibleItems &lt;/span&gt;removeObject:&lt;span class=&quot;keyword&quot;&gt;item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;enqueueReusableItem:&lt;span class=&quot;keyword&quot;&gt;item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 添加需要显示的 &lt;span class=&quot;keyword&quot;&gt;Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    NSMutableArray&amp;lt;NSString *&amp;gt; *&lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest &lt;/span&gt;= [NSMutableArray array]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (NSString *&lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addItemViewWithID:itemID]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:itemID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 针对本地没有数据的 &lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;请求数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest.count &lt;/span&gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 向后台请求 &lt;span class=&quot;keyword&quot;&gt;itemIDsToRequest &lt;/span&gt;对应数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;itemIDsToLoad &lt;/span&gt;release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;addItemViewWithID:&lt;/code&gt; 负责从 reusable items 获取 &lt;code&gt;ItemView&lt;/code&gt; 并设置 &lt;code&gt;frame&lt;/code&gt; 添加到 &lt;code&gt;ListView&lt;/code&gt; 中。因为 &lt;code&gt;ItemView&lt;/code&gt; 是重用的，所以如果 dequeue 出的对象正好是上一次刚刚 enqueue 的对象，那么就不用重新填充数据了；否则需要重置 &lt;code&gt;ItemView&lt;/code&gt; 的占位图，并填充新数据。&lt;code&gt;ItemView&lt;/code&gt; 被填充了数据后会对数据进行处理，比如异步拉取图片资源。&lt;/p&gt;
&lt;p&gt;当无法向 &lt;code&gt;ItemView&lt;/code&gt; 填充数据时，&lt;code&gt;addItemViewWithID:&lt;/code&gt; 会返回 &lt;code&gt;NO&lt;/code&gt;，暗示调用方需要用该 itemID 请求数据。&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 添加 itemID 对应的 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param itemID @param itemID 视频 ID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @return 是否成功向 Item 填充数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL)addItemViewWithID:(NSString &lt;/span&gt;*)&lt;span class=&quot;keyword&quot;&gt;itemID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;dequeueReusableItem]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSUInteger index = [&lt;span class=&quot;keyword&quot;&gt;self.model.itemIDs &lt;/span&gt;indexOfObject:&lt;span class=&quot;keyword&quot;&gt;itemID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGFloat originX = &lt;span class=&quot;keyword&quot;&gt;itemFirstToLeft &lt;/span&gt;+ index * (&lt;span class=&quot;keyword&quot;&gt;itemWidth &lt;/span&gt;+ &lt;span class=&quot;keyword&quot;&gt;itemGap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;item.frame &lt;/span&gt;= CGRectMake(originX, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;itemWidth, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;itemHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addSubview:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.visibleItems &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;item.itemID &lt;/span&gt;isEqualToString:&lt;span class=&quot;keyword&quot;&gt;itemID]) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;useDefaultCover]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;item.itemID &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;itemID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for (&lt;span class=&quot;keyword&quot;&gt;ItemModel &lt;/span&gt;*model in &lt;span class=&quot;keyword&quot;&gt;self.itemModels)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; ([model.&lt;span class=&quot;keyword&quot;&gt;itemID &lt;/span&gt;isEqualToString:&lt;span class=&quot;keyword&quot;&gt;itemID])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;item.model &lt;/span&gt;= model&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return NO&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可重用 Item 列表的 dequeue 和 enqueue 操作实现如下，dequeue 也负责在可重用列表不够用时创建新的 &lt;code&gt;ItemView&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 从可重用队列中回收 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @param item  回收的 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)enqueueReusableItem:(&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*)&lt;span class=&quot;keyword&quot;&gt;item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.reusableItems &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 从可重用队列中取出 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; @return  取出的 Item&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*)dequeueReusableItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;*&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;self.reusableItems.firstObject &lt;/span&gt;retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;item) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self.reusableItems &lt;/span&gt;removeObject:&lt;span class=&quot;keyword&quot;&gt;item];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;= [&lt;span class=&quot;keyword&quot;&gt;ItemView &lt;/span&gt;new]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return [&lt;span class=&quot;keyword&quot;&gt;item &lt;/span&gt;autorelease]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;感受&quot;&gt;&lt;a href=&quot;#感受&quot; class=&quot;headerlink&quot; title=&quot;感受&quot;&gt;&lt;/a&gt;感受&lt;/h2&gt;&lt;p&gt;不得不承认一开始想 DIY 个列表还是有装逼嫌疑的，但后来发现还是 DIY 来的爽，好多事情都掌握在自己手里，批量请求数据也更方便（虽说直接用 &lt;code&gt;UICollectionView&lt;/code&gt; 也可以办到，只是有些绕，且依然得自己实现 &lt;code&gt;UIScrollViewDelegate&lt;/code&gt;）。最大的收获就是对 &lt;code&gt;UIScrollView&lt;/code&gt; 的理解更深刻，对 &lt;code&gt;UITableView&lt;/code&gt; 的实现机制有了掌握。&lt;/p&gt;
&lt;p&gt;还有就是在做之前把一些事情想的太简单了，然后开始动工后就会发现：卧槽还真就是这么简单！23333333&lt;/p&gt;
&lt;p&gt;其实还是遇到了一些项目中的 API 上的坑的，比如工程里的异步加载图片 ImageView 会忽略第二次相同的 url 请求，导致调试时花了些时间。&lt;/p&gt;
&lt;p&gt;曾经还设想把可重用的范围扩大到整个屏幕，也就是屏幕上所有横向滑动的 &lt;code&gt;ListView&lt;/code&gt; 全都共用一个可重用列表。但后来计算一下这样做收益不高，毕竟横向滑动的 &lt;code&gt;ListView&lt;/code&gt; 在正常滑动时可重用列表中会有一到两个 &lt;code&gt;ItemView&lt;/code&gt; 对象，而全屏最多同时存在 5 个 &lt;code&gt;ListView&lt;/code&gt;，节省的内存很有限。&lt;/p&gt;
&lt;p&gt;其实还有许多细节实现没有叙述，比如记录 &lt;code&gt;ListView&lt;/code&gt; 上次横向滑动位置，因为 &lt;code&gt;ListView&lt;/code&gt; 是加在全屏 TableView 的每个 cell 中，而 cell 也是重用的，所以上次滑动偏移是需要每次 cell 消失时记录和 cell 出现时刷新的。&lt;/p&gt;
&lt;p&gt;在公司项目用了快半年的 MRC，有时还要切换到 ARC 做做其他事情，或者来一发 Swift 玩票儿，真是一种奇(dan)妙(teng)的体验。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;公司项目中有个页面是双向滑动的列表，遂用 &lt;code&gt;UIScrollView&lt;/code&gt; 手撸了之，把一些 UI 和数据上的心得记录下来。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>多媒体编辑模块架构设计</title>
    <link href="http://yulingtianxia.com/blog/2016/12/29/Multimedia-Edit-Module-Architecture-Design/"/>
    <id>http://yulingtianxia.com/blog/2016/12/29/Multimedia-Edit-Module-Architecture-Design/</id>
    <published>2016-12-29T01:37:04.000Z</published>
    <updated>2016-12-28T15:48:23.000Z</updated>
    
    <content type="html">&lt;p&gt;本文主要讲了下我在工作时对项目中多媒体编辑模块的架构设计心得，并剖析了一部分原理。目前框架主流程已经验证跑通，所以把一些关键的思想和概念记录下来。涉及到公司机密的已经略去，只说说思想，代码也就不公开了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;多媒体编辑模块重构概要&quot;&gt;&lt;a href=&quot;#多媒体编辑模块重构概要&quot; class=&quot;headerlink&quot; title=&quot;多媒体编辑模块重构概要&quot;&gt;&lt;/a&gt;多媒体编辑模块重构概要&lt;/h2&gt;&lt;p&gt;多媒体编辑包含了对图片和视频的编辑，比如在某个位置添加一些图片或者涂鸦等操作。这里讲的其实是一个跟移动端平台无关的架构，包含了操作面板组件化、手势引擎、业务解耦等内容。具体对图片和视频等内容的渲染等操作不做讨论。&lt;/p&gt;
&lt;p&gt;这里设想的场景是：用户录制好一段视频或拍照后进入编辑模块，编辑面板下方有几个按钮，点击后可以进入某种编辑模式，比如添加文字、表情、涂鸦、音乐等编辑功能。右下角会有个发表按钮，左上角有个重拍按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/原型.png&quot; alt=&quot;原型&quot;&gt;&lt;/p&gt;
&lt;p&gt;设计一个模块首先要明确它的职责，输入和输出都是什么。多媒体编辑简介如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/简介.png&quot; alt=&quot;简介&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件化总体设计&quot;&gt;&lt;a href=&quot;#组件化总体设计&quot; class=&quot;headerlink&quot; title=&quot;组件化总体设计&quot;&gt;&lt;/a&gt;组件化总体设计&lt;/h2&gt;&lt;p&gt;在明确了多媒体编辑模块的本质是 UI 操作面板后，首先要从视图层级入手，设计好整个模块各职责对应的层级，并兼顾触摸事件的传递。在视图层级交互策略设计好后，就可以进行 UML 的设计了。这次，要拒绝不规范的编程习惯，并对耦合几乎零容忍！将编辑组件与 EditView 解耦，把一些基础逻辑抽象出来，与具体业务剥离开。减少了多人改同一份代码带来的风险，并能更快定位bug来源。&lt;/p&gt;
&lt;h3 id=&quot;视图层级图&quot;&gt;&lt;a href=&quot;#视图层级图&quot; class=&quot;headerlink&quot; title=&quot;视图层级图&quot;&gt;&lt;/a&gt;视图层级图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/框架总体视图层级设计.png&quot; alt=&quot;框架总体视图层级设计&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;UML-架构图&quot;&gt;&lt;a href=&quot;#UML-架构图&quot; class=&quot;headerlink&quot; title=&quot;UML 架构图&quot;&gt;&lt;/a&gt;UML 架构图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/多媒体编辑重构UML.png&quot; alt=&quot;多媒体编辑重构UML&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;手势识别引擎&quot;&gt;&lt;a href=&quot;#手势识别引擎&quot; class=&quot;headerlink&quot; title=&quot;手势识别引擎&quot;&gt;&lt;/a&gt;手势识别引擎&lt;/h2&gt;&lt;p&gt;手势引擎既要『大一统』式地管理，又要与具体响应手势的元素视图进行解耦，做法就是统一接口，制定标准。所有想响应手势的视图都需要继承 &lt;code&gt;InteractionElementView&lt;/code&gt; 或者将其作为 &lt;code&gt;parentView&lt;/code&gt;。可以配置元素对象来实现对手势响应的规则，更加灵活自如，而且零耦合。有关手势命中区域的计算方法请阅读我之前发表的一篇文章：&lt;a href=&quot;http://yulingtianxia.com/blog/2016/08/29/Some-Experience-of-Gesture/&quot;&gt;处理手势冲突和错乱的一点经验&lt;/a&gt;，我在这里详细阐述了各种情形下的手势命中计算方法。下图为手势识别引擎策略的流程图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/手势识别引擎.png&quot; alt=&quot;手势识别引擎&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;组件设计&quot;&gt;&lt;a href=&quot;#组件设计&quot; class=&quot;headerlink&quot; title=&quot;组件设计&quot;&gt;&lt;/a&gt;组件设计&lt;/h2&gt;&lt;h3 id=&quot;组件与元素&quot;&gt;&lt;a href=&quot;#组件与元素&quot; class=&quot;headerlink&quot; title=&quot;组件与元素&quot;&gt;&lt;/a&gt;组件与元素&lt;/h3&gt;&lt;p&gt;组件的 &lt;code&gt;baseZIndex&lt;/code&gt; 定义了组件所创建元素的 &lt;code&gt;zIndex&lt;/code&gt; 的基础值。元素容器会有一个计数器 &lt;code&gt;nextZIndexOfElement&lt;/code&gt;，每次获取时会自动加一。所以元素的 &lt;code&gt;zIndex&lt;/code&gt; 等于 &lt;code&gt;baseZIndex&lt;/code&gt; 与 &lt;code&gt;nextZIndexOfElement&lt;/code&gt; 之和。&lt;/p&gt;
&lt;p&gt;之所以要给元素定义 &lt;code&gt;zIndex&lt;/code&gt; 这个属性是考虑到某些元素可能会在元素容器与组件容器之间切换层级。比如文字元素就是这种例子。所以当某个元素重新添加到元素容器后，元素容器需要根据每个元素的 &lt;code&gt;zIndex&lt;/code&gt; 属性来重新排序层级顺序。&lt;/p&gt;
&lt;h3 id=&quot;组件与-EditView&quot;&gt;&lt;a href=&quot;#组件与-EditView&quot; class=&quot;headerlink&quot; title=&quot;组件与 EditView&quot;&gt;&lt;/a&gt;组件与 EditView&lt;/h3&gt;&lt;p&gt;组件不是必须要向 &lt;code&gt;MultimediaEditView&lt;/code&gt; 中的元素容器中添加元素的，它也可以不创建任何元素，而是直接操作多媒体资源（比如选择一些滤镜），也可以是做些其他事情，比如保存多媒体资源到本地。&lt;strong&gt;&lt;code&gt;MultimediaEditView&lt;/code&gt; 只是给组件提供了一个操作入口，而组件为 &lt;code&gt;MultimediaEditView&lt;/code&gt; 提供了很强的拓展性&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;组件与数据&quot;&gt;&lt;a href=&quot;#组件与数据&quot; class=&quot;headerlink&quot; title=&quot;组件与数据&quot;&gt;&lt;/a&gt;组件与数据&lt;/h3&gt;&lt;p&gt;每个组件都有自己唯一的 ID，默认是类名。组件的按钮被点击后，会将自己设为 &lt;code&gt;currentEditComponent&lt;/code&gt;，&lt;code&gt;MultimediaEditView&lt;/code&gt; 会调用上一个组件的 &lt;code&gt;stop&lt;/code&gt; 方法，然后调用新组件的 &lt;code&gt;start&lt;/code&gt; 方法。组件在 &lt;code&gt;start&lt;/code&gt; 和 &lt;code&gt;stop&lt;/code&gt; 方法中完成组件内容的装载和卸载。组件产生的用户数据可以存放在 &lt;code&gt;componentInfos&lt;/code&gt; 中，可用于之后的发表等流程。&lt;code&gt;reset&lt;/code&gt; 方法用于清除组件数据以及持有的状态和元素。继承于 &lt;code&gt;MultimediaEditComponent&lt;/code&gt; 的子类需要覆写这些主要的方法。组件也可以直接操作多媒体资源，所以也可能会跟其他模块有数据流动。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/组件的数据流动.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;业务方&quot;&gt;&lt;a href=&quot;#业务方&quot; class=&quot;headerlink&quot; title=&quot;业务方&quot;&gt;&lt;/a&gt;业务方&lt;/h2&gt;&lt;p&gt;具体的业务一般是需要继承 &lt;code&gt;MultimediaEditView&lt;/code&gt; 加入一些自己特有的逻辑，并在自己的 ViewController 创建和注册组件。如果某个业务需要对具体的组件进行个性化修改，我建议具体的组件也需要再继承一下。如果以后所有业务统一组件的行为，那也可以再把之前子类的逻辑迁移回基类。这样做的好处是避免某个业务直接修改基类影响到所有业务的风险，之前就有过先例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MultimediaEdit/业务方的使用.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要讲了下我在工作时对项目中多媒体编辑模块的架构设计心得，并剖析了一部分原理。目前框架主流程已经验证跑通，所以把一些关键的思想和概念记录下来。涉及到公司机密的已经略去，只说说思想，代码也就不公开了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://yulingtianxia.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>pbxprojHelper--Xcode工程文件助手</title>
    <link href="http://yulingtianxia.com/blog/2016/11/28/pbxprojHelper/"/>
    <id>http://yulingtianxia.com/blog/2016/11/28/pbxprojHelper/</id>
    <published>2016-11-27T16:03:08.000Z</published>
    <updated>2016-11-27T17:32:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt; 可以帮你快速配置 Xcode 工程文件，省去麻烦的人工手动操作。项目开源，使用 Swift 开发，详细介绍请见&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用说明&lt;/a&gt;。除了 Mac App 外还提供了命令行工具 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/releases/download/1.1.3/pbxproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;pbxproj&lt;/code&gt;&lt;/a&gt;，它集成了 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt; 的核心功能，同样简易实用。&lt;/p&gt;
&lt;p&gt;因为 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README_ZH&lt;/a&gt; 中对使用方法已经讲得很详细了，这里重点说的是产品方案和技术实现。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;产品方案&quot;&gt;&lt;a href=&quot;#产品方案&quot; class=&quot;headerlink&quot; title=&quot;产品方案&quot;&gt;&lt;/a&gt;产品方案&lt;/h2&gt;&lt;h3 id=&quot;为什么造这个工具？&quot;&gt;&lt;a href=&quot;#为什么造这个工具？&quot; class=&quot;headerlink&quot; title=&quot;为什么造这个工具？&quot;&gt;&lt;/a&gt;为什么造这个工具？&lt;/h3&gt;&lt;p&gt;在开发公司的项目时，check out 代码到本地后需要修改工程文件。比如更改证书和 Bundle Identifier、删除一些编译不过的 Target，修改 Build Settings 等配置。重复手动修改这些配置的场景很多：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一次 check out 新的分支，需要使用自己的配置。&lt;/li&gt;
&lt;li&gt;增删代码文件前会先 revert project.pbxproj 文件，修改完成后再 commit。此时本地工程文件需要重新配置。&lt;/li&gt;
&lt;li&gt;没有增删代码文件但 project.pbxproj 文件有冲突（conflict），需要先 revert 后重新配置工程文件。&lt;/li&gt;
&lt;li&gt;一些自动化流程（比如 CI）每次执行都需要特定的编译选项和证书来编包。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而我本人最常遇到的场景是 1 和 2，因为不能用公司的证书配置来编译，一些跟苹果开发者账号相关的功能导致一些 target 编译不过，还有些 debug 模式下需要设置的编译选项。所以每次都需要手动修改 Xcode 工程配置，很是麻烦。&lt;/p&gt;
&lt;h3 id=&quot;需求！&quot;&gt;&lt;a href=&quot;#需求！&quot; class=&quot;headerlink&quot; title=&quot;需求！&quot;&gt;&lt;/a&gt;需求！&lt;/h3&gt;&lt;p&gt;可以说开发这个工具一开始完全就是为了解决我个人的痛点的，基本没考虑做成功能强大的通用工具。虽然做的事情比较小众，但也能满足一批苹果开发者的需求了。我把需求分为以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将程序员对工程文件做出的配置修改记录下来，并保存成 JSON 文件&lt;/li&gt;
&lt;li&gt;下次使用时直接导入 JSON 文件，将配置修改应用到当前的工程文件上&lt;/li&gt;
&lt;li&gt;支持回滚操作&lt;/li&gt;
&lt;li&gt;支持工程文件内容的预览、过滤&lt;/li&gt;
&lt;li&gt;快速切换最近使用的工程&lt;/li&gt;
&lt;li&gt;提供命令行工具&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以说 1 和 2 是刚需，也是常用功能。3、4 和 5 是辅助功能，6 是附加需求。我平时最常碰到的需求点就是 2 和 5 了。&lt;/p&gt;
&lt;h2 id=&quot;技术实现&quot;&gt;&lt;a href=&quot;#技术实现&quot; class=&quot;headerlink&quot; title=&quot;技术实现&quot;&gt;&lt;/a&gt;技术实现&lt;/h2&gt;&lt;p&gt;关于 Xcode 工程文件的介绍，请参考我之前写的 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/&quot;&gt;Let’s Talk About project.pbxproj&lt;/a&gt;。本篇文章可以算作是它的续集。&lt;/p&gt;
&lt;p&gt;我把工程文件相关的底层方法都封装在 &lt;code&gt;PropertyListHandler&lt;/code&gt; 类中，它们跟界面无关。还有一些工具类和方法写到 &lt;code&gt;Utils&lt;/code&gt; 文件中。&lt;/p&gt;
&lt;h3 id=&quot;对比工程文件&quot;&gt;&lt;a href=&quot;#对比工程文件&quot; class=&quot;headerlink&quot; title=&quot;对比工程文件&quot;&gt;&lt;/a&gt;对比工程文件&lt;/h3&gt;&lt;p&gt;想要记录工程文件的修改是很难的，所以只能是比较下两个工程文件的差异。这里不是对比文件那种简单的 &lt;code&gt;diff&lt;/code&gt; 操作，而是要记录具体针对哪个配置项做了『增删改』。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;工程文件的内容可以比作一颗多叉树，的根节点是字典，其余中间节点都是字典的键。数组的元素肯定是字符串（叶子节点），字典的键值对则可能继续拓展出子树，也可能是叶子节点。&lt;/strong&gt;在拿到两个工程文件的数据后，就需要对两棵树的每个层级进行对比。对比两颗树的差异算法不难实现，核心思想是：&lt;strong&gt;在对比中间节点时，如果内容相同那就递归比较下一层，否则就记为『增』或『删』&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;而比较同一层级中间节点的差异，直接用 &lt;code&gt;Set&lt;/code&gt; 是最方便的了。我将两棵树的差异保存在字典 &lt;code&gt;difference&lt;/code&gt; 中，在内嵌方法中又实现了个尾递归。递归过程中需要记录中间节点作为路径，因为生成的路径需要保存到对比结果中。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 将 project 与 other project 做比较&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter project1: 作为比较的 project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter project2: 被参照的 project&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - returns: project1 相对于 project2 的变化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project1&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;], &lt;span class=&quot;title&quot;&gt;withOtherProject&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project2&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;]) -&amp;gt; &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; difference = [&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;](), &lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;](), &lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt;: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;]()]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// 将两个数据对象作递归比较，将最深层次节点的差异保存到 difference 中。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/// - Parameters:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///   - data1: 第一个数据对象，数组或字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///   - data2: 第二个数据对象，数组或字典&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;///   - parentKeyPath: 父路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data data1: Any?, withOtherData data2: Any?, parentKeyPath: String)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dictionary1 = data1 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;], &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dictionary2 = data2 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set1 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(dictionary1.keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set2 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(dictionary2.keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set1.subtracting(set2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = dictionary1[key], difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = [key: value]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; value = dictionary1[key], &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; insertDictionary = difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    insertDictionary[key] = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = insertDictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set2.subtracting(set1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = [key]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; removeArray = difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    removeArray.append(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = removeArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set1.intersection(set2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; keyPath = parentKeyPath == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ? key : &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(parentKeyPath)&lt;/span&gt;.&lt;span class=&quot;subst&quot;&gt;\(key)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// values are both String, leaf node&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str1 = dictionary1[key] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; str2 = dictionary2[key] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; str1 != str2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        difference[&lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt;]?[keyPath] = str1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// continue compare subtrees&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    compare(data: dictionary1[key], withOtherData: dictionary2[key], parentKeyPath: keyPath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array1 = data1 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;], &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array2 = data2 &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set1 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(array1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; set2 = &lt;span class=&quot;type&quot;&gt;Set&lt;/span&gt;(array2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set1.subtracting(set2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = [element]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; insertArray = difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    insertArray.append(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;]?[parentKeyPath] = insertArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; element &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; set2.subtracting(set1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] == &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = [element]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; removeArray = difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    removeArray.append(element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    difference[&lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;]?[parentKeyPath] = removeArray&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compare(data: project1, withOtherData: project2, parentKeyPath: &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; difference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段看似很长的代码其实逻辑超级简单，就是分别针对字典和数组两种情况进行比较而已，弱智的一逼。需要注意的是数组内容作为叶子节点，只存在『增』和『删』两种情况。&lt;/p&gt;
&lt;p&gt;每次递归都将 &lt;code&gt;parentKeyPath&lt;/code&gt; 与当前节点的值 &lt;code&gt;key&lt;/code&gt; 用 &lt;code&gt;.&lt;/code&gt; 拼接在一起。也就是说最后得到的路径是 &lt;code&gt;A.B.C&lt;/code&gt; 这种格式。&lt;/p&gt;
&lt;p&gt;可以看出生成的对比结果是个字典，包含三个键值对，键分别是 &lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;modify&lt;/code&gt;，值为字典。&lt;/p&gt;
&lt;h3 id=&quot;应用-JSON-配置&quot;&gt;&lt;a href=&quot;#应用-JSON-配置&quot; class=&quot;headerlink&quot; title=&quot;应用 JSON 配置&quot;&gt;&lt;/a&gt;应用 JSON 配置&lt;/h3&gt;&lt;p&gt;因为生成的 JSON 配置文件具有一定格式，所以必须按照格式规则来应用这些配置到工程文件中。最关键的是在上一步中生成的路径格式为 &lt;code&gt;A.B.C&lt;/code&gt;，且路径内容是未知的，需要实时处理。所以我写了个方法来解析路径，步入到路径最底层后提供闭包来对路径的值进行修改。假设 &lt;code&gt;keyPath&lt;/code&gt; 为路径字符串内容，方法实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt; = keyPath.components(separatedBy: &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 假如 &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; 为 &lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt; keyPath 为 &lt;span class=&quot;string&quot;&gt;&quot;A.B.C&quot;&lt;/span&gt;，目的是让 value[A][B][C] = data。需要沿着路径深入，使用闭包修改叶子节点的数据，递归过程中逐级向上返回修改后的结果，完成整个路径上数据的更新。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - parameter &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;:    路径深度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - parameter value:    当前路径对应的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - parameter &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;: 路径终点所要做的操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;///&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// - &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; 当前路径层级修改后的值&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func walkIn(atIndex &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;: Int, withCurrentValue value: Any, &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;: (Any) -&amp;gt; Any?) -&amp;gt; Any? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt; &amp;lt; &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; key = &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt;[&lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dicValue = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [Strin&lt;span class=&quot;variable&quot;&gt;g:&lt;/span&gt; Any],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nextValue = dicValue[key] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var resultValue = dicValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            resultValue[key] = walkIn(atIndex: &lt;span class=&quot;built_in&quot;&gt;index&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, withCurrentValue: nextValue, &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; resultValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Wrong KeyPath&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;complete&lt;/span&gt;(value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法会将当前层级（&lt;code&gt;index&lt;/code&gt;）路径的节点作为键（&lt;code&gt;key&lt;/code&gt;），并查找字典中该键对应的值（&lt;code&gt;nextValue&lt;/code&gt;）。然后递归遍历下一层，直至步入到路径（&lt;code&gt;keypath&lt;/code&gt;）最末端。此时会执行传入的 &lt;code&gt;complete&lt;/code&gt; 闭包，并将结果作为该方法的返回值。这样在对路径最末端的节点值做出修改后就可以逐层同步上去，最后完成对整条路径的修改。&lt;/p&gt;
&lt;p&gt;如果能直接给 &lt;code&gt;value[A][B][C]&lt;/code&gt; 赋值就好了，但是这是不可能的。因为路径内容是未知的，这样的代码不可能写死的，只能动态地递归进去，并在调用后将修改内容返回上层。&lt;/p&gt;
&lt;p&gt;之前提到过 JSON 文件格式中包含三种命令：&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;modify&lt;/code&gt;。所以在实现 &lt;code&gt;complete&lt;/code&gt; 方法的时候需要针对这三种命令分别处理，每种命令还要区分字典和数组两种数据类型。这里处理的逻辑基本是上一步的逆逻辑，很容易理解。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 这个方法可厉（dan）害（teng）咯，把 json 配置数据应用到工程文件数据上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter json:        配置文件数据，用于对工程文件的增删改操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter projectData: 工程文件数据，project.pbxproj 的内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;(&lt;span class=&quot;title&quot;&gt;json&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;]], &lt;span class=&quot;title&quot;&gt;onProjectData&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;projectData&lt;/span&gt;: [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;]) -&amp;gt; [&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Any&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appliedData = projectData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 遍历 JSON 中的三个命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (command, arguments) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; json &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	     &lt;span class=&quot;comment&quot;&gt;// 遍历每个命令中的路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (keyPath, data) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arguments &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; keys = keyPath.components(separatedBy: &lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;walkIn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(atIndex index: Int, withCurrentValue value: Any, complete: &lt;span class=&quot;params&quot;&gt;(Any)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;?) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;? &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ... 此处省略&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 调用 `walkIn` 方法，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = walkIn(atIndex: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, withCurrentValue: appliedData, complete: &amp;#123; (value) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;? &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// value 为路径叶子节点的数据。根据 command 的不同，处理的规则也不一样：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; command &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 添加数据时 data 和 value 类型要统一，要么都是数组，要么都是字典，否则不做变更&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;insert&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dictionary = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dicData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (dataKey, dataValue) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; dicData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            dictionary[dataKey] = dataValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arrayData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        array.append(contentsOf: arrayData)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 移除数据时被移除的 data 为包含数据或键的数组，否则不做变更&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;remove&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dictionary = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arrayData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; removeData &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arrayData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeKey = removeData &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                dictionary[removeKey] = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = value &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arrayData = data &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; removeData &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; arrayData &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeIndex = removeData &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ..&amp;lt; array.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt;).&lt;span class=&quot;built_in&quot;&gt;contains&lt;/span&gt;(removeIndex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    array.remove(at: removeIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeElement = removeData &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; removeIndex = array.index(of: removeElement) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                array.remove(at: removeIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;// 直接用 data 替换 value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;modify&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                appliedData = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; appliedData&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 JSON 文件内容层级较深，所以需要先遍历最外面的字典。一共有三个键值对，分别对应 &lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;remove&lt;/code&gt; 和 &lt;code&gt;modify&lt;/code&gt; 三个命令（&lt;code&gt;command&lt;/code&gt;）及其参数（&lt;code&gt;arguments&lt;/code&gt;）。每种命令的参数都是由『(路径:字典或数组)』这样格式的键值对组成。路径对应的值的类型需要与 JSON 文件中一样。&lt;/p&gt;
&lt;p&gt;在遍历的同时修改工程文件数据的内容，这里使用了 Swift 的嵌套方法和尾随闭包语法。这总语法虽然用着爽，但是对代码的可读性也有所降低。&lt;/p&gt;
&lt;h3 id=&quot;操作工程文件&quot;&gt;&lt;a href=&quot;#操作工程文件&quot; class=&quot;headerlink&quot; title=&quot;操作工程文件&quot;&gt;&lt;/a&gt;操作工程文件&lt;/h3&gt;&lt;p&gt;可以用 &lt;code&gt;PropertyListSerialization&lt;/code&gt; 来（反）序列化 project.pbxproj 文件的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fileData = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; Data(contentsOf: url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; plist = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; PropertyListSerialization.propertyList(from: fileData, option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; .mutableContainersAndLeaves, forma&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; nil)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; PropertyListSerialization.data(fromPropertyLis&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt;, forma&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; .xml, option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; data.&lt;span class=&quot;keyword&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;: url, option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt; .atomic)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将工程文件数据写入磁盘表面上看起来是一件再简单不过的事情，但其实这里面包含编码问题和备份机制。&lt;/p&gt;
&lt;h4 id=&quot;编码问题&quot;&gt;&lt;a href=&quot;#编码问题&quot; class=&quot;headerlink&quot; title=&quot;编码问题&quot;&gt;&lt;/a&gt;编码问题&lt;/h4&gt;&lt;p&gt;直接把工程文件数据写入文件后，中文会有乱码。需要做的是把中文内容的 Unicode 的标量值提取出并转成 numeric character reference（NCR）。”&amp;amp;#dddd” 的一串字符是 HTML、XML 等 SGML 类语言的转义序列（escape sequence），它们不是『编码』。&lt;/p&gt;
&lt;p&gt;下面的方法可以将生成的工程文件中文内容替换成 NCR：&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func handleEncode(fileURL: URL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func encodeString(_ str: String) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var result = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;scalar&lt;/span&gt; in &lt;span class=&quot;comment&quot;&gt;str.unicodeScalars &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if &lt;span class=&quot;comment&quot;&gt;scalar.value &amp;gt; 0x4e00 &amp;amp;&amp;amp; scalar.value &amp;lt; 0x9fff &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result &lt;span class=&quot;comment&quot;&gt;+= String(format:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&quot;&amp;amp;#%04d;&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;, scalar.value)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                result &lt;span class=&quot;comment&quot;&gt;+= scalar.description&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &lt;span class=&quot;comment&quot;&gt;result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do &lt;span class=&quot;comment&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var &lt;span class=&quot;comment&quot;&gt;txt = try String(contentsOf: fileURL, encoding: .utf8)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        txt &lt;span class=&quot;comment&quot;&gt;= encodeString(txt)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &lt;span class=&quot;comment&quot;&gt;txt.write(to: fileURL, atomically: true, encoding: .utf8)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; catch &lt;span class=&quot;comment&quot;&gt;let error &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;translate chinese characters to mathematical symbols error: \(error.localizedDescription)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;备份机制&quot;&gt;&lt;a href=&quot;#备份机制&quot; class=&quot;headerlink&quot; title=&quot;备份机制&quot;&gt;&lt;/a&gt;备份机制&lt;/h4&gt;&lt;p&gt;既然是要生成新的工程文件来替换原来的工程文件，备份机制肯定不能少。当前的备份机制仅仅备份上次修改的文件，这是考虑到备份历史文件会占用大量磁盘的问题。比如大一些的工程文件可能占用10M 甚至更多的空间，频繁操作产生的备份会很多。&lt;/p&gt;
&lt;p&gt;在生成备份文件和使用备份文件还原时，都需要获取到当前工程文件对应的备份文件 URL。真正的主角 project.pbxproj 被包含在工程文件（夹）内部，所以要根据文件后缀名来决定如何处理。下面的私有方法会将传入的 URL 引用参数修改为真正的 project.pbxproj 文件 URL，并返回备份文件的 URL：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 返回指定文件对应的备份文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - parameter url: 文件 URL，如果是工程文件，会被修改为 project.pbxproj 文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;///&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// - returns: 备份文件路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fileprivate class func backupURLOf(projectURL url: inout URL) -&amp;gt; URL &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; backupURL = URL(fileURLWithPath: NSHomeDirectory()).appendingPathComponent(&lt;span class=&quot;string&quot;&gt;&quot;Documents&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; url&lt;span class=&quot;selector-class&quot;&gt;.pathExtension&lt;/span&gt; == &lt;span class=&quot;string&quot;&gt;&quot;xcodeproj&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backupURL.appendPathComponent(url.lastPathComponent)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        backupURL.appendPathExtension(&lt;span class=&quot;string&quot;&gt;&quot;project.pbxproj&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url.appendPathComponent(&lt;span class=&quot;string&quot;&gt;&quot;project.pbxproj&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let count = url&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.count&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; count &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            backupURL.appendPathComponent(url&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;[count-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            backupURL.appendPathExtension(url&lt;span class=&quot;selector-class&quot;&gt;.pathComponents&lt;/span&gt;[count-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    backupURL.appendPathExtension(&lt;span class=&quot;string&quot;&gt;&quot;backup&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return backupURL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个方法只干一件事，这个方法设计的很不好，干了两件事，别学我这么做。我这么做是为了省代码量。（狡辩，逃）&lt;/p&gt;
&lt;h3 id=&quot;预览和过滤工程文件内容&quot;&gt;&lt;a href=&quot;#预览和过滤工程文件内容&quot; class=&quot;headerlink&quot; title=&quot;预览和过滤工程文件内容&quot;&gt;&lt;/a&gt;预览和过滤工程文件内容&lt;/h3&gt;&lt;p&gt;主界面如下，在展示所有数据的同时，可以在 Filter 文本框中输入关键词来过滤数据：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yulingtianxia/pbxprojHelper/master/images/MainWindow%402x.png&quot; alt=&quot;MainWindow&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;预览&quot;&gt;&lt;a href=&quot;#预览&quot; class=&quot;headerlink&quot; title=&quot;预览&quot;&gt;&lt;/a&gt;预览&lt;/h4&gt;&lt;p&gt;关于如何使用 &lt;code&gt;NSOutlineView&lt;/code&gt; 展示数据，不想多说，查文档写 UI 谁都会。&lt;/p&gt;
&lt;p&gt;我定义了一个数据结构 &lt;code&gt;Item&lt;/code&gt; 来表示 &lt;code&gt;NSOutlineView&lt;/code&gt; 中每行节点的数据：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typealias &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt; = (key: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, value: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;, parent: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;?)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为有了 &lt;code&gt;parent&lt;/code&gt; 指向父节点，可以递归搜寻到某个 &lt;code&gt;Item&lt;/code&gt; 对象所处的路径（&lt;code&gt;keypath&lt;/code&gt;）：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;keyPath&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forItem item: Any?)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; key: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; parent: &lt;span class=&quot;type&quot;&gt;Any&lt;/span&gt;?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tupleItem = item &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        key = tupleItem.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = tupleItem.parent&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        key = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        parent = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; parentItem = parent &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(keyPath(forItem: parentItem)&lt;/span&gt;).&lt;span class=&quot;subst&quot;&gt;\(key)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;\(key)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以实现双击某行数据时，自动将当前数据的路径写入 Pasteboard 中。&lt;/p&gt;
&lt;h4 id=&quot;过滤&quot;&gt;&lt;a href=&quot;#过滤&quot; class=&quot;headerlink&quot; title=&quot;过滤&quot;&gt;&lt;/a&gt;过滤&lt;/h4&gt;&lt;p&gt;过滤关键字的重点就是判断一个 &lt;code&gt;Item&lt;/code&gt; 及其子节点中是否包含此关键字，此时需要依然是需要 DFS 递归查找关键字。&lt;/p&gt;
&lt;p&gt;查找关键字需要忽略大小写：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;func &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: Any, containsString &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;: String&lt;/span&gt;) -&amp;gt; Bool &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; String) &amp;amp;&amp;amp; (&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;! String).lowercased().contains(&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.lowercased()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;递归查找很容易实现，只不过区分下数组和字典罢了：&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;func &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;propertyList list: Any&lt;/span&gt;) -&amp;gt; Bool &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dictionary = list &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [String: Any] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (key, &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; dictionary &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: key, containsString: word&lt;/span&gt;) || &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, containsString: word&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;propertyList: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; array = list &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? [Any] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkAny&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;, containsString: word&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;propertyList: &lt;span class=&quot;keyword&quot;&gt;value&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后经过方法嵌套拼装成如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; item: Any, containsKeyWord word: String)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; tupleItem = item &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;? &lt;span class=&quot;type&quot;&gt;Item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; checkAny(value: tupleItem.key, containsString: word) || checkAny(value: tupleItem.value, containsString: word) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(propertyList list: Any)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	&lt;span class=&quot;comment&quot;&gt;/// 此处省略&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dfs(propertyList: tupleItem.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;快速切换工程文件&quot;&gt;&lt;a href=&quot;#快速切换工程文件&quot; class=&quot;headerlink&quot; title=&quot;快速切换工程文件&quot;&gt;&lt;/a&gt;快速切换工程文件&lt;/h3&gt;&lt;p&gt;下拉列表的 UI 实现很简单，就是一个 &lt;code&gt;NSView&lt;/code&gt; 里面放几个 &lt;code&gt;NSTextField&lt;/code&gt;。维护常用工程文件列表需要在每次用户选择工程文件后将其加入列表，实现 LRU 算法。&lt;/p&gt;
&lt;p&gt;这里对 LRU 缓存的需求跟 &lt;a href=&quot;http://yulingtianxia.com/blog/2016/02/27/TFSHelper/#缓存常用链接&quot;&gt;自制一款 Mac 平台 URL 辅助工具&lt;/a&gt; 这篇文章中的 TFSHelper 的是一样的。我直接把代码搬过来了。我将其放到 Github Gist 上了，可能需要科学上网：&lt;a href=&quot;https://gist.github.com/yulingtianxia/5d61afdb241dcd5562b211cb485883fa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;LRUCache&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下拉列表的点击操作交由 &lt;code&gt;NSClickGestureRecognizer&lt;/code&gt; 捕获处理。&lt;/p&gt;
&lt;h3 id=&quot;构造命令行工具&quot;&gt;&lt;a href=&quot;#构造命令行工具&quot; class=&quot;headerlink&quot; title=&quot;构造命令行工具&quot;&gt;&lt;/a&gt;构造命令行工具&lt;/h3&gt;&lt;p&gt;为了尽可能精简命令行的使用复杂度，我只把最核心的功能封装进去，一共只有这几个命令：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: pbxproj [command_option] &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command options are (-convert &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-compare modified_file -o path          compare modified &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; generate a json &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;given&lt;/span&gt; path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-apply json_file                        apply a json &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-revert                                 revert &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; latest backup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-convert                                rewrite &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xml format&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入的这些参数都需要自己去处理，由此会产生大量条件判断，好在我的不算复杂。需要注意的是参数列表第一个是程序名称（路径）。&lt;/p&gt;
&lt;p&gt;在 terminal 中执行 Swift 文件时获取参数内容的方式变了好多次，一开始是 &lt;code&gt;C_ARGC&lt;/code&gt; 和 &lt;code&gt;C_ARGV&lt;/code&gt;，到了 Swift 1.2 只能使用 &lt;code&gt;Process.arguments&lt;/code&gt;，到了 Swift 3 又变了，必须用 &lt;code&gt;CommandLine.arguments&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;拿到了参数后，我所做的事情只是调用 &lt;code&gt;PropertyListHandler&lt;/code&gt; 中已经封装好的工具方法罢了。&lt;/p&gt;
&lt;p&gt;不是所有的人都会把 Swift 文件当做脚本去执行，所以还需要创建个 target，打包成可执行程序，这样就不依赖 Swift 命令了。&lt;/p&gt;
&lt;h2 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h2&gt;&lt;p&gt;我使用 pbxprojHelper 的频率十分高，因为开发同一项目的人很多，svn 的分支也多。第一次生成好我的 JSON 配置文件后以后就几乎不用再生成了，不同分支的工程都可以共用这一个 JSON 配置。每次因为种种原因 revert 了 project.pbxproj 文件后，我都可以用它一键配置好我的工程文件，&lt;strong&gt;节省了至少 90% 的时间！&lt;/strong&gt;即便换了个其他分支的工程，也可以在常用列表中迅速切换，不用再次 select 文件。&lt;/p&gt;
&lt;p&gt;也正是在一次次的使用中发现了若干 bug 和体验问题，然后不断改进和完善。&lt;/p&gt;
&lt;h2 id=&quot;感悟&quot;&gt;&lt;a href=&quot;#感悟&quot; class=&quot;headerlink&quot; title=&quot;感悟&quot;&gt;&lt;/a&gt;感悟&lt;/h2&gt;&lt;p&gt;这个项目从开始构思需求到完成基本功能花费了我大概一周的业余时间。&lt;/p&gt;
&lt;p&gt;前期调研做了些准备工作后觉得还是有可行性的，并对部分功能需求做了妥协。比如记录工程文件修改内容需要对比新旧两个文件，这就要求使用者先把工程文件保存一份，然后再修改，最后使用 pbxprojHelper 对比两个工程文件的差异。最后生成工程文件的环节也做了妥协，因为无法将数据以 OpenStep 格式写入文件，除非调用 Xcode 私有框架 &lt;code&gt;touch&lt;/code&gt; 下工程文件。所以需要用户用 Xcode 打开工程后随意修改下工程再复原即可。就是在这样一次次对功能的妥协下，使得方案的看似不可行变得可行。&lt;/p&gt;
&lt;p&gt;这个项目的需求一开始并不明确，是在摸索中一点点确立的。比如一开始根本没有想到过要把修改保存成 JSON 文件，之后想的是让用户手动创建和编写 JSON 配置文件，再之后想的是自动生成 JSON 配置文件。在制定 JSON 配置的内容规则上也是调整了一阵子，几经修改最后定稿。所以说，产品经理下次改需求的时候可以适当理解下，毕竟产品成型的确需要个过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摸着石头过河的感觉虽然忐忑，但是我更享受攻城略地般的快感。&lt;/strong&gt;当时在开发的过程中遇到了一个个难题，当时连自己也不知道能否搞定，很有可能半途而废。但最终还是通过制定策略和实现算法实现了，虽然算法都挺简单并不难，但是能有针对性地给出一些解决方案还是比较有成就感的。&lt;/p&gt;
&lt;p&gt;作为一款给自己量身打造的玩票工具，使用 Swift 来开发看起来是当今标配，理所当然。也是趁着玩票的机会温（chong）习（xue）下 Swift，毕竟平时一直用 OC 写 MRC 代码，生怕落后于这个时代。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot;&gt;pbxprojHelper&lt;/a&gt; 可以帮你快速配置 Xcode 工程文件，省去麻烦的人工手动操作。项目开源，使用 Swift 开发，详细介绍请见&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot;&gt;使用说明&lt;/a&gt;。除了 Mac App 外还提供了命令行工具 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/releases/download/1.1.3/pbxproj&quot;&gt;&lt;code&gt;pbxproj&lt;/code&gt;&lt;/a&gt;，它集成了 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot;&gt;pbxprojHelper&lt;/a&gt; 的核心功能，同样简易实用。&lt;/p&gt;
&lt;p&gt;因为 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/Documentation/README_ZH.md&quot;&gt;README_ZH&lt;/a&gt; 中对使用方法已经讲得很详细了，这里重点说的是产品方案和技术实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://yulingtianxia.com/tags/Xcode/"/>
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>优化 App 的启动时间</title>
    <link href="http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/"/>
    <id>http://yulingtianxia.com/blog/2016/10/30/Optimizing-App-Startup-Time/</id>
    <published>2016-10-30T05:11:10.000Z</published>
    <updated>2017-08-20T07:18:30.000Z</updated>
    
    <content type="html">&lt;p&gt;这是一篇 WWDC 2016 Session 406 的学习笔记，从原理到实践讲述了如何优化 App 的启动时间。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;App-运行理论&quot;&gt;&lt;a href=&quot;#App-运行理论&quot; class=&quot;headerlink&quot; title=&quot;App 运行理论&quot;&gt;&lt;/a&gt;App 运行理论&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main()&lt;/code&gt; 执行前发生的事&lt;/li&gt;
&lt;li&gt;Mach-O 格式&lt;/li&gt;
&lt;li&gt;虚拟内存基础&lt;/li&gt;
&lt;li&gt;Mach-O 二进制的加载&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;理论速成&quot;&gt;&lt;a href=&quot;#理论速成&quot; class=&quot;headerlink&quot; title=&quot;理论速成&quot;&gt;&lt;/a&gt;理论速成&lt;/h3&gt;&lt;h4 id=&quot;Mach-O-术语&quot;&gt;&lt;a href=&quot;#Mach-O-术语&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 术语&quot;&gt;&lt;/a&gt;Mach-O 术语&lt;/h4&gt;&lt;p&gt;Mach-O 是针对不同运行时可执行文件的文件类型。 &lt;/p&gt;
&lt;p&gt;文件类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Executable： 应用的主要二进制&lt;/li&gt;
&lt;li&gt;Dylib： 动态链接库（又称 DSO 或 DLL）&lt;/li&gt;
&lt;li&gt;Bundle： 不能被链接的 Dylib，只能在运行时使用 &lt;code&gt;dlopen()&lt;/code&gt; 加载，可当做 macOS 的插件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Image： executable，dylib 或 bundle&lt;br&gt;Framework： 包含 Dylib 以及资源文件和头文件的文件夹&lt;/p&gt;
&lt;h4 id=&quot;Mach-O-镜像文件&quot;&gt;&lt;a href=&quot;#Mach-O-镜像文件&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 镜像文件&quot;&gt;&lt;/a&gt;Mach-O 镜像文件&lt;/h4&gt;&lt;p&gt;Mach-O 被划分成一些 segement，每个 segement 又被划分成一些 section。&lt;/p&gt;
&lt;p&gt;segment 的名字都是大写的，且空间大小为页的整数。页的大小跟硬件有关，在 arm64 架构一页是 16KB，其余为 4KB。&lt;/p&gt;
&lt;p&gt;section 虽然没有整数倍页大小的限制，但是 section 之间不会有重叠。&lt;/p&gt;
&lt;p&gt;几乎所有 Mach-O 都包含这三个段（segment）： &lt;code&gt;__TEXT&lt;/code&gt;,&lt;code&gt;__DATA&lt;/code&gt; 和 &lt;code&gt;__LINKEDIT&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__TEXT&lt;/code&gt; 包含 Mach header，被执行的代码和只读常量（如C 字符串）。只读可执行（r-x）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__DATA&lt;/code&gt; 包含全局变量，静态变量等。可读写（rw-）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__LINKEDIT&lt;/code&gt; 包含了加载程序的『元数据』，比如函数的名称和地址。只读（r–）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Mach-O-Universal-文件&quot;&gt;&lt;a href=&quot;#Mach-O-Universal-文件&quot; class=&quot;headerlink&quot; title=&quot;Mach-O Universal 文件&quot;&gt;&lt;/a&gt;Mach-O Universal 文件&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fat_binary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FAT 二进制&lt;/a&gt;文件，将多种架构的 Mach-O 文件合并而成。它通过 Fat Header 来记录不同架构在文件中的偏移量，Fat Header 占一页的空间。&lt;/p&gt;
&lt;p&gt;按分页来存储这些 segement 和 header 会浪费空间，但这有利于虚拟内存的实现。&lt;/p&gt;
&lt;h4 id=&quot;虚拟内存&quot;&gt;&lt;a href=&quot;#虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;虚拟内存&quot;&gt;&lt;/a&gt;虚拟内存&lt;/h4&gt;&lt;p&gt;虚拟内存就是一层间接寻址（indirection）。软件工程中有句格言就是任何问题都能通过添加一个间接层来解决。虚拟内存解决的是管理所有进程使用物理 RAM 的问题。通过添加间接层来让每个进程使用逻辑地址空间，它可以映射到 RAM 上的某个物理页上。这种映射不是一对一的，逻辑地址可能映射不到 RAM 上，也可能有多个逻辑地址映射到同一个物理 RAM 上。针对第一种情况，当进程要存储逻辑地址内容时会触发 page fault；第二种情况就是多进程共享内存。&lt;/p&gt;
&lt;p&gt;对于文件可以不用一次性读入整个文件，可以使用分页映射（&lt;code&gt;mmap()&lt;/code&gt;）的方式读取。也就是把文件某个片段映射到进程逻辑内存的某个页上。当某个想要读取的页没有在内存中，就会触发 page fault，内核只会读入那一页，实现文件的懒加载。&lt;/p&gt;
&lt;p&gt;也就是说 Mach-O 文件中的 &lt;code&gt;__TEXT&lt;/code&gt; 段可以映射到多个进程，并可以懒加载，且进程之间共享内存。&lt;code&gt;__DATA&lt;/code&gt; 段是可读写的。这里使用到了 Copy-On-Write 技术，简称 COW。也就是多个进程共享一页内存空间时，一旦有进程要做写操作，它会先将这页内存内容复制一份出来，然后重新映射逻辑地址到新的 RAM 页上。也就是这个进程自己拥有了那页内存的拷贝。这就涉及到了 clean/dirty page 的概念。dirty page 含有进程自己的信息，而 clean page 可以被内核重新生成（重新读磁盘）。所以 dirty page 的代价大于 clean page。&lt;/p&gt;
&lt;h4 id=&quot;Mach-O-镜像-加载&quot;&gt;&lt;a href=&quot;#Mach-O-镜像-加载&quot; class=&quot;headerlink&quot; title=&quot;Mach-O 镜像 加载&quot;&gt;&lt;/a&gt;Mach-O 镜像 加载&lt;/h4&gt;&lt;p&gt;所以在多个进程加载 Mach-O 镜像时 &lt;code&gt;__TEXT&lt;/code&gt; 和  &lt;code&gt;__LINKEDIT&lt;/code&gt; 因为只读，都是可以共享内存的。而 &lt;code&gt;__DATA&lt;/code&gt; 因为可读写，就会产生 dirty page。当 dyld 执行结束后，&lt;code&gt;__LINKEDIT&lt;/code&gt; 就没用了，对应的内存页会被回收。&lt;/p&gt;
&lt;h4 id=&quot;安全&quot;&gt;&lt;a href=&quot;#安全&quot; class=&quot;headerlink&quot; title=&quot;安全&quot;&gt;&lt;/a&gt;安全&lt;/h4&gt;&lt;p&gt;ASLR（Address Space Layout Randomization）：地址空间布局随机化，镜像会在随机的地址上加载。这其实是一二十年前的旧技术了。&lt;/p&gt;
&lt;p&gt;代码签名：可能我们认为 Xcode 会把整个文件都做加密 hash 并用做数字签名。其实为了在运行时验证 Mach-O 文件的签名，并不是每次重复读入整个文件，而是把每页内容都生成一个单独的加密散列值，并存储在 &lt;code&gt;__LINKEDIT&lt;/code&gt; 中。这使得文件每页的内容都能及时被校验确并保不被篡改。&lt;/p&gt;
&lt;h3 id=&quot;从-exec-到-main&quot;&gt;&lt;a href=&quot;#从-exec-到-main&quot; class=&quot;headerlink&quot; title=&quot;从 exec() 到 main()&quot;&gt;&lt;/a&gt;从 &lt;code&gt;exec()&lt;/code&gt; 到 &lt;code&gt;main()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;exec()&lt;/code&gt; 是一个系统调用。系统内核把应用映射到新的地址空间，且每次起始位置都是随机的（因为使用 ASLR）。并将起始位置到 &lt;code&gt;0x000000&lt;/code&gt; 这段范围的进程权限都标记为不可读写不可执行。如果是 32 位进程，这个范围&lt;strong&gt;至少&lt;/strong&gt;是 4KB；对于 64 位进程则&lt;strong&gt;至少&lt;/strong&gt;是 4GB。NULL 指针引用和指针截断误差都是会被它捕获。&lt;/p&gt;
&lt;h3 id=&quot;dyld-加载-dylib-文件&quot;&gt;&lt;a href=&quot;#dyld-加载-dylib-文件&quot; class=&quot;headerlink&quot; title=&quot;dyld 加载 dylib 文件&quot;&gt;&lt;/a&gt;&lt;code&gt;dyld&lt;/code&gt; 加载 dylib 文件&lt;/h3&gt;&lt;p&gt;Unix 的前二十年很安逸，因为那时还没有发明动态链接库。有了动态链接库后，一个用于加载链接库的帮助程序被创建。在苹果的平台里是 &lt;code&gt;dyld&lt;/code&gt;，其他 Unix 系统也有 &lt;a href=&quot;https://zh.wikipedia.org/wiki/Ld.so&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ld.so&lt;/code&gt;&lt;/a&gt;。 当内核完成映射进程的工作后会将名字为 &lt;code&gt;dyld&lt;/code&gt; 的Mach-O 文件映射到进程中的随机地址，它将 PC 寄存器设为 &lt;code&gt;dyld&lt;/code&gt; 的地址并运行。&lt;code&gt;dyld&lt;/code&gt; 在应用进程中运行的工作是加载应用依赖的所有动态链接库，准备好运行所需的一切，它拥有的权限跟应用一样。&lt;/p&gt;
&lt;p&gt;下面的步骤构成了 &lt;code&gt;dyld&lt;/code&gt; 的时间线：&lt;/p&gt;
&lt;p&gt;Load dylibs -&amp;gt; Rebase -&amp;gt; Bind -&amp;gt; ObjC -&amp;gt; Initializers&lt;/p&gt;
&lt;h4 id=&quot;加载-Dylib&quot;&gt;&lt;a href=&quot;#加载-Dylib&quot; class=&quot;headerlink&quot; title=&quot;加载 Dylib&quot;&gt;&lt;/a&gt;加载 Dylib&lt;/h4&gt;&lt;p&gt;从主执行文件的 header 获取到需要加载的所依赖动态库列表，而 header 早就被内核映射过。然后它需要找到每个 dylib，然后打开文件读取文件起始位置，确保它是 Mach-O 文件。接着会找到代码签名并将其注册到内核。然后在 dylib 文件的每个 segment 上调用 &lt;code&gt;mmap()&lt;/code&gt;。应用所依赖的 dylib 文件可能会再依赖其他 dylib，所以 &lt;code&gt;dyld&lt;/code&gt; 所需要加载的是动态库列表一个递归依赖的集合。一般应用会加载 100 到 400 个 dylib 文件，但大部分都是系统 dylib，它们会被预先计算和缓存起来，加载速度很快。&lt;/p&gt;
&lt;h4 id=&quot;Fix-ups&quot;&gt;&lt;a href=&quot;#Fix-ups&quot; class=&quot;headerlink&quot; title=&quot;Fix-ups&quot;&gt;&lt;/a&gt;Fix-ups&lt;/h4&gt;&lt;p&gt;在加载所有的动态链接库之后，它们只是处在相互独立的状态，需要将它们绑定起来，这就是 Fix-ups。代码签名使得我们不能修改指令，那样就不能让一个 dylib 的调用另一个 dylib。这时需要加很多间接层。&lt;/p&gt;
&lt;p&gt;现代 code-gen 被叫做动态 PIC（Position Independent Code），意味着代码可以被加载到间接的地址上。当调用发生时，code-gen 实际上会在 &lt;code&gt;__DATA&lt;/code&gt; 段中创建一个指向被调用者的指针，然后加载指针并跳转过去。&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;dyld&lt;/code&gt; 做的事情就是修正（fix-up）指针和数据。Fix-up 有两种类型，rebasing 和 binding。&lt;/p&gt;
&lt;h4 id=&quot;Rebasing-和-Binding&quot;&gt;&lt;a href=&quot;#Rebasing-和-Binding&quot; class=&quot;headerlink&quot; title=&quot;Rebasing 和 Binding&quot;&gt;&lt;/a&gt;Rebasing 和 Binding&lt;/h4&gt;&lt;p&gt;Rebasing：在镜像内部调整指针的指向&lt;br&gt;Binding：将指针指向镜像外部的内容&lt;/p&gt;
&lt;p&gt;可以通过命令行查看 rebase 和 bind 等信息：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;xcrun&lt;/span&gt; dyldinfo -rebase -&lt;span class=&quot;keyword&quot;&gt;bind &lt;/span&gt;-lazy_bind myapp.app/myapp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这个命令可以查看所有的 Fix-up。rebase，bind，weak_bind，lazy_bind 都存储在 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段中，并可通过 &lt;code&gt;LC_DYLD_INFO_ONLY&lt;/code&gt; 查看各种信息的偏移量和大小。&lt;/p&gt;
&lt;p&gt;建议用 MachOView 查看更加方便直观。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;dyld&lt;/code&gt; 源码层面简要介绍下 Rebasing 和 Binding 的流程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImageLoader&lt;/code&gt; 是一个用于加载可执行文件的基类，它负责链接镜像，但不关心具体文件格式，因为这些都交给子类去实现。每个可执行文件都会对应一个 &lt;code&gt;ImageLoader&lt;/code&gt; 实例。&lt;code&gt;ImageLoaderMachO&lt;/code&gt; 是用于加载 Mach-O 格式文件的 &lt;code&gt;ImageLoader&lt;/code&gt; 子类，而 &lt;code&gt;ImageLoaderMachOClassic&lt;/code&gt; 和 &lt;code&gt;ImageLoaderMachOCompressed&lt;/code&gt; 都继承于 &lt;code&gt;ImageLoaderMachO&lt;/code&gt;，分别用于加载那些 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段为传统格式和压缩格式的 Mach-O 文件。&lt;/p&gt;
&lt;p&gt;因为 dylib 之间有依赖关系，所以 &lt;code&gt;ImageLoader&lt;/code&gt; 中的好多操作都是沿着依赖链递归操作的，Rebasing 和 Binding 也不例外，分别对应着 &lt;code&gt;recursiveRebase()&lt;/code&gt; 和 &lt;code&gt;recursiveBind()&lt;/code&gt; 这两个方法。因为是递归，所以会自底向上地分别调用 &lt;code&gt;doRebase()&lt;/code&gt; 和 &lt;code&gt;doBind()&lt;/code&gt; 方法，这样被依赖的 dylib 总是先于依赖它的 dylib 执行 Rebasing 和 Binding。传入 &lt;code&gt;doRebase()&lt;/code&gt; 和 &lt;code&gt;doBind()&lt;/code&gt; 的参数包含一个 &lt;code&gt;LinkContext&lt;/code&gt; 上下文，存储了可执行文件的一堆状态和相关的函数。&lt;/p&gt;
&lt;p&gt;在 Rebasing 和 Binding 前会判断是否已经 Prebinding。如果已经进行过预绑定（Prebinding），那就不需要 Rebasing 和 Binding 这些 Fix-up 流程了，因为已经在预先绑定的地址加载好了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ImageLoaderMachO&lt;/code&gt; 实例&lt;strong&gt;不使用预绑&lt;/strong&gt;定会有四个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mach-O Header 中 &lt;code&gt;MH_PREBOUND&lt;/code&gt; 标志位为 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;镜像加载地址有偏移（这个后面会讲到）&lt;/li&gt;
&lt;li&gt;依赖的库有变化&lt;/li&gt;
&lt;li&gt;镜像使用 flat-namespace，预绑定的一部分会被忽略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinkContext&lt;/code&gt; 的环境变量禁止了预绑定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ImageLoaderMachO&lt;/code&gt; 中 &lt;code&gt;doRebase()&lt;/code&gt; 做的事情大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果使用预绑定，&lt;code&gt;fgImagesWithUsedPrebinding&lt;/code&gt; 计数加一，并 &lt;code&gt;return&lt;/code&gt;;否则进入第二步&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;MH_PREBOUND&lt;/code&gt; 标志位为 &lt;code&gt;1&lt;/code&gt;（也就是可以预绑定但没使用），且镜像在共享内存中，重置上下文中所有的 lazy pointer。（如果镜像在共享内存中，稍后会在 Binding 过程中绑定，所以无需重置）&lt;/li&gt;
&lt;li&gt;如果镜像加载地址偏移量为0，则无需 Rebasing，直接 &lt;code&gt;return&lt;/code&gt;；否则进入第四步&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;rebase()&lt;/code&gt; 方法，这才是真正做 Rebasing 工作的方法。如果开启 &lt;code&gt;TEXT_RELOC_SUPPORT&lt;/code&gt; 宏，会允许 &lt;code&gt;rebase()&lt;/code&gt; 方法对 &lt;code&gt;__TEXT&lt;/code&gt; 段做写操作来对其进行 Fix-up。所以其实 &lt;code&gt;__TEXT&lt;/code&gt; 只读属性并不是绝对的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;ImageLoaderMachOClassic&lt;/code&gt; 和 &lt;code&gt;ImageLoaderMachOCompressed&lt;/code&gt; 分别实现了自己的 &lt;code&gt;doRebase()&lt;/code&gt; 方法。实现逻辑大同小异，同样会判断是否使用预绑定，并在真正的 Binding 工作时判断 &lt;code&gt;TEXT_RELOC_SUPPORT&lt;/code&gt; 宏来决定是否对 &lt;code&gt;__TEXT&lt;/code&gt; 段做写操作。最后都会调用 &lt;code&gt;setupLazyPointerHandler&lt;/code&gt; 在镜像中设置 &lt;code&gt;dyld&lt;/code&gt; 的 entry point，放在最后调用是为了让主可执行文件设置好 &lt;code&gt;__dyld&lt;/code&gt; 或 &lt;code&gt;__program_vars&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Rebasing&quot;&gt;&lt;a href=&quot;#Rebasing&quot; class=&quot;headerlink&quot; title=&quot;Rebasing&quot;&gt;&lt;/a&gt;Rebasing&lt;/h4&gt;&lt;p&gt;在过去，会把 dylib 加载到指定地址，所有指针和数据对于代码来说都是对的，&lt;code&gt;dyld&lt;/code&gt; 就无需做任何 fix-up 了。如今用了 ASLR 后会将 dylib 加载到新的随机地址(actual_address)，这个随机的地址跟代码和数据指向的旧地址(preferred_address)会有偏差，&lt;code&gt;dyld&lt;/code&gt; 需要修正这个偏差(slide)，做法就是将 dylib 内部的指针地址都加上这个偏移量，偏移量的计算方法如下：&lt;/p&gt;
&lt;p&gt;Slide = actual_address - preferred_address&lt;/p&gt;
&lt;p&gt;然后就是重复不断地对 &lt;code&gt;__DATA&lt;/code&gt; 段中需要 rebase 的指针加上这个偏移量。这就又涉及到 page fault 和 COW。这可能会产生 I/O 瓶颈，但因为 rebase 的顺序是按地址排列的，所以从内核的角度来看这是个有次序的任务，它会预先读入数据，减少 I/O 消耗。&lt;/p&gt;
&lt;h4 id=&quot;Binding&quot;&gt;&lt;a href=&quot;#Binding&quot; class=&quot;headerlink&quot; title=&quot;Binding&quot;&gt;&lt;/a&gt;Binding&lt;/h4&gt;&lt;p&gt;Binding 是处理那些指向 dylib 外部的指针，它们实际上被符号（symbol）名称绑定，也就是个字符串。之前提到 &lt;code&gt;__LINKEDIT&lt;/code&gt; 段中也存储了需要 bind 的指针，以及指针需要指向的符号。&lt;code&gt;dyld&lt;/code&gt; 需要找到 symbol 对应的实现，这需要很多计算，去符号表里查找。找到后会将内容存储到 &lt;code&gt;__DATA&lt;/code&gt; 段中的那个指针中。Binding 看起来计算量比 Rebasing 更大，但其实需要的 I/O 操作很少，因为之前 Rebasing 已经替 Binding 做过了。&lt;/p&gt;
&lt;h4 id=&quot;ObjC-Runtime&quot;&gt;&lt;a href=&quot;#ObjC-Runtime&quot; class=&quot;headerlink&quot; title=&quot;ObjC Runtime&quot;&gt;&lt;/a&gt;ObjC Runtime&lt;/h4&gt;&lt;p&gt;Objective-C 中有很多数据结构都是靠 Rebasing 和 Binding 来修正（fix-up）的，比如 &lt;code&gt;Class&lt;/code&gt; 中指向超类的指针和指向方法的指针。&lt;/p&gt;
&lt;p&gt;ObjC 是个动态语言，可以用类的名字来实例化一个类的对象。这意味着 ObjC Runtime 需要维护一张映射类名与类的全局表。当加载一个 dylib 时，其定义的所有的类都需要被注册到这个全局表中。&lt;/p&gt;
&lt;p&gt;C++ 中有个问题叫做易碎的基类（fragile base class）。ObjC 就没有这个问题，因为会在加载时通过 fix-up 动态类中改变实例变量的偏移量。&lt;/p&gt;
&lt;p&gt;在 ObjC 中可以通过定义类别（Category）的方式改变一个类的方法。有时你想要添加方法的类在另一个 dylib 中，而不在你的镜像中（也就是对系统或别人的类动刀），这时也需要做些 fix-up。&lt;/p&gt;
&lt;p&gt;ObjC 中的 selector 必须是唯一的。&lt;/p&gt;
&lt;h4 id=&quot;Initializers&quot;&gt;&lt;a href=&quot;#Initializers&quot; class=&quot;headerlink&quot; title=&quot;Initializers&quot;&gt;&lt;/a&gt;Initializers&lt;/h4&gt;&lt;p&gt;C++ 会为静态创建的对象生成初始化器。而在 ObjC 中有个叫 &lt;code&gt;+load&lt;/code&gt; 的方法，然而它被废弃了，现在建议使用 &lt;code&gt;+initialize&lt;/code&gt;。对比详见：&lt;a href=&quot;http://stackoverflow.com/questions/13326435/nsobject-load-and-initialize-what-do-they-do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/13326435/nsobject-load-and-initialize-what-do-they-do&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在有了主执行文件，一堆 dylib，其依赖关系构成了一张巨大的有向图，那么执行初始化器的顺序是什么？自顶向上！按照依赖关系，先加载叶子节点，然后逐步向上加载中间节点，直至最后加载根节点。这种加载顺序确保了安全性，加载某个 dylib 前，其所依赖的其余 dylib 文件肯定已经被预先加载。&lt;/p&gt;
&lt;p&gt;最后 &lt;code&gt;dyld&lt;/code&gt; 会调用 &lt;code&gt;main()&lt;/code&gt; 函数。&lt;code&gt;main()&lt;/code&gt; 会调用 &lt;code&gt;UIApplicationMain()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;改善启动时间&quot;&gt;&lt;a href=&quot;#改善启动时间&quot; class=&quot;headerlink&quot; title=&quot;改善启动时间&quot;&gt;&lt;/a&gt;改善启动时间&lt;/h2&gt;&lt;p&gt;从点击 App 图标到加载 App 闪屏之间会有个动画，我们希望 App 启动速度比这个动画更快。虽然不同设备上 App 启动速度不一样，但启动时间最好控制在 400ms。需要注意的是启动时间一旦超过 20s，系统会认为发生了死循环并杀掉 App 进程。当然启动时间最好以 App 所支持的最低配置设备为准。直到 &lt;code&gt;applicationWillFinishLaunching&lt;/code&gt; 被调动，App 才启动结束。&lt;/p&gt;
&lt;h3 id=&quot;测量启动时间&quot;&gt;&lt;a href=&quot;#测量启动时间&quot; class=&quot;headerlink&quot; title=&quot;测量启动时间&quot;&gt;&lt;/a&gt;测量启动时间&lt;/h3&gt;&lt;p&gt;Warm launch: App 和数据已经在内存中&lt;br&gt;Cold launch: App 不在内核缓冲存储器中&lt;/p&gt;
&lt;p&gt;冷启动（Cold launch）耗时才是我们需要测量的重要数据，为了准确测量冷启动耗时，测量前需要重启设备。在 &lt;code&gt;main()&lt;/code&gt; 方法执行前测量是很难的，好在 &lt;code&gt;dyld&lt;/code&gt; 提供了内建的测量方法：在 Xcode 中 Edit scheme -&amp;gt; Run -&amp;gt; Auguments 将环境变量 &lt;code&gt;DYLD_PRINT_STATISTICS&lt;/code&gt; 设为 &lt;code&gt;1&lt;/code&gt;。控制台输出的内容如下：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Total pre-main &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;228.41&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;100.0%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         dylib loading &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;:  &lt;span class=&quot;number&quot;&gt;82.35&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;36.0%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rebase/binding &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;:   &lt;span class=&quot;number&quot;&gt;6.12&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;2.6%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ObjC setup &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;:   &lt;span class=&quot;number&quot;&gt;7.82&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;3.4%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           initializer &lt;span class=&quot;selector-tag&quot;&gt;time&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;132.02&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;57.8%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           slowest intializers :&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             libSystem&lt;span class=&quot;selector-class&quot;&gt;.B&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.dylib&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;122.07&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;53.4%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                CoreFoundation :   &lt;span class=&quot;number&quot;&gt;5.59&lt;/span&gt; milliseconds (&lt;span class=&quot;number&quot;&gt;2.4%&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;优化启动时间&quot;&gt;&lt;a href=&quot;#优化启动时间&quot; class=&quot;headerlink&quot; title=&quot;优化启动时间&quot;&gt;&lt;/a&gt;优化启动时间&lt;/h3&gt;&lt;p&gt;可以针对 App 启动前的每个步骤进行相应的优化工作。&lt;/p&gt;
&lt;h4 id=&quot;加载-Dylib-1&quot;&gt;&lt;a href=&quot;#加载-Dylib-1&quot; class=&quot;headerlink&quot; title=&quot;加载 Dylib&quot;&gt;&lt;/a&gt;加载 Dylib&lt;/h4&gt;&lt;p&gt;之前提到过加载系统的 dylib 很快，因为有优化。但加载内嵌（embedded）的 dylib 文件很占时间，所以尽可能把多个内嵌 dylib 合并成一个来加载，或者使用 static archive。使用 &lt;code&gt;dlopen()&lt;/code&gt; 来在运行时懒加载是不建议的，这么做可能会带来一些问题，并且总的开销更大。&lt;/p&gt;
&lt;h4 id=&quot;Rebase-Binding&quot;&gt;&lt;a href=&quot;#Rebase-Binding&quot; class=&quot;headerlink&quot; title=&quot;Rebase/Binding&quot;&gt;&lt;/a&gt;Rebase/Binding&lt;/h4&gt;&lt;p&gt;之前提过 Rebaing 消耗了大量时间在 I/O 上，而在之后的 Binding 就不怎么需要 I/O 了，而是将时间耗费在计算上。所以这两个步骤的耗时是混在一起的。&lt;/p&gt;
&lt;p&gt;之前说过可以从查看 &lt;code&gt;__DATA&lt;/code&gt; 段中需要修正（fix-up）的指针，所以减少指针数量才会减少这部分工作的耗时。对于 ObjC 来说就是减少 &lt;code&gt;Class&lt;/code&gt;,&lt;code&gt;selector&lt;/code&gt; 和 &lt;code&gt;category&lt;/code&gt; 这些元数据的数量。从编码原则和设计模式之类的理论都会鼓励大家多写精致短小的类和方法，并将每部分方法独立出一个类别，其实这会增加启动时间。对于 C++ 来说需要减少虚方法，因为虚方法会创建 vtable，这也会在 &lt;code&gt;__DATA&lt;/code&gt; 段中创建结构。虽然 C++ 虚方法对启动耗时的增加要比 ObjC 元数据要少，但依然不可忽视。最后推荐使用 Swift 结构体，它需要 fix-up 的内容较少。&lt;/p&gt;
&lt;h4 id=&quot;ObjC-Setup&quot;&gt;&lt;a href=&quot;#ObjC-Setup&quot; class=&quot;headerlink&quot; title=&quot;ObjC Setup&quot;&gt;&lt;/a&gt;ObjC Setup&lt;/h4&gt;&lt;p&gt;针对这步所能事情很少，几乎都靠 Rebasing 和 Binding 步骤中减少所需 fix-up 内容。因为前面的工作也会使得这步耗时减少。&lt;/p&gt;
&lt;h4 id=&quot;Initializer&quot;&gt;&lt;a href=&quot;#Initializer&quot; class=&quot;headerlink&quot; title=&quot;Initializer&quot;&gt;&lt;/a&gt;Initializer&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;显式初始化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;+initialize&lt;/code&gt; 来替代 &lt;code&gt;+load&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不要使用 &lt;code&gt;__atribute__((constructor))&lt;/code&gt; 将方法显式标记为初始化器，而是让初始化方法调用时才执行。比如使用 &lt;code&gt;dispatch_once()&lt;/code&gt;,&lt;code&gt;pthread_once()&lt;/code&gt; 或 &lt;code&gt;std::once()&lt;/code&gt;。也就是在第一次使用时才初始化，推迟了一部分工作耗时。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;隐式初始化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于带有&lt;a href=&quot;http://stackoverflow.com/questions/3899223/what-is-a-non-trivial-constructor-in-c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;复杂（non-trivial）构造器&lt;/a&gt;的 C++ 静态变量：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在调用的地方使用初始化器。&lt;/li&gt;
&lt;li&gt;只用简单值类型赋值（POD:Plain Old Data），这样静态链接器会预先计算 &lt;code&gt;__DATA&lt;/code&gt; 中的数据，无需再进行 fix-up 工作。&lt;/li&gt;
&lt;li&gt;使用编译器 warning 标志 &lt;code&gt;-Wglobal-constructors&lt;/code&gt; 来发现隐式初始化代码。&lt;/li&gt;
&lt;li&gt;使用 Swift 重写代码，因为 Swift 已经预先处理好了，强力推荐。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不要在初始化方法中调用 &lt;code&gt;dlopen()&lt;/code&gt;，对性能有影响。因为 &lt;code&gt;dyld&lt;/code&gt; 在 App 开始前运行，由于此时是单线程运行所以系统会取消加锁，但 &lt;code&gt;dlopen()&lt;/code&gt; 开启了多线程，系统不得不加锁，这就严重影响了性能，还可能会造成死锁以及产生未知的后果。所以也不要在初始化器中创建线程。&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/406/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.apple.com/videos/play/wwdc2016/406/&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇 WWDC 2016 Session 406 的学习笔记，从原理到实践讲述了如何优化 App 的启动时间。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Talk About project.pbxproj</title>
    <link href="http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/"/>
    <id>http://yulingtianxia.com/blog/2016/09/28/Let-s-Talk-About-project-pbxproj/</id>
    <published>2016-09-28T14:58:19.000Z</published>
    <updated>2016-10-18T16:48:04.000Z</updated>
    
    <content type="html">&lt;p&gt;project.pbxproj 文件被包含于 Xcode 工程文件 *.xcodeproj 之中，存储着 Xcode 工程的各项配置参数。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。其可读性不如 xml 和 json，苹果却一直沿用至今，作为一家以创新闻名的公司可能这里剩下的就是情怀吧。&lt;/p&gt;
&lt;p&gt;本文谈了下 project.pbxproj 的知识，并总结了一些操作工程文件的优秀轮子，并在最后给出了自己的解决方案 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt;。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Property-List-的历史&quot;&gt;&lt;a href=&quot;#Property-List-的历史&quot; class=&quot;headerlink&quot; title=&quot;Property List 的历史&quot;&gt;&lt;/a&gt;Property List 的历史&lt;/h2&gt;&lt;p&gt;想了解 project.pbxproj 文件格式，就需要先了解 Property List。&lt;/p&gt;
&lt;p&gt;Property List 有很多种表现方式，最古老的格式就是之前提到的 NeXTSTEP 所使用的格式。那时还算是可读性很强的，仍需要手动编辑。与 json 最明显的差别是：数组用小括号括起来并用逗号隔开元素；字典用大括号括起来并用分号隔开键值对，键值之间用等号连接；二进制数据用尖括号 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 括起来：&lt;/p&gt;
&lt;p&gt;数组：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;( &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字典：&lt;/p&gt;
&lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这也是 project.pbxproj 文件中所使用的格式。&lt;/p&gt;
&lt;p&gt;后来出现的 GNUstep 沿用了 NeXTSTEP 格式，并添加了对 &lt;code&gt;NSValue&lt;/code&gt; 和 &lt;code&gt;NSDate&lt;/code&gt; 对象的支持。到了苹果的 Mac OS X 10.0 推出了新的 XML 格式，旧的 NeXTSTEP 被废弃，只支持读不支持写。这也是为什么使用 &lt;code&gt;plutil&lt;/code&gt; 命令或者 Cocoa 的 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 写入 OpenStep 格式时会报错：&lt;em&gt;Property list format kCFProperty ListOpenStepFormat not supported for writing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;因为 XML 语法啰嗦很占空间，苹果在 Mac OS X 10.2 又推出了一种新格式，将 Property List 存储于二进制文件中。虽然在 Mac OS X 10.7 JSON 格式出现了，但是跟 Property List 不兼容。&lt;/p&gt;
&lt;p&gt;于是乎 Property List 在苹果家族的历史上存在三种格式：OpenStep，XML 和 Binary。&lt;strong&gt;除了 OpenStep 被废弃不支持写入以外，其余格式都提供 API 支持读写。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作-Property-List-的途径&quot;&gt;&lt;a href=&quot;#操作-Property-List-的途径&quot; class=&quot;headerlink&quot; title=&quot;操作 Property List 的途径&quot;&gt;&lt;/a&gt;操作 Property List 的途径&lt;/h2&gt;&lt;p&gt;Unix 的 &lt;code&gt;plutil&lt;/code&gt; 工具提供了处理 Property list 文件的能力。 比如将 Property list 文件转成 XML 格式: &lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plutil -convert xml1 -s -r -o project.pbxproj.&lt;span class=&quot;keyword&quot;&gt;xml&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;project&lt;/span&gt;.pbxproj&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-convert&lt;/code&gt; 选项可以传入的参数有： xml1, binary1 和 json。&lt;/p&gt;
&lt;p&gt;当然 Cocoa 的 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 也提供了类似的功能，更面向对象。其实 &lt;code&gt;plutil&lt;/code&gt; 和 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 底层都是调用 &lt;code&gt;CoreFoundation&lt;/code&gt; 的&lt;code&gt;CFPropertyList&lt;/code&gt; 相关的 API，所以功能类似。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 读入 project.pbxproj 文件时，字典中键值对的顺序会跟文件中原始的顺序不一致。这是因为字典为了实现快速查找会将 key 按序存储（比如字典序或用红黑树排序）。用 &lt;code&gt;plutil&lt;/code&gt; 命令将 project.pbxproj 文件转成 xml 或 json 也会如此。&lt;/p&gt;
&lt;p&gt;此外，&lt;code&gt;plutil&lt;/code&gt; 命令也支持对某个 &lt;code&gt;keypath&lt;/code&gt; 的增、删、改操作。&lt;code&gt;NSPropertyListSerialization&lt;/code&gt; 就更不用说了，在程序中随意搞。&lt;/p&gt;
&lt;p&gt;之前提到过不支持 OpenStep 写入的问题，所以即便我们能在内存中操作 project.pbxproj 文件，依然不能直接保存。&lt;strong&gt;如果自己动手写一个 OpenStep 格式生成程序，依然无法准确还原字典中键值对的顺序。&lt;/strong&gt;更何况 project.pbxproj 文件中还插入了大量增强 human-readable 的注释，这些注释的生成是有特殊逻辑的，这个在后面会讲。&lt;/p&gt;
&lt;h2 id=&quot;简要解析-project-pbxproj-文件&quot;&gt;&lt;a href=&quot;#简要解析-project-pbxproj-文件&quot; class=&quot;headerlink&quot; title=&quot;简要解析 project.pbxproj 文件&quot;&gt;&lt;/a&gt;简要解析 project.pbxproj 文件&lt;/h2&gt;&lt;p&gt;既然表面上无法将修改过的工程文件数据还原为 OpenStep 格式，Xcode 又是如何『开挂』做到的呢？这就得从 project.pbxproj 文件内容说起了。&lt;/p&gt;
&lt;h3 id=&quot;内容规则&quot;&gt;&lt;a href=&quot;#内容规则&quot; class=&quot;headerlink&quot; title=&quot;内容规则&quot;&gt;&lt;/a&gt;内容规则&lt;/h3&gt;&lt;p&gt;project.pbxproj 使用 UUID 作为交叉引用的索引，保证每个配置信息对象的唯一性。因为 UUID 根据机器硬件和时间戳生成，避免了多人在同一时间段操作修改工程文件带来的问题。也就是说工程中每项配置对象都有个唯一的 UUID，然后其他配置对象想引用某个配置对象直接使用它的 UUID 即可。这就跟我们编程时使用指针指向某个对象的地址一样，其他对象的属性想引用它，只需要给属性传个指针地址就行了。&lt;/p&gt;
&lt;p&gt;可以把整个文件的内容想象成一个字典，字典中的 Key 按照字典序来排列。字典的第一层级总共有 5 个键值对，Key 分别为：&lt;code&gt;archiveVersion&lt;/code&gt;，&lt;code&gt;classes&lt;/code&gt;，&lt;code&gt;objectVersion&lt;/code&gt;，&lt;code&gt;objects&lt;/code&gt; 和 &lt;code&gt;rootObject&lt;/code&gt;。其中重要的 Key 是 &lt;code&gt;objects&lt;/code&gt; 和 &lt;code&gt;rootObject&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;所有的配置对象都放在 &lt;code&gt;objects&lt;/code&gt; 对应的 Value 中，包括跟对象（&lt;code&gt;rootObject&lt;/code&gt;）。 &lt;code&gt;objects&lt;/code&gt; 对应的 Value 也是一个字典，Key 都为 UUID，Value 依然是个字典。可以将 &lt;code&gt;rootObject&lt;/code&gt; 的值（是一个 UUID）作为 Key 在 &lt;code&gt;objects&lt;/code&gt; 对应的字典中找到根对象。这个根对象的 &lt;code&gt;isa&lt;/code&gt; 属性为 &lt;code&gt;PBXProject&lt;/code&gt;（&lt;code&gt;isa = PBXProject&lt;/code&gt;）。&lt;strong&gt;读懂 project.pbxproj 的最好方式就是顺着 &lt;code&gt;rootObject&lt;/code&gt; 的各个属性对应的 UUID 在 &lt;code&gt;objects&lt;/code&gt; 中找到对应的对象，然后一层层看下去。&lt;/strong&gt;这样整个文件的配置信息存放方式就慢慢摸清了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;objects&lt;/code&gt; 中的键值对被分成了若干个 section，虽然 section 的顺序是 Xcode 私有 API 钦定的，但每个 section 内部的键值对会根据 Key 的字典序排列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个对象内部的属性（也是键值对）会把 &lt;code&gt;isa&lt;/code&gt; 排在最前面，其余的按照字典序排列。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组内部的顺序完全按照元素内容的字典序排列。&lt;/p&gt;
&lt;p&gt;下面是 &lt;code&gt;objects&lt;/code&gt; 中 &lt;code&gt;PBXNativeTarget&lt;/code&gt; section 的一个对象，感受一下格式：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Begin PBXNativeTarget section */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		A450185D1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* projectTest */&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			isa = PBXNativeTarget&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;buildConfigurationList &lt;/span&gt;= A45018751D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Build configuration list for PBXNativeTarget &quot;projectTest&quot; */&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;buildPhases &lt;/span&gt;= (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				A450185A1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Sources */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				A&lt;span class=&quot;number&quot;&gt;450185B&lt;/span&gt;1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Frameworks */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				A450185C1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* Resources */&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;buildRules &lt;/span&gt;= (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dependencies = (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			name = projectTest&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			productName = projectTest&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			productReference = A450185E1D9D68D60002869D &lt;span class=&quot;comment&quot;&gt;/* projectTest.app */&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			productType = &lt;span class=&quot;string&quot;&gt;&quot;com.apple.product-type.application&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* End PBXNativeTarget section */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以根据 &lt;code&gt;A45018751D9D68D60002869D&lt;/code&gt; 找到对应的 &lt;code&gt;buildConfigurationList&lt;/code&gt; 对象的内容，所以说 project.pbxproj 使用 UUID 作为交叉引用的索引。通过这种关系，可以递归构建一张有向图，每个对象都是一个节点。&lt;/p&gt;
&lt;h3 id=&quot;内容类型&quot;&gt;&lt;a href=&quot;#内容类型&quot; class=&quot;headerlink&quot; title=&quot;内容类型&quot;&gt;&lt;/a&gt;内容类型&lt;/h3&gt;&lt;p&gt;在 Xcode 中能看见所有的公共配置信息都存在于 project.pbxproj 中。主要包含跟文件相关的 BuildFile，Group 和 FileReference；跟编译相关的 BuildPhase 和 Build Configuration（List）；以及一些列 Target 和 TargetDependency。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;objects&lt;/code&gt; 的键值对根据内容类型被分成了若干个 section，采用注释的方式分节也使得可读性更强。section 的数量跟工程有关，尤其是每个工程的 BuildPhase 和 Target 差别都很大。下面列出了一个section 列表（非完整）：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PBXBuildFile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXAppleScriptBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PB&lt;span class=&quot;built_in&quot;&gt;XCopyFilesBuildPhase&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXFrameworksBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXHeadersBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXResourcesBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXShellScriptBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXSourcesBuildPhase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PB&lt;span class=&quot;built_in&quot;&gt;XContainerItemProxy&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXFileElement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXFileReference&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXVariantGroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXAggregateTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXLegacyTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXNativeTarget&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXProject&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PBXTargetDependency&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;XCBuildConfiguration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;XCConfigurationList&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每个 section 中的对象类型都是相同的，对象的类型是靠 &lt;code&gt;isa&lt;/code&gt; 的值区分的。对象内部的属性类型以及含义可以参照这篇文章提供的对照表：&lt;a href=&quot;http://www.monobjc.net/xcode-project-file-format.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcode Project File Format&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;操作-project-pbxproj-文件&quot;&gt;&lt;a href=&quot;#操作-project-pbxproj-文件&quot; class=&quot;headerlink&quot; title=&quot;操作 project.pbxproj 文件&quot;&gt;&lt;/a&gt;操作 project.pbxproj 文件&lt;/h2&gt;&lt;p&gt;我收集了一些可以操作 project.pbxproj 文件的优秀轮子，原理大都是用 &lt;code&gt;plutil&lt;/code&gt; 转成 json 或 xml 后进行处理，不仅功能非常局限，且都无法完美还原为 OpenStep 格式的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Xcodeproj&lt;/a&gt; CocoaPods 写的 Ruby 解析库，用于修改引入 CocoaPods 的工程文件并保存为 XML 格式。CocoaPods 本身是很强大的，还可以用来操作 Xcode workspaces (.xcworkspace), configuration files (.xcconfig) 和 Xcode Scheme files (.xcscheme).&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kronenthaler/mod-pbxproj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mod-pbxproj&lt;/a&gt; 强大的 Python 解析库，支持一定的修改操作，可输出 OpenStep 格式，但是顺序和注释内容无法完美还原，有些鸡肋。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/truebit/xUnique&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xUnique&lt;/a&gt; 用 Python 写的统一多设备生成的 UUID 的工具，主要用途是统一工程在多设备上生成的 UUID，避免工程文件冲突。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mjmsmith/pbxplorer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxplorer&lt;/a&gt;  Ruby 写的解析库。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alunny/node-xcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-xcode&lt;/a&gt; Cordova 基于它管理 Xcode 工程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不过 &lt;strong&gt;Xcode 可以打开 XML 格式的 project.pbxproj，一旦在 Xcode 界面上修改工程配置就会重新将 project.pbxproj 转成 OpenStep 风格。解铃还须系铃人，经过多番对比之后发现最终还是 Xcode 自己才能将 XML 完美还原成原来的 OpenStep 格式，且 &lt;code&gt;diff&lt;/code&gt; 对比毫无差错。&lt;/strong&gt;原因很简单，Xcode 使用的私有 API 的导出结果是个黑盒，外界无论怎么猜都会有瑕疵。所以还是导出为 XML 后手动在 Xcode 界面中触发下吧。既然这样的话，如果能够简单高效地生成出 XML 文件作为工程文件就好了。基于此想法我开发了一款叫做 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pbxprojHelper&lt;/a&gt; 的 Mac App：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/images/MainWindow@2x.png?raw=true&quot; alt=&quot;Main Window&quot;&gt;&lt;/p&gt;
&lt;p&gt;操作简单粗暴：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个工程文件然后内容会自动解析在下面的 Outline 列表中，Filter 输入框便于过滤查看内容。&lt;/li&gt;
&lt;li&gt;单击 Outline 列表中的文字即可复制内容到剪贴板，双击复制整个keypath！ &lt;/li&gt;
&lt;li&gt;对 project.pbxproj 文件的增删改操作都配置在 json 文件中，每次想对工程进行修改只需选择对应的 json 配置文件然后点击 “Apply” 即可完成写入替换哦！&lt;/li&gt;
&lt;li&gt;不小心误操作的话还可以点 “Revert” 回滚到上个版本哦！&lt;/li&gt;
&lt;li&gt;什么？懒得写 json 配置文件？下面这个附带的 json 配置生成器可以帮你直接生成一个哦！使用 ⇧⌘0 快捷键即可召唤此神器！选择两个工程文件和 json 保存路径后轻轻一点 “Generate” 就搞定咯：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/pbxprojHelper/blob/master/images/GeneratorWindow@2x.png?raw=true&quot; alt=&quot;Generator Window&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以处理工程文件的正确姿势是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拷贝出一份原始的 project.pbxproj 文件&lt;/li&gt;
&lt;li&gt;在 Xcode 界面上修改工程配置，比如修改编译选项，使用自己的证书等&lt;/li&gt;
&lt;li&gt;使用 pbxprojHelper 的 JSON Configuration Generator 来对比修改后的工程文件和原始的工程文件，自动生成 JSON 配置文件&lt;/li&gt;
&lt;li&gt;以后想要在工程文件上施加自己的修改时，只需要应用之前生成好的 JSON 配置文件即可&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;pbxprojHelper 的&lt;strong&gt;优势在于可以自由地增删改查任意属性，原生 UI 降低了使用门槛。功能强大的同时人性化的设计使得更快捷浏览工程文件中的内容。无需写任何代码即可一键配置自己想要的工程文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此外还提供了命令行工具 &lt;code&gt;pbxproj&lt;/code&gt;, 它具有 pbxprojHelper.app 具有的大部分功能：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Usage: pbxproj [command_option] &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Command options are (-convert &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-compare modified_file -o path          compare modified &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; generate a json &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;given&lt;/span&gt; path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-apply json_file                        apply a json &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-revert                                 revert &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; latest backup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-convert                                rewrite &lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; files &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; xml format&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以使用 &lt;code&gt;pbxproj&lt;/code&gt; 搭配 DevToolsCore 私有 framework 来完成修改工程文件并转化成 OpenStep 格式的一条龙自动化程序。&lt;/p&gt;
&lt;p&gt;你可以在 GitHub 上下载最新的 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper/releases/latest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Release&lt;/a&gt; 版。或者在 App Store 中下载：&lt;a href=&quot;https://itunes.apple.com/cn/app/pbxprojhelper/id1160801848?mt=12&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://itunes.apple.com/cn/app/pbxprojhelper/id1160801848?mt=12&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本项目完全手撸，没依赖上面提到的任何轮子😃。&lt;/strong&gt;但由于使用 Swift 3 来开发，所以最低只能支持 macOS 10.12 系统。&lt;/p&gt;
&lt;p&gt;想了解更多信息请查看 GitHub 主页：&lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/pbxprojHelper&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Property_list&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://en.wikipedia.org/wiki/Property_list&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.monobjc.net/xcode-project-file-format.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.monobjc.net/xcode-project-file-format.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1452707/library-to-read-write-pbxproj-xcodeproj-files&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/1452707/library-to-read-write-pbxproj-xcodeproj-files&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj/issues/52&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CocoaPods/Xcodeproj/issues/52&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;project.pbxproj 文件被包含于 Xcode 工程文件 *.xcodeproj 之中，存储着 Xcode 工程的各项配置参数。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。其可读性不如 xml 和 json，苹果却一直沿用至今，作为一家以创新闻名的公司可能这里剩下的就是情怀吧。&lt;/p&gt;
&lt;p&gt;本文谈了下 project.pbxproj 的知识，并总结了一些操作工程文件的优秀轮子，并在最后给出了自己的解决方案 &lt;a href=&quot;https://github.com/yulingtianxia/pbxprojHelper&quot;&gt;pbxprojHelper&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://yulingtianxia.com/tags/Xcode/"/>
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>处理手势冲突和错乱的一点经验</title>
    <link href="http://yulingtianxia.com/blog/2016/08/29/Some-Experience-of-Gesture/"/>
    <id>http://yulingtianxia.com/blog/2016/08/29/Some-Experience-of-Gesture/</id>
    <published>2016-08-29T02:53:51.000Z</published>
    <updated>2016-10-18T16:48:04.000Z</updated>
    
    <content type="html">&lt;p&gt;如果一个页面上包含着很多视图，而且界面上业务逻辑比较复杂，那么手势响应冲突或者错乱很容易发生。这时就得猥琐点啦，见招拆招。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;处理界面多变引发的手势冲突&quot;&gt;&lt;a href=&quot;#处理界面多变引发的手势冲突&quot; class=&quot;headerlink&quot; title=&quot;处理界面多变引发的手势冲突&quot;&gt;&lt;/a&gt;处理界面多变引发的手势冲突&lt;/h2&gt;&lt;h3 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h3&gt;&lt;p&gt;界面变化多意味着什么？负责的业务逻辑？不同机型适配？这都不是我要首先去重点考虑的，但有一点很重要，那就是要有一个完善的状态机！要透过现象看本质：手势冲突的原因？难道是因为那几个 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 方法的实现有问题？或者是因为跨层级传递事件在 &lt;code&gt;hitTest:withEvent:&lt;/code&gt; 里的业务逻辑太复杂没理清？其实这些就算都能弄得很明白，界面内容一变化就容易出问题。更有可能为了快速响应用户的操作而让一些视图常驻内存，而不是每次重新创建和添加，这增加了界面内容的复杂度。&lt;/p&gt;
&lt;p&gt;举个栗子，我想让用户发图片前可以对图片进行编辑，比如加段文字、贴纸、滤镜、涂鸦之类的，甚至可以裁剪和加背景音乐。暂且不说如何展示编辑后的图片，但就编辑的界面就很复杂，毕竟好多种编辑模式要在同一个界面中完成。这少不了各种编辑模式入口的按钮，也少不了每种编辑模式对界面视图层级的叠加。起码滤镜要单独一层吧，每个贴纸和文字都是个视图，涂鸦也要一层视图。裁剪时整个图片包括编辑时添加的内容都要跟着一起缩放和旋转，切换滤镜需要滑动，文字和贴纸都要缩放平移旋转等操作。更别提添加文字、贴纸和背景音乐时要覆盖一个全屏的界面（不用新的 controller，而是添加视图），让用户编辑文字或选择素材。这些业务都在一个 controller 里放着，好多层视图叠加，而且变幻莫测。在什么时刻该响应哪个视图的哪个手势，靠什么判断？答案就是：&lt;strong&gt;状态机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;状态机能解决的更多的是界面错乱的问题，但界面一旦错乱必将对手势判断带来致命影响。就算界面不错乱，也需要在 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 方法或 &lt;code&gt;hitTest:withEvent:&lt;/code&gt; 中知晓当前界面处于何种状态，然后才能准确判断选择哪个手势或哪个视图。这里展开叙述下我对未来可以使用状态机解决 UI 错乱以及因此而引发手势冲突的构想。&lt;/p&gt;
&lt;h3 id=&quot;使用状态机的构想方案&quot;&gt;&lt;a href=&quot;#使用状态机的构想方案&quot; class=&quot;headerlink&quot; title=&quot;使用状态机的构想方案&quot;&gt;&lt;/a&gt;使用状态机的构想方案&lt;/h3&gt;&lt;p&gt;可以认为每种编辑模式下都是一种状态，编辑完成之后也是种状态。还要考虑到初始状态或者无状态的情况。用户对图片上的贴纸和文字等元素进行操作时肯定也要设定一种状态。总之状态不求多，但一定要面面俱到无遗漏，要根据当前界面操作设计状态。某种状态下可能还会有子状态，比如涂鸦模式下可能会有画笔、橡皮擦、马赛克，并能选择粗细之类的功能。这些都属于涂鸦模式下界面中的其他小功能，如果把这些功能的对应的状态跟其他几种编辑模式对应的状态放在一起，能保证唯一性的话倒不是说不可以，但很不合适。&lt;/p&gt;
&lt;p&gt;每种状态都要规定它的『下一个状态』的集合，比如涂鸦模式下可能会进入到编辑完成状态，也可能返回到初始状态，也可能进入到裁剪状态。。。这些规则要照着产品经理指定的业务逻辑来，做到调理清晰。制定好每种状态的『下一个状态』的集合后，一张有向图就会展现出来了，规则定了就好办了。不要把这些状态简单理解成『一个枚举』，要用面向对象的思想来实现。比如可以建立个表示状态的基类，再弄个 &lt;code&gt;isValidNextState:&lt;/code&gt; 方法来判断输入的状态是否能当做此状态的『下一个状态』。苹果的 &lt;code&gt;GameplayKit&lt;/code&gt; 中的状态机（&lt;code&gt;GKStateMachine&lt;/code&gt;）就是个很不错的例子。&lt;/p&gt;
&lt;p&gt;下一步就是状态的响应，在状态转换时驱动界面元素的变化。什么？不是应该在点击按钮时对界面做变更么？这种思维很局限，也是导致代码复用不高和 bug 频出的原因。能够改变编辑模式的不一定只有按钮点击，这要根据产品的业务。所以应该让界面变更依赖于状态的变化，这样更集中统一，不容易出差错。（但这样的缺点可能就是产品经理要求上报用户行为时无法获知用户何种操作导致状态变化，这里只能通过在状态类中加标志位判断了。）&lt;/p&gt;
&lt;p&gt;最关键的是在正确的位置添加状态切换的代码，一定要覆盖全面毫无遗漏。这是保证整个状态机运行的关键！&lt;/p&gt;
&lt;p&gt;说了这么多，也没看出状态机跟手势有多大关系啊？直观点讲，在涂鸦状态下是不会响应双指操作的手势的，因为只有单个手指的 Pan 和 Tap 手势；而在操作文字和贴纸的状态下 Pinch、Rotation 和 Pan 是可以同时响应的，因为用户可以旋转缩放视图的同时挪动视图位置，而 Tap 手势此时可能还会赋有其他的功能。总之状态机将复杂的业务逻辑所对应的手势操作划分开，提供了准确唯一的判断。&lt;/p&gt;
&lt;p&gt;如果不使用状态机，（打个比方）而是根据界面上某个按钮的 &lt;code&gt;selected&lt;/code&gt; 或者某个视图的 &lt;code&gt;hidden&lt;/code&gt; 属性来判断下一步的操作，那肯定会出大乱子。因为 UI 控件的状态不可靠，能够改变它们的因素很多，而且会有多个 UI 状态同时存在导致冲突。唯有状态机牢牢把我在程序员的手里，唯一且准确。&lt;/p&gt;
&lt;h2 id=&quot;处理界面复杂引发的手势错乱&quot;&gt;&lt;a href=&quot;#处理界面复杂引发的手势错乱&quot; class=&quot;headerlink&quot; title=&quot;处理界面复杂引发的手势错乱&quot;&gt;&lt;/a&gt;处理界面复杂引发的手势错乱&lt;/h2&gt;&lt;h3 id=&quot;情景还原&quot;&gt;&lt;a href=&quot;#情景还原&quot; class=&quot;headerlink&quot; title=&quot;情景还原&quot;&gt;&lt;/a&gt;情景还原&lt;/h3&gt;&lt;p&gt;『你看贴纸这么多手指又太大缩放不灵敏真不怪我啊，臣妾真的办不到啊！』&lt;/p&gt;
&lt;p&gt;『哎呀，本来想旋转某个贴纸的，结果两个手指分别在另外两个贴纸上。这么多小贴纸放这么密用户好变态啊！』&lt;/p&gt;
&lt;p&gt;。。。真是乱，想操作 A 视图却意外操作了 B 视图。。。&lt;/p&gt;
&lt;h3 id=&quot;分析问题-1&quot;&gt;&lt;a href=&quot;#分析问题-1&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h3&gt;&lt;h4 id=&quot;对手势统一处理和分发&quot;&gt;&lt;a href=&quot;#对手势统一处理和分发&quot; class=&quot;headerlink&quot; title=&quot;对手势统一处理和分发&quot;&gt;&lt;/a&gt;对手势统一处理和分发&lt;/h4&gt;&lt;p&gt;要是给每个视图内容都单独添加一套 Tap、Pan、LongPress、Pinch、Rotation 手势那真是找死啊，手势不错乱才怪呢！别再把手势错乱归结于界面上视图多，要怪就怪添加手势的姿势不对！&lt;/p&gt;
&lt;p&gt;当界面内容数量较多时还是要尊崇大一统的思想，把各种手势全都添加到底层的全屏视图上，然后统一处理和分发结果。因为每种手势只有一个且都加在了底层视图，所以不会发生不同视图间的手势错乱。而不同种手势之间的冲突就需要在 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 中根据业务逻辑来解决了。&lt;/p&gt;
&lt;p&gt;那么该如何判断哪个视图响应了手势的操作呢？用户最希望的肯定是最顶层的且距离手指最近的视图。这里难在如何选择距离手指最近的视图。&lt;/p&gt;
&lt;h4 id=&quot;计算响应手势的视图&quot;&gt;&lt;a href=&quot;#计算响应手势的视图&quot; class=&quot;headerlink&quot; title=&quot;计算响应手势的视图&quot;&gt;&lt;/a&gt;计算响应手势的视图&lt;/h4&gt;&lt;p&gt;可以通过 &lt;code&gt;locationInView:&lt;/code&gt; 获取手势的坐标，但这里决不能简单地计算手势坐标到视图 &lt;code&gt;center&lt;/code&gt; 的距离并选取最近的视图。这里需要检测手势坐标处于哪个视图的&lt;strong&gt;范围&lt;/strong&gt;内，包括『在视图区域内』（红色）和『在视图周围区域』（橙色）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/SomeExperienceofGesture/WhichViewShouldResponseToGesture.png&quot; alt=&quot;选择响应手势的视图&quot;&gt;&lt;/p&gt;
&lt;p&gt;策略是先看手势坐标处于哪些视图的『视图区域』中，如果没找到，就再扩大查找范围至『周围区域』。最后如果有多个视图满足要求，就选择最顶层的视图。如果没有任何视图满足要求，可以不做任何处理；也可以根据产品策略对界面上唯一的视图进行操作。这里就看业务怎么规定的了。&lt;/p&gt;
&lt;p&gt;至于『周围区域』该如何划定，具体参数就看产品制定的策略进行微调了。总之传入一个 &lt;code&gt;UIEdgeInsets&lt;/code&gt; 就能搞定。&lt;/p&gt;
&lt;p&gt;在用代码实现的时候可以优化逻辑来减少遍历的时间复杂度：从最顶层视图到最底层视图开始遍历，如果手势坐标命中『视图区域』内，则直接得出结果。否则如果手势坐标命中『周围区域』内，就计算手势到视图中心距离并在遍历完成后得到距离最近的视图。&lt;/p&gt;
&lt;h3 id=&quot;解决问题&quot;&gt;&lt;a href=&quot;#解决问题&quot; class=&quot;headerlink&quot; title=&quot;解决问题&quot;&gt;&lt;/a&gt;解决问题&lt;/h3&gt;&lt;h4 id=&quot;处理-Pinch-手势&quot;&gt;&lt;a href=&quot;#处理-Pinch-手势&quot; class=&quot;headerlink&quot; title=&quot;处理 Pinch 手势&quot;&gt;&lt;/a&gt;处理 Pinch 手势&lt;/h4&gt;&lt;p&gt;在视图被缩放时，一般是改变 &lt;code&gt;transform&lt;/code&gt; 属性。关于 &lt;code&gt;CGAffineTransform&lt;/code&gt; 的知识这里不再赘述。&lt;/p&gt;
&lt;h5 id=&quot;分辨率&quot;&gt;&lt;a href=&quot;#分辨率&quot; class=&quot;headerlink&quot; title=&quot;分辨率&quot;&gt;&lt;/a&gt;分辨率&lt;/h5&gt;&lt;p&gt;当对含有矢量内容的视图进行缩放时会有模糊和锯齿出现，这时递归需要改变 &lt;code&gt;UIView&lt;/code&gt; 的 &lt;code&gt;contentScaleFactor&lt;/code&gt; 和 &lt;code&gt;CALayer&lt;/code&gt; 的 &lt;code&gt;contentsScale&lt;/code&gt; 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateForZoomScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)zoomScale &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; screenAndZoomScale = zoomScale * [&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Walk the layer and view hierarchies separately. We need to reach all tiled layers.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:screenAndZoomScale toView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:screenAndZoomScale toLayer:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)applyScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)scale toView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    view.contentScaleFactor = scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; view.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:scale toView:subview];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)applyScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)scale toLayer:(&lt;span class=&quot;built_in&quot;&gt;CALayer&lt;/span&gt; *)layer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    layer.contentsScale = scale;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CALayer&lt;/span&gt; *sublayer &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; layer.sublayers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; applyScale:scale toLayer:sublayer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;坐标&quot;&gt;&lt;a href=&quot;#坐标&quot; class=&quot;headerlink&quot; title=&quot;坐标&quot;&gt;&lt;/a&gt;坐标&lt;/h5&gt;&lt;p&gt;视图的 &lt;code&gt;transform&lt;/code&gt; 属性是不会修改视图的 &lt;code&gt;bounds&lt;/code&gt; 的，但 &lt;code&gt;frame&lt;/code&gt; 作为计算属性还是会变化的。也就是说无论视图放大了多少倍，视图内部的子视图的 &lt;code&gt;frame&lt;/code&gt; 不会变。&lt;/p&gt;
&lt;p&gt;总之，&lt;code&gt;transform&lt;/code&gt; 属性改变的是视图的 &lt;code&gt;frame&lt;/code&gt;，而 &lt;code&gt;bounds&lt;/code&gt; 和子视图的 &lt;code&gt;frame&lt;/code&gt; 都不会变。也就是&lt;strong&gt;视图内部的坐标系不会改变&lt;/strong&gt;。记住这点，很有用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/SomeExperienceofGesture/transform%E5%AF%B9%E6%AF%94%E5%9D%90%E6%A0%87.png&quot; alt=&quot;改变 transform 后的坐标系&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图展示的是缩放后的坐标变换，也同样适用于旋转。都是相对坐标系的知识罢了。&lt;/p&gt;
&lt;h4 id=&quot;处理-Rotation-手势&quot;&gt;&lt;a href=&quot;#处理-Rotation-手势&quot; class=&quot;headerlink&quot; title=&quot;处理 Rotation 手势&quot;&gt;&lt;/a&gt;处理 Rotation 手势&lt;/h4&gt;&lt;p&gt;之前一直用『视图区域』而不直接用 &lt;code&gt;frame&lt;/code&gt; 来描述手势判断依据，是因为当视图旋转（90°倍数除外）之后 &lt;code&gt;frame&lt;/code&gt; 并不等于『视图区域』：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/SomeExperienceofGesture/Rotation%E5%8C%BA%E5%9F%9F%E5%88%A4%E6%96%AD.png&quot; alt=&quot;旋转后的视图&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说如果按照 &lt;code&gt;frame&lt;/code&gt; 来判断『视图区域』是偏大的，会遮挡住其他视图。所以我专门写了个方法用于判断某个点是否在『视图区域』内，还提供了 &lt;code&gt;UIEdgeInsets&lt;/code&gt; 参数用于满足判断『周围区域』的要求：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  判断某个点是否在视图区域内，针对 transform 做了转换计算，并提供 UIEdgeInsets 缩放区域的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param point  要判断的点坐标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param view   传入的视图，一定要与本视图处于同一视图树中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param insets UIEdgeInsets参数可以调整判断的边界&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @return BOOL类型，返回点坐标是否位于视图内&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)checkPoint:(&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;) point inView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)view withInsets:(&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt;)insets&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	 &lt;span class=&quot;comment&quot;&gt;// 将点坐标转化为视图内坐标系的点，消除 transform 带来的影响&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; convertedPoint = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; convertPoint:point toView:view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGAffineTransform&lt;/span&gt; viewTransform = view.transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 计算视图缩放比例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; scale = sqrt(viewTransform.a * viewTransform.a + viewTransform.c * viewTransform.c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将 UIEdgeInsets 除以缩放比例，以便得到真实的『周围区域』&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt; scaledInsets = (&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsets&lt;/span&gt;)&amp;#123;insets.top/scale,insets.left/scale,insets.bottom/scale,insets.right/scale&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; resultRect = &lt;span class=&quot;built_in&quot;&gt;UIEdgeInsetsInsetRect&lt;/span&gt;(view.bounds, scaledInsets);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 判断给定坐标点是否在区域内&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CGRectContainsPoint&lt;/span&gt;(resultRect, convertedPoint)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经过此方法处理后会使得区域判断更准确，那些旋转过的视图带来的手势失效也得以解决。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;其实如果所有手势都交给一个底层视图统一处理的话，上层那一坨视图是不需要响应触摸事件的，有些甚至可以用 Layer 来做。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 和 &lt;code&gt;hitTest:withEvent:&lt;/code&gt; 的用法官方文档中有详细阐述，能够解决手势问题的前提是熟悉文档，然后才是一些思想和架构层面的解决方案。比如 Tap 手势要先让 Pan 手势失败之类的手势冲突就可以用 &lt;code&gt;UIGestureRecognizerDelegate&lt;/code&gt; 处理，不再列举。&lt;/p&gt;
&lt;p&gt;我碰到的应用场景有限，经验不够多，还请大家补充经验！ &lt;/p&gt;
&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5927223/scaling-uitextview-using-contentscalefactor-property&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/5927223/scaling-uitextview-using-contentscalefactor-property&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如果一个页面上包含着很多视图，而且界面上业务逻辑比较复杂，那么手势响应冲突或者错乱很容易发生。这时就得猥琐点啦，见招拆招。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>自制一款强大的 ActionSheet</title>
    <link href="http://yulingtianxia.com/blog/2016/07/18/TBActionSheet/"/>
    <id>http://yulingtianxia.com/blog/2016/07/18/TBActionSheet/</id>
    <published>2016-07-18T04:36:15.000Z</published>
    <updated>2017-02-27T15:36:27.000Z</updated>
    
    <content type="html">&lt;p&gt;iOS 系统自带的 &lt;code&gt;UIActionSheet&lt;/code&gt; 无法满足开发中高度个性化的 UI 风格和代码风格，所以我决定自己动手丰衣足食，于是 &lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 诞生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/TBActionSheet/blob/master/images/demo.gif?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github：&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/TBActionSheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 不仅还原了 &lt;code&gt;UIActionSheet&lt;/code&gt; 的几乎所有功能和 API，还在此基础上支持如下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;block 语法&lt;/li&gt;
&lt;li&gt;插入自定义的 Header 视图&lt;/li&gt;
&lt;li&gt;自定义字体、颜色、尺寸、圆角等&lt;/li&gt;
&lt;li&gt;将毛玻璃效果支持到了 iOS7，且可以定义颜色&lt;/li&gt;
&lt;li&gt;支持 Cocoapods 和 Carthage&lt;/li&gt;
&lt;li&gt;支持在 Title 下面设置 Message&lt;/li&gt;
&lt;li&gt;支持点击背景关闭&lt;/li&gt;
&lt;li&gt;可以在显示后动态更新 UI&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;为何要造这个轮子&quot;&gt;&lt;a href=&quot;#为何要造这个轮子&quot; class=&quot;headerlink&quot; title=&quot;为何要造这个轮子&quot;&gt;&lt;/a&gt;为何要造这个轮子&lt;/h1&gt;&lt;p&gt;可能上午视觉同学要求所有系统版本的 ActionSheet 都要做成 iOS9 的圆角样式，下午就推翻做成跟微信一模一样，晚上又觉得微信的好丑风格不搭。。。如何以不变应万变？自己造个万能轮子！&lt;/p&gt;
&lt;p&gt;其实有一些开源的 ActionSheet，但都不满足我的要求：&lt;strong&gt;高度个性化，私人定制&lt;/strong&gt;，而且&lt;strong&gt;几乎其他开源的 ActionSheet 都不支持自动旋转，只支持竖屏不能横屏&lt;/strong&gt;。而系统的 &lt;code&gt;UIActionSheet&lt;/code&gt; 是支持这个功能的。&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 做到在 iOS8+ 上的旋转屏幕适配，之所以不兼容 iOS7+ 是因为 iOS7 和 iOS8+ 的旋转机制和坐标体系有较大差别，总结为一个字：&lt;strong&gt;懒&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;其实造这个轮子的原因还真就是因为&lt;strong&gt;懒&lt;/strong&gt;！因为视觉同学经常会调整风格，改来改去真的会产生大量废弃的冗余代码，因为怕未来某个时间点又被改回去，所以不敢删代码只好注释掉。&lt;strong&gt;我就是要做个高度个性化的组件，每次修改 UI 只需要修改几个属性就可以&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;针对上面功能列表列出的第 1 条和第 6 条，系统的 &lt;code&gt;UIAlertController&lt;/code&gt; 也可以办得到，但缺点是只能在 iOS8+ 使用。而 &lt;code&gt;UIActionSheet&lt;/code&gt; 和 &lt;code&gt;UIAlertView&lt;/code&gt; 却在 iOS8.3 被废弃，这是个青黄不接的年代，为此我曾经开发了 &lt;code&gt;TBAlertController&lt;/code&gt; 来兼容高低各种版本的系统，实现原理在 &lt;a href=&quot;http://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/&quot;&gt;腾讯实习第一个月工作总结&lt;/a&gt; 有详细讲解。&lt;code&gt;TBAlertController&lt;/code&gt; 使用的都是系统控件，不可定制，但也被我集成到了 &lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 项目中。&lt;/p&gt;
&lt;p&gt;在做到功能强大高度个性化的同时也要注重对系统控件原有 API 的最大还原，在绝大多数情况下只需要将代码中的 &lt;code&gt;UI&lt;/code&gt; 替换成 &lt;code&gt;TB&lt;/code&gt; 即可，降低改动成本。&lt;/p&gt;
&lt;h1 id=&quot;界面组成&quot;&gt;&lt;a href=&quot;#界面组成&quot; class=&quot;headerlink&quot; title=&quot;界面组成&quot;&gt;&lt;/a&gt;界面组成&lt;/h1&gt;&lt;p&gt;从 UI 上大致划分成几个区域，它们都在 &lt;code&gt;TBActionSheet&lt;/code&gt; 的视图层级树中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TBActionBackground&lt;/code&gt; 为半透明背景&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TBActionContainer&lt;/code&gt; 是容纳 Sheet 视图的容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 属性是标题和消息，类型为 &lt;code&gt;UILabel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;customView&lt;/code&gt; 属性是个普通的 &lt;code&gt;UIView&lt;/code&gt;，供使用者传入自定义视图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TBActionButton&lt;/code&gt; 是对应着每个 Action 的按钮&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/TBActionSheet/overview.jpg&quot; alt=&quot;视图层级&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有的坐标和尺寸都是代码计算出来的，没有用自动布局，容器的大小是根据其子视图的 frame 决定的，这其中包含很多计算。&lt;/p&gt;
&lt;p&gt;在实际使用时只需使用 &lt;code&gt;TBActionSheet&lt;/code&gt; 就可以了，所以上面提到的类都是幕后工作者。我将会讲述每部分具体实现和一些功能点的实现。&lt;/p&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;背景是 &lt;code&gt;TBActionSheet&lt;/code&gt; 的子视图中最底层的视图。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionBackground&lt;/code&gt; 继承于 &lt;code&gt;UIImageView&lt;/code&gt;，虽然目前只是个拥有半透明黑色的可相应点击事件的视图，但是考虑到拓展性，允许使用者在背景上设置图片。&lt;/p&gt;
&lt;p&gt;点击背景后会调用父视图 &lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;close&lt;/code&gt; 方法关闭，后续会有详述。&lt;/p&gt;
&lt;h2 id=&quot;容器&quot;&gt;&lt;a href=&quot;#容器&quot; class=&quot;headerlink&quot; title=&quot;容器&quot;&gt;&lt;/a&gt;容器&lt;/h2&gt;&lt;p&gt;我在实现的时候没有使用自动布局，而是自己计算 frame。容器的作用是把一系列内容包装起来，方便计算 frame。&lt;code&gt;TBActionContainer&lt;/code&gt; 容纳了整个 ActionSheet 的主体功能视图，系统的毛玻璃效果也是在这添加的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 中好多属性其实并不是作为 &lt;code&gt;TBActionSheet&lt;/code&gt; 的子视图，而是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的子视图，比如：&lt;code&gt;titleLabel&lt;/code&gt;、&lt;code&gt;messageLabel&lt;/code&gt;、&lt;code&gt;customView&lt;/code&gt; 以及&lt;code&gt;buttons&lt;/code&gt; 数组中的 &lt;code&gt;TBActionButton&lt;/code&gt; 对象。既然这些视图都是容器的子视图，为何不在容器中声明对应的属性呢？目的是尽量将视图暴露给 &lt;code&gt;TBActionSheet&lt;/code&gt; 上集中处理，也方便对外集中提供属性和接口。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionContainer&lt;/code&gt; 中有对 &lt;code&gt;TBActionSheet&lt;/code&gt; 的弱引用，目的是便于获取一些属性值。&lt;/p&gt;
&lt;p&gt;容器从上到下依次为 &lt;code&gt;header&lt;/code&gt;，&lt;code&gt;custom&lt;/code&gt;，&lt;code&gt;footer&lt;/code&gt; 以及 &lt;code&gt;buttons&lt;/code&gt; 和 &lt;code&gt;separators&lt;/code&gt; 数组。Separator 指的是按钮之间的空隙，可以设置背景颜色。也就是说容器下面还有几个小容器，比如 &lt;code&gt;header&lt;/code&gt; 容纳标题和消息，&lt;code&gt;custom&lt;/code&gt; 容纳自定义视图，而 &lt;code&gt;footer&lt;/code&gt; 目前是空的，仅作为拓展。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionContainer&lt;/code&gt; 继承于 &lt;code&gt;UIImageView&lt;/code&gt;，&lt;code&gt;header&lt;/code&gt;，&lt;code&gt;custom&lt;/code&gt;，&lt;code&gt;footer&lt;/code&gt; 类型也都是 &lt;code&gt;UIImageView&lt;/code&gt;。这是为了实现毛玻璃效果，后续会有详述。&lt;/p&gt;
&lt;h2 id=&quot;标题-amp-消息&quot;&gt;&lt;a href=&quot;#标题-amp-消息&quot; class=&quot;headerlink&quot; title=&quot;标题&amp;amp;消息&quot;&gt;&lt;/a&gt;标题&amp;amp;消息&lt;/h2&gt;&lt;p&gt;系统的 &lt;code&gt;UIActionSheet&lt;/code&gt; 只支持标题没有消息，但可以通过换行的方式伪装下标题和消息。我这里当然是用两个 &lt;code&gt;UILabel&lt;/code&gt; 来实现标题和消息的啦，字体颜色也尽量还原 &lt;code&gt;UIAlertController&lt;/code&gt; 的样式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 属性是 &lt;code&gt;readonly&lt;/code&gt; 的，它们都是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的 &lt;code&gt;header&lt;/code&gt; 属性的子视图。&lt;/p&gt;
&lt;h2 id=&quot;自定义视图&quot;&gt;&lt;a href=&quot;#自定义视图&quot; class=&quot;headerlink&quot; title=&quot;自定义视图&quot;&gt;&lt;/a&gt;自定义视图&lt;/h2&gt;&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;customView&lt;/code&gt; 属性可供使用者传入一个 &lt;code&gt;UIView&lt;/code&gt; 对象，它是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的 &lt;code&gt;custom&lt;/code&gt; 属性的子视图。自定义视图能够接收到触摸事件。&lt;/p&gt;
&lt;h2 id=&quot;按钮&quot;&gt;&lt;a href=&quot;#按钮&quot; class=&quot;headerlink&quot; title=&quot;按钮&quot;&gt;&lt;/a&gt;按钮&lt;/h2&gt;&lt;p&gt;所有的按钮都存储于 &lt;code&gt;TBActionSheet&lt;/code&gt; 的 &lt;code&gt;buttons&lt;/code&gt; 数组中，类型为 &lt;code&gt;TBActionButton&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionButton&lt;/code&gt; 继承于 &lt;code&gt;UIButton&lt;/code&gt;，有三种 &lt;code&gt;style&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_ENUM&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;TBActionButtonStyle&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBActionButtonStyleDefault&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBActionButtonStyleCancel&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBActionButtonStyleDestructive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;TBActionButton&lt;/code&gt; 还提供了 &lt;code&gt;normalColor&lt;/code&gt; 和 &lt;code&gt;highlightedColor&lt;/code&gt; 属性，用于设置按钮不同状态下的颜色。如果开启了毛玻璃效果且让 Container 的背景透明，那就需要为容器中每个单独的视图添加毛玻璃效果，所以每个按钮背后都需要分别放置一个同等大小的视图用于毛玻璃效果和变换颜色。&lt;code&gt;behindColorView&lt;/code&gt; 属性就是设置颜色的视图。在按钮高亮时它的 &lt;code&gt;alpha&lt;/code&gt; 会被设成 0.5。有关毛玻璃效果具体实现细节后续会详述。&lt;/p&gt;
&lt;p&gt;为了支持 block 语法，&lt;code&gt;TBActionButton&lt;/code&gt; 内部保留了一个只读的 block 属性 &lt;code&gt;handler&lt;/code&gt;，而设置 block 只能通过它的工厂方法，实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;instancetype)buttonWithTitle:(NSString &lt;/span&gt;*)title style:(TBActionButtonStyle)style handler:(void (^ __nullable)( TBActionButton * _Nonnull &lt;span class=&quot;keyword&quot;&gt;button))handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionButton *&lt;span class=&quot;keyword&quot;&gt;button &lt;/span&gt;= [TBActionButton &lt;span class=&quot;keyword&quot;&gt;buttonWithType:UIButtonTypeCustom];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;button.style &lt;/span&gt;= style&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;button.handler &lt;/span&gt;= handler&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;button.clipsToBounds &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;button &lt;/span&gt;setTitle:title forState:UIControlStateNormal]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;button &lt;/span&gt;setBackgroundColor:[UIColor clearColor]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;button.titleLabel &lt;/span&gt;setFont:[UIFont systemFontOfSize:&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;]]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;button;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了这个版本的工厂方法，还有个不提供 &lt;code&gt;handler&lt;/code&gt; 参数的版本：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (instance&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;)buttonWithTitle:(&lt;span class=&quot;type&quot;&gt;NSString&lt;/span&gt; *)title style:(&lt;span class=&quot;type&quot;&gt;TBActionButtonStyle&lt;/span&gt;)style;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至于 block 的属性内存管理语义是用 &lt;code&gt;strong&lt;/code&gt; 还是 &lt;code&gt;copy&lt;/code&gt;，其实这是个历史问题，在 MRC 时代是需要用 &lt;code&gt;copy&lt;/code&gt; 的，因为 ARC 会自动帮我们进行 &lt;code&gt;copy&lt;/code&gt;，所以这里用 &lt;code&gt;strong&lt;/code&gt; 也可以。苹果官方的态度比较换旧，建议仍然使用 &lt;code&gt;copy&lt;/code&gt;，虽然这并没什么乱用。&lt;/p&gt;
&lt;p&gt;因为按钮的数量毕竟有限，对于按钮圆角的实现就不需要考虑性能问题了。有关圆角的这部分后续会有专门一节叙述。&lt;/p&gt;
&lt;h1 id=&quot;接口实现&quot;&gt;&lt;a href=&quot;#接口实现&quot; class=&quot;headerlink&quot; title=&quot;接口实现&quot;&gt;&lt;/a&gt;接口实现&lt;/h1&gt;&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 具有 &lt;code&gt;UIActionSheet&lt;/code&gt; 的&lt;strong&gt;几乎&lt;/strong&gt;所有接口和属性，可以说前者是后者的超集。之所以说『几乎』，是因为我在 &lt;code&gt;UIWindow&lt;/code&gt; 上模态显示 ActionSheet，相当于 &lt;code&gt;UIAlertController&lt;/code&gt; 的做法，于是以下 &lt;code&gt;UIActionSheet&lt;/code&gt; 的接口我目前并没有实现：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromToolbar:&lt;span class=&quot;params&quot;&gt;(UIToolbar *)&lt;/span&gt;view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromTabBar:&lt;span class=&quot;params&quot;&gt;(UITabBar *)&lt;/span&gt;view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromBarButtonItem:&lt;span class=&quot;params&quot;&gt;(UIBarButtonItem *)&lt;/span&gt;item animated:&lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;animated ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showFromRect:&lt;span class=&quot;params&quot;&gt;(CGRect)&lt;/span&gt;rect inView:&lt;span class=&quot;params&quot;&gt;(UIView *)&lt;/span&gt;view animated:&lt;span class=&quot;params&quot;&gt;(BOOL)&lt;/span&gt;animated;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(void)&lt;/span&gt;showInView:&lt;span class=&quot;params&quot;&gt;(UIView *)&lt;/span&gt;view;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外 &lt;code&gt;UIActionSheet&lt;/code&gt; 的属性和接口在 &lt;code&gt;TBActionSheet&lt;/code&gt; 都有山寨，只是把 &lt;code&gt;UI&lt;/code&gt; 换成了 &lt;code&gt;TB&lt;/code&gt;，比如 &lt;code&gt;delegate&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nullable&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) id&amp;lt;TBActionSheetDelegate&amp;gt; delegate;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;TBActionSheetDelegate&lt;/code&gt; 中的方法跟 &lt;code&gt;UIActionSheetDelegate&lt;/code&gt; 中的方法 selector 完全一样。&lt;/p&gt;
&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;初始化方法的设计延续了 &lt;code&gt;UIActionSheet&lt;/code&gt; 的接口，在此基础上还加了个带有 &lt;code&gt;message&lt;/code&gt; 参数的方法。&lt;strong&gt;为了减少冗余代码，实现高内聚低耦合的设计模式，一般会写一个参数最多功能最全的方法，其他参数少的方法去调用前者&lt;/strong&gt;。这种层层 Forward 参数的方式在 API 设计中很常见。由于这两个方法都带有可变参数，且&lt;strong&gt;不能在一个带有可变参数的方法中直接调用另一个带有可变参数的方法&lt;/strong&gt;。因为函数参数入栈或者存入寄存器的方式都是有规可循的，我也曾尝试过在 x86-64 下找出指针固定的偏移量，遵循 x86-64 calling convention 下的可变参数调用从而修正 &lt;code&gt;va_list&lt;/code&gt; 结构体的值。x86 下 &lt;code&gt;va_list&lt;/code&gt; 是个 &lt;code&gt;char *&lt;/code&gt;，而 x86-64 架构下 &lt;code&gt;va_list&lt;/code&gt; 是个结构体：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; gp_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fp_offset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *overflow_arg_area;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *reg_save_area;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; va_list[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我当时正是给结构体中的数据加上一段位移，使其在可变参数函数之间调用时不 crash，但这样意义不大。关于 &lt;code&gt;va_list&lt;/code&gt; 与 calling convention 的细节可以参考 &lt;a href=&quot;http://blog.csdn.net/videosender/article/details/6425671&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;c/c++ 里面的变长参数的实现&lt;/a&gt; 和 &lt;a href=&quot;http://stackoverflow.com/questions/4958384/what-is-the-format-of-the-x86-64-va-list-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;System V Application Binary Interface&lt;/a&gt; 第52页，这里不再做延伸。&lt;/p&gt;
&lt;p&gt;简单的做法是写一个方法接受参数类型为 &lt;code&gt;va_list&lt;/code&gt;，将大部分公共逻辑写在里面。这些公共逻辑包括调用 &lt;code&gt;init&lt;/code&gt;，给 &lt;code&gt;title&lt;/code&gt;、&lt;code&gt;message&lt;/code&gt; 和 &lt;code&gt;delegate&lt;/code&gt;属性赋值，添加 Cancel 和 Destructive 按钮，遍历 &lt;code&gt;va_list&lt;/code&gt; 添加按钮：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)title message:(nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)message delegate:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;TBActionSheetDelegate&amp;gt;)delegate cancelButtonTitle:(nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)cancelButtonTitle destructiveButtonTitle:(nullable &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)destructiveButtonTitle firstOtherButtonTitle:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)firstOtherButtonTitle titleList:(va_list)argList&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _title = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _message = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _delegate = delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (destructiveButtonTitle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _destructiveButtonIndex = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:destructiveButtonTitle style:TBActionButtonStyleDestructive];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (firstOtherButtonTitle) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 第一个参数 firstOtherButtonTitle 是不属于参数列表的,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:firstOtherButtonTitle style:TBActionButtonStyleDefault];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;* eachArg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((eachArg = va_arg(argList, &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt;*))) &amp;#123;&lt;span class=&quot;comment&quot;&gt;// 从 args 中遍历出参数，NSString* 指明类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:eachArg style:TBActionButtonStyleDefault];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (cancelButtonTitle) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _cancelButtonIndex = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addButtonWithTitle:cancelButtonTitle style:TBActionButtonStyleCancel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为第一个参数不包含在 &lt;code&gt;va_list&lt;/code&gt; 中，所以也需要把第一个参数传入。&lt;code&gt;va_arg (va_list ap, type)&lt;/code&gt; 像个迭代器一样每次根据 &lt;code&gt;type&lt;/code&gt; 计算位移获取参数并更新 &lt;code&gt;va_list&lt;/code&gt;。 &lt;code&gt;va_list&lt;/code&gt; 的初始化是用 &lt;code&gt;va_start&lt;/code&gt; 宏初始化的，并以 &lt;code&gt;va_end&lt;/code&gt; 宏结束。有关这些宏的定义，详见 &lt;a href=&quot;http://www.cplusplus.com/reference/cstdarg/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stdarg.h&lt;/a&gt; 和 &lt;a href=&quot;http://blog.csdn.net/edonlii/article/details/8497704&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;于是那两个可变参数的初始化方法代码大大减少，调用上面的方法就可以。这样先将可变参数内容初始化到 &lt;code&gt;va_list&lt;/code&gt; 中再传参调动的方式避免了 calling convention 的问题：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)&lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;(NSString *)title &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;(id&amp;lt;TBActionSheetDelegate&amp;gt;)delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;(nullable NSString *)cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;(nullable NSString *)destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;otherButtonTitles:&lt;/span&gt;(nullable NSString *)otherButtonTitles, ... NS_REQUIRES_NIL_TERMINATION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list argList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从 otherButtonTitles 开始遍历参数，不包括 otherButtonTitles 本身.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(argList, otherButtonTitles);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [self &lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;title &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;nil &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;firstOtherButtonTitle:&lt;/span&gt;otherButtonTitles &lt;span class=&quot;string&quot;&gt;titleList:&lt;/span&gt;argList];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(argList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)&lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;(NSString *)title &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;(nullable NSString *)message &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;(id&amp;lt;TBActionSheetDelegate&amp;gt;)delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;(nullable NSString *)cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;(nullable NSString *)destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;otherButtonTitles:&lt;/span&gt;(nullable NSString *)otherButtonTitles, ... NS_REQUIRES_NIL_TERMINATION&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list argList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从 otherButtonTitles 开始遍历参数，不包括 otherButtonTitles 本身.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(argList, otherButtonTitles);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self = [self &lt;span class=&quot;string&quot;&gt;initWithTitle:&lt;/span&gt;title &lt;span class=&quot;string&quot;&gt;message:&lt;/span&gt;message &lt;span class=&quot;string&quot;&gt;delegate:&lt;/span&gt;delegate &lt;span class=&quot;string&quot;&gt;cancelButtonTitle:&lt;/span&gt;cancelButtonTitle &lt;span class=&quot;string&quot;&gt;destructiveButtonTitle:&lt;/span&gt;destructiveButtonTitle &lt;span class=&quot;string&quot;&gt;firstOtherButtonTitle:&lt;/span&gt;otherButtonTitles &lt;span class=&quot;string&quot;&gt;titleList:&lt;/span&gt;argList];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(argList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了减少冗余代码我也是拼了。。。下面继续说 &lt;code&gt;init&lt;/code&gt; 方法。主要工作是对一些属性的初始化工作，并将背景和容器依次添加为子视图，还有监听状态栏朝向变化的通知：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithFrame:[&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _background = [[TBActionBackground alloc] initWithFrame:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addSubview:_background];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _actionContainer = [[TBActionContainer alloc] initWithSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addSubview:_actionContainer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _buttons = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _separators = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; array];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//set default values&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _cancelButtonIndex = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _destructiveButtonIndex = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [[&lt;span class=&quot;built_in&quot;&gt;NSNotificationCenter&lt;/span&gt; defaultCenter] addObserver:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(statusBarDidChangeOrientation:) name:&lt;span class=&quot;built_in&quot;&gt;UIApplicationDidChangeStatusBarOrientationNotification&lt;/span&gt; object:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;添加按钮&quot;&gt;&lt;a href=&quot;#添加按钮&quot; class=&quot;headerlink&quot; title=&quot;添加按钮&quot;&gt;&lt;/a&gt;添加按钮&lt;/h2&gt;&lt;p&gt;添加按钮的实现就是调用 &lt;code&gt;TBActionButton&lt;/code&gt; 的工厂方法新建一个按钮，然后将其设置好点击事件处理的方法后，将按钮实例添加到 &lt;code&gt;buttons&lt;/code&gt; 数组中。针对按钮不同的风格，会更新 &lt;code&gt;cancelButtonIndex&lt;/code&gt; 和 &lt;code&gt;destructiveButtonIndex&lt;/code&gt;，这里做了个兼容性的妥协：&lt;code&gt;UIActionSheet&lt;/code&gt; 提供的接口只能至多有一个 &lt;code&gt;cancelButtonTitle&lt;/code&gt; 或 &lt;code&gt;destructiveButtonTitle&lt;/code&gt;，而 &lt;code&gt;UIAlertController&lt;/code&gt; 的接口却支持多个。&lt;code&gt;TBActionSheet&lt;/code&gt; 支持多个 &lt;code&gt;cancelButtonTitle&lt;/code&gt; 或 &lt;code&gt;destructiveButtonTitle&lt;/code&gt;，但 &lt;code&gt;cancelButtonIndex&lt;/code&gt; 和 &lt;code&gt;destructiveButtonIndex&lt;/code&gt; 总是被更新为最后一个添加的对应风格按钮的 Index：&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSInteger)&lt;span class=&quot;string&quot;&gt;addButtonWithTitle:&lt;/span&gt;(nullable NSString *)title &lt;span class=&quot;string&quot;&gt;style:&lt;/span&gt;(TBActionButtonStyle)style &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^ __nullable)( TBActionButton * _Nonnull button))handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionButton *button = [TBActionButton &lt;span class=&quot;string&quot;&gt;buttonWithTitle:&lt;/span&gt;title &lt;span class=&quot;string&quot;&gt;style:&lt;/span&gt;style &lt;span class=&quot;string&quot;&gt;handler:&lt;/span&gt;handler];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [button &lt;span class=&quot;string&quot;&gt;addTarget:&lt;/span&gt;self &lt;span class=&quot;string&quot;&gt;action:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;buttonTapped:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;forControlEvents:&lt;/span&gt;UIControlEventTouchUpInside];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [self.buttons &lt;span class=&quot;string&quot;&gt;addObject:&lt;/span&gt;button];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSInteger index = self.buttons.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (style) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;TBActionButtonStyleDefault:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;TBActionButtonStyleCancel:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.cancelButtonIndex = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;TBActionButtonStyleDestructive:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.destructiveButtonIndex = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;        default:&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加按钮时把传入的 &lt;code&gt;style&lt;/code&gt; 和 &lt;code&gt;handler&lt;/code&gt; 再次传给了 &lt;code&gt;TBActionButton&lt;/code&gt; 的工厂方法。此外还有两个参数更简洁的方法可供选择，实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;addButtonWithTitle&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSString&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;title&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[self addButtonWithTitle:title style:TBActionButtonStyleDefault]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (NSInteger)&lt;span class=&quot;selector-tag&quot;&gt;addButtonWithTitle&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(NSString&lt;/span&gt; *)&lt;span class=&quot;selector-tag&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(TBActionButtonStyle)style&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;selector-attr&quot;&gt;[self addButtonWithTitle:title style:style handler:nil]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这也是顺应了之前的设计，减少冗余代码。&lt;/p&gt;
&lt;h2 id=&quot;show&quot;&gt;&lt;a href=&quot;#show&quot; class=&quot;headerlink&quot; title=&quot;show&quot;&gt;&lt;/a&gt;show&lt;/h2&gt;&lt;p&gt;在调用 &lt;code&gt;show&lt;/code&gt; 方法之前，使用者可能会修改一些属性的值，所以大量的绘制和计算都是在 &lt;code&gt;show&lt;/code&gt; 方法调用时执行的。在显示 ActionSheet 的时候需要有一组动画效果：将背景颜色由透明设成半透明黑色，并将容器从屏幕外由下至上平移至屏幕底部。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)show&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(willPresentAlertView:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate willPresentActionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupNewWindow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupLayout];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupStyle];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//弹出 ActionSheet 动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^animations)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;) = ^() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.background.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithWhite:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupContainerFrame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^completion)(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) = ^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(didPresentActionSheet:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate didPresentActionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.visible = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (kiOS7Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDuration delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; usingSpringWithDamping:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDampingRatio initialSpringVelocity:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationVelocity options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseInOut&lt;/span&gt; animations:animations completion:completion];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDuration delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseInOut&lt;/span&gt; animations:animations completion:completion];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在动画开始之前最关键的三个步骤是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置新的 &lt;code&gt;UIWindow&lt;/code&gt;：&lt;code&gt;setupNewWindow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置布局：&lt;code&gt;setupLayout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置毛玻璃效果、圆角、背景颜色等风格：&lt;code&gt;setupStyle&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;setupNewWindow&quot;&gt;&lt;a href=&quot;#setupNewWindow&quot; class=&quot;headerlink&quot; title=&quot;setupNewWindow&quot;&gt;&lt;/a&gt;setupNewWindow&lt;/h3&gt;&lt;p&gt;&lt;code&gt;setupNewWindow&lt;/code&gt; 的具体实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupNewWindow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isVisible]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow = [&lt;span class=&quot;built_in&quot;&gt;UIApplication&lt;/span&gt; sharedApplication].keyWindow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow interruptGesture];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionSheetController *actionSheetVC = [[TBActionSheetController alloc] initWithNibName:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; bundle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    actionSheetVC.actionSheet = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window = [[&lt;span class=&quot;built_in&quot;&gt;UIWindow&lt;/span&gt; alloc] initWithFrame:[&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.autoresizingMask = &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.opaque = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.rootViewController = actionSheetVC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在把新的 &lt;code&gt;UIWindow&lt;/code&gt; 搬到屏幕上之前先用 &lt;code&gt;previousKeyWindow&lt;/code&gt; 属性记录下当前的 &lt;code&gt;keyWindow&lt;/code&gt;，因为以后会经常用到它。下面会详细展开讲述 &lt;code&gt;setupNewWindow&lt;/code&gt; 方法都干了啥。&lt;/p&gt;
&lt;h4 id=&quot;Autorotation&quot;&gt;&lt;a href=&quot;#Autorotation&quot; class=&quot;headerlink&quot; title=&quot;Autorotation&quot;&gt;&lt;/a&gt;Autorotation&lt;/h4&gt;&lt;p&gt;之前说过 &lt;code&gt;TBActionSheet&lt;/code&gt; 是在 &lt;code&gt;UIWindow&lt;/code&gt; 上模态展示，其实这么做的另一个原因是为了更方便地实现自动旋转。旋转事件的传递路径为：&lt;code&gt;UIApplication&lt;/code&gt; -&amp;gt; &lt;code&gt;UIWindow&lt;/code&gt; -&amp;gt; &lt;code&gt;rootViewController&lt;/code&gt; -&amp;gt; &lt;code&gt;rootViewController.view&lt;/code&gt;。所以需要将 &lt;code&gt;TBActionSheet&lt;/code&gt; 作为 &lt;code&gt;rootViewController.view&lt;/code&gt; 的子视图，这样让其跟着屏幕一起旋转。而在 iOS7 时代，&lt;code&gt;UIWindow&lt;/code&gt; 是不会跟着一起旋转的，其 &lt;code&gt;bounds&lt;/code&gt; 是不变的，坐标系计算跟 iOS8 之后的不同，所以 &lt;code&gt;TBActionSheet&lt;/code&gt; 自动旋转目前仅支持 iOS8+。为了方便在控制器中处理旋转事件，我写了个 &lt;code&gt;TBActionSheetController&lt;/code&gt;，它对 &lt;code&gt;TBActionSheet&lt;/code&gt; 有一个弱引用，只是为了方便一些操作。&lt;/p&gt;
&lt;p&gt;实现自动旋转的主要流程是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建一个 &lt;code&gt;TBActionSheetController&lt;/code&gt; 实例 &lt;code&gt;actionSheetVC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新建一个 &lt;code&gt;UIWindow&lt;/code&gt; 实例 &lt;code&gt;window&lt;/code&gt; 并赋值给 &lt;code&gt;window&lt;/code&gt; 属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.rootViewController = actionSheetVC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[actionSheetVC.view addSubview: YOUR_VIEW]&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;YOUR_VIEW&lt;/code&gt; 就是想要自动旋转的视图，在这里就是 &lt;code&gt;TBActionSheet&lt;/code&gt; 实例啦。&lt;/p&gt;
&lt;p&gt;完成了以上流程后，还需要在 &lt;code&gt;TBActionSheet&lt;/code&gt; 接受到朝向变化的通知后手动更新 &lt;code&gt;frame&lt;/code&gt; 和 &lt;code&gt;bounds&lt;/code&gt;。PS：因为我们没使用自动布局，而是手动调整 &lt;code&gt;frame&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)statusBarDidChangeOrientation:(&lt;span class=&quot;built_in&quot;&gt;NSNotification&lt;/span&gt; *)notification &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds = [&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen].bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.background.frame = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setupContainerFrame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;setupContainerFrame&lt;/code&gt; 方法在后面会讲到。&lt;/p&gt;
&lt;h4 id=&quot;interruptGesture&quot;&gt;&lt;a href=&quot;#interruptGesture&quot; class=&quot;headerlink&quot; title=&quot;interruptGesture&quot;&gt;&lt;/a&gt;interruptGesture&lt;/h4&gt;&lt;p&gt;如果作用于 &lt;code&gt;previousKeyWindow&lt;/code&gt; 上的手势触发了 ActionSheet 的显示，但此时这个手势没有终止（比如 Pan 手势一直在捕获），这时就会引发一系列问题（测试的同学功不可没），必须中断其他窗口正在捕获的手势。思路是递归遍历子视图树中的所有手势对象，针对 Tap 和 Pan 这两种手势做中断处理。中断的方法就是将 &lt;code&gt;enabled&lt;/code&gt; 设为 &lt;code&gt;NO&lt;/code&gt; 再设为 &lt;code&gt;YES&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)interruptGesture&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizer&lt;/span&gt; *gesture &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.gestureRecognizers) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (([gesture isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UITapGestureRecognizer&lt;/span&gt; class]] || [gesture isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; class]]) &amp;amp;&amp;amp; gesture.enabled == &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gesture.enabled = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gesture.enabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *subview &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.subviews) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [subview interruptGesture];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;TBActionSheetController&quot;&gt;&lt;a href=&quot;#TBActionSheetController&quot; class=&quot;headerlink&quot; title=&quot;TBActionSheetController&quot;&gt;&lt;/a&gt;TBActionSheetController&lt;/h4&gt;&lt;p&gt;为了让 ActionSheet 自动旋转，还需要覆写 &lt;code&gt;TBActionSheetController&lt;/code&gt; 的 &lt;code&gt;shouldAutorotate&lt;/code&gt; 方法并返回 &lt;code&gt;YES&lt;/code&gt;，以及在 &lt;code&gt;supportedInterfaceOrientations&lt;/code&gt; 方法中返回想要旋转的朝向 Mask。为了让 &lt;code&gt;TBActionSheetController&lt;/code&gt; 的状态栏风格和 Hidden 状态与 ActionSheet 展现之前相同，还需要覆写 &lt;code&gt;preferredStatusBarStyle&lt;/code&gt; 和 &lt;code&gt;prefersStatusBarHidden&lt;/code&gt; 这两个方法。通过 &lt;code&gt;previousKeyWindow&lt;/code&gt; 可以递归找到最顶层的控制器，并递归调用 &lt;code&gt;childViewControllerForStatusBarXXX&lt;/code&gt; 方法向其获取可以代表状态栏风格或 Hidden 的控制器。这里用到了一些关于 &lt;code&gt;UIWindow&lt;/code&gt; 的辅助方法，具体实现在 &lt;code&gt;UIWindow (TBAdditions)&lt;/code&gt; 类别中。&lt;/p&gt;
&lt;h3 id=&quot;setupLayout&quot;&gt;&lt;a href=&quot;#setupLayout&quot; class=&quot;headerlink&quot; title=&quot;setupLayout&quot;&gt;&lt;/a&gt;setupLayout&lt;/h3&gt;&lt;p&gt;因为没有用自动布局，所以需要在容器中从上到下依次排列视图，宽度由 &lt;code&gt;sheetWidth&lt;/code&gt; 属性得知，只需计算好当前的纵坐标。纵坐标是根据各组件高度累加计算的，所以本质上还是对高度的计算。&lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 的高度可根据字体和文字内容计算出来。&lt;code&gt;customView&lt;/code&gt; 是由调用方提供，高度也可以获得。按钮的高度由 &lt;code&gt;buttonHeight&lt;/code&gt; 属性决定。除此之外还有视图之间的空隙，大部分都是小的空隙，Cancel 按钮上下都是大空隙。我将大小空隙的高度分别『钦定』为 8point 和 0.5point，并没提供属性用于个性化。其实这里叫『空隙』不准确，应该是『隔板（Separator）』，因为我在控件之间加了透明的 &lt;code&gt;UIView&lt;/code&gt;，它可以根据需求变换背景颜色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setupLayout&lt;/code&gt; 方法的主要流程如下（忽略创建和添加 Separator）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 属性依次为 &lt;code&gt;titleLabel&lt;/code&gt; 和 &lt;code&gt;messageLabel&lt;/code&gt; 创建实例，并添加到容器中（&lt;code&gt;actionContainer.header&lt;/code&gt;），计算 &lt;code&gt;frame&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;处理调用者传入的 &lt;code&gt;customView&lt;/code&gt;，添加到容器中（&lt;code&gt;actionContainer.custom&lt;/code&gt;），计算 &lt;code&gt;customView&lt;/code&gt; 的 &lt;code&gt;frame&lt;/code&gt;。 &lt;/li&gt;
&lt;li&gt;遍历 &lt;code&gt;buttons&lt;/code&gt; 数组向容器中（&lt;code&gt;actionContainer&lt;/code&gt;）添加按钮，计算按钮的 &lt;code&gt;frame&lt;/code&gt;，并根据按钮样式调整文字颜色和 Separator 高度。&lt;/li&gt;
&lt;li&gt;根据 &lt;code&gt;offsetY&lt;/code&gt; 属性计算容器下方需要『空』出来的高度。&lt;code&gt;offsetY&lt;/code&gt; 为 ActionSheet 下方的 y 轴位移，向下为正，非负值无效，默认值为 -8。最后计算容器的 &lt;code&gt;frame&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这部分的计算略复杂，只是阐述下思想。但这还不是最复杂的部分。&lt;/p&gt;
&lt;h3 id=&quot;setupStyle&quot;&gt;&lt;a href=&quot;#setupStyle&quot; class=&quot;headerlink&quot; title=&quot;setupStyle&quot;&gt;&lt;/a&gt;setupStyle&lt;/h3&gt;&lt;p&gt;此方法主要是设置风格，比如毛玻璃效果、圆角和颜色等，依赖于 &lt;code&gt;setupLayout&lt;/code&gt; 的结果。&lt;/p&gt;
&lt;p&gt;微信的样式是整个容器背景全带毛玻璃效果，且没有圆角；系统样式中 iOS9 和 iOS8 只有按钮和标题部分带毛玻璃效果，其余地方镂空透明的，且 iOS9 的圆角更大些。iOS7 没有毛玻璃效果。&lt;code&gt;TBActionSheet&lt;/code&gt; 有几个属性用来调节这些参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;backgroundTransparentEnabled&lt;/code&gt; 是否让 ActionSheet 背景透明（镂空）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blurEffectEnabled&lt;/code&gt; 是否启用毛玻璃效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rectCornerRadius&lt;/code&gt; 矩形圆角半径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ambientColor&lt;/code&gt; ActionSheet 的环境色&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;BlurEffect-amp-Separator&quot;&gt;&lt;a href=&quot;#BlurEffect-amp-Separator&quot; class=&quot;headerlink&quot; title=&quot;BlurEffect &amp;amp; Separator&quot;&gt;&lt;/a&gt;BlurEffect &amp;amp; Separator&lt;/h4&gt;&lt;p&gt;&lt;code&gt;UIVisualEffectView&lt;/code&gt; 只支持 iOS8+，为了兼容 iOS7 及更低版本，我的策略是将屏幕上容器区域矩形进行截图，并做三次 Box 模糊处理，并将图片设置为容器的图片（但愿你还记得它们都是 &lt;code&gt;UIImageView&lt;/code&gt;），模拟毛玻璃效果。苹果在 WWDC2013 给出了开源实现，使用的是 CI 框架的 Box 模糊函数，效率比高斯模糊要高：&lt;a href=&quot;https://developer.apple.com/downloads/download.action?path=wwdc_2013/wwdc_2013_sample_code/ios_uiimageeffects.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ios_uiimageeffects.zip&lt;/a&gt;。针对容器镂空的情况，不能将容器矩形整体截图，需要将非镂空控件的每一部分单独截图并做模糊处理，然后将处理好的图片设置为控件的图片（因为容器中的控件都是 &lt;code&gt;UIImageView&lt;/code&gt; 或 &lt;code&gt;UIButton&lt;/code&gt;，不包含 Separator）。而使用 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 的时候也同样遵循这个道理。 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 的优点是针对变化的背景可以实时渲染出毛玻璃效果，而截图手动 Box 模糊就做不到这点；缺点是除非使用 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 的私有接口否则不能调节模糊半径，而 CI 框架提供的函数可以做到。&lt;/p&gt;
&lt;p&gt;也就是说这里需要做两个判断：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;毛玻璃效果策略：iOS8+ 用 &lt;code&gt;UIVisualEffectView&lt;/code&gt;；否则用截图和 Box 模糊；如果不开启毛玻璃效果则使用半透明（alpha=0.5）的背景色（&lt;code&gt;ambientColor&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;ActionSheet 背景是否镂空：不镂空则对容器矩形整体截图，镂空则只对容器内的控件（&lt;code&gt;header&lt;/code&gt;,&lt;code&gt;custom&lt;/code&gt; 和按钮）矩形截图。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因为 iOS7 下的毛玻璃效果使用的是截图，所以需要在设备屏幕旋转时刷新下 UI，再次调用 &lt;code&gt;setupStyle&lt;/code&gt; 方法。需要覆写 &lt;code&gt;TBActionSheetController&lt;/code&gt; 中下面的方法：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; (void)&lt;span class=&quot;selector-tag&quot;&gt;didRotateFromInterfaceOrientation&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:(UIInterfaceOrientation)fromInterfaceOrientation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (self.actionSheet.blurEffectEnabled &amp;amp;&amp;amp; !kiOS8Later) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;selector-attr&quot;&gt;[self.actionSheet setupStyle]&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;截屏&quot;&gt;&lt;a href=&quot;#截屏&quot; class=&quot;headerlink&quot; title=&quot;截屏&quot;&gt;&lt;/a&gt;截屏&lt;/h5&gt;&lt;p&gt;截屏就是在屏幕上的进行截图，表面上看上去很简单，但实践的时候也会碰到坑。首先我要截取的肯定是 ActionSheet 出现之前的屏幕，所以之前提到过的 &lt;code&gt;previousKeyWindow&lt;/code&gt; 属性就又派上用场了，它是 ActionSheet 展现前的窗口，通过它可以获取到最顶层的控制器，然后获取控制器管理的 &lt;code&gt;view&lt;/code&gt;，接着就是用 UIKit 那套函数截图。这里需要区分下 iOS6 和 iOS7+ 渲染视图层级要调用不同的接口，并注意一个仅仅发生在 iOS7 上的 crash：&lt;strong&gt;如果截屏区域的长或宽过小时将会引发 crash，这是 iOS7 系统的 bug&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  从区域截屏&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param aRect 区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param view  截取的 view&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @return  截取的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)screenShotRect:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)aRect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 获取最上层的 UIViewController&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *topController = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow currentViewController];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *view = topController.view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIGraphicsBeginImageContext&lt;/span&gt;(view.bounds.size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([view respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(drawViewHierarchyInRect:afterScreenUpdates:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; crashMagicNumber = &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;// size 小于0.3 在 iOS7 上会导致 crash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (view.frame.size.width &amp;gt;= crashMagicNumber &amp;amp;&amp;amp; view.frame.size.height &amp;gt;= crashMagicNumber ) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// resolve iOS7 size crash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [view drawViewHierarchyInRect:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.bounds afterScreenUpdates:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;span class=&quot;comment&quot;&gt;/* iOS 6 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [view.layer renderInContext:&lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *screenshotimage = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cutFromImage:screenshotimage inRect:aRect];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在图片中截取图片时需要注意 Retina 屏幕的 &lt;code&gt;scale&lt;/code&gt; 问题，区分『坐标点』与『像素点』就好。还有要注意如果截图矩形 &lt;code&gt;rect&lt;/code&gt; 如果超出了图片 &lt;code&gt;image&lt;/code&gt; 范围，超出的那部分会是透明的。&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  从图片中切图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param image 要被切的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @param rect  这里可以设置想要截图的区域&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  @return 截图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIImage *)cutFromImage:(UIImage *)&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt; inRect:(CGRect) &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGImageRef imageRef = &lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.CGImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGRect transRect = CGRectMake(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.origin.x*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.origin.y*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;*&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGImageRef imageRefRect =CGImageCreateWithImageInRect(imageRef, transRect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIImage *sendImage = [[UIImage alloc] initWithCGImage:imageRefRect &lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;scale&lt;/span&gt; orientation:UIImageOrientationUp];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSData *imageViewData = UIImagePNGRepresentation(sendImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CGImageRelease(imageRefRect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [UIImage imageWithData:imageViewData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;ambientColor&quot;&gt;&lt;a href=&quot;#ambientColor&quot; class=&quot;headerlink&quot; title=&quot;ambientColor&quot;&gt;&lt;/a&gt;ambientColor&lt;/h5&gt;&lt;p&gt;环境色其实就是容器的背景颜色，但不能叫 &lt;code&gt;backgroundColor&lt;/code&gt;，因为 &lt;code&gt;UIView&lt;/code&gt; 中已经有个 &lt;code&gt;backgroundColor&lt;/code&gt; 属性了，如果我们自己强制声明重名的属性会导致奇怪的问题。比如设置好的背景色在程序运行中自动被设成其他颜色（一般是黑色），而且是随机出现的，而且一旦出现就会一直复现，除非杀进程。PS：别问我为啥知道这么多，都是泪啊！用在公司项目中被测试同学提过好多次 bug！&lt;/p&gt;
&lt;p&gt;回归正题！如何将环境色加入到容器中呢？毕竟有多种情况，但其思想跟毛玻璃模糊的思路差不多：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/TBActionSheet/ambientColor.png&quot; alt=&quot;环境色设置策略&quot;&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是在倒数第二个分支『在 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 后插入环境色视图』。是在控件的后面插入&lt;br&gt;&lt;code&gt;UIVisualEffectView&lt;/code&gt; 后再插入一层背景颜色为 &lt;code&gt;ambientColor&lt;/code&gt; 的 &lt;code&gt;UIView&lt;/code&gt;。如果控件类型为 &lt;code&gt;TBActionButton&lt;/code&gt;，那么需要将其 &lt;code&gt;behindColorView&lt;/code&gt; 属性设为背景色为 &lt;code&gt;ambientColor&lt;/code&gt; 的 &lt;code&gt;UIView&lt;/code&gt; 对象。原因是按钮此时无背景色，高亮状态需要调节 &lt;code&gt;behindColorView&lt;/code&gt; 的 &lt;code&gt;alpha&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这部分的代码逻辑其实略复杂，但还不是最烧脑的。&lt;/p&gt;
&lt;h5 id=&quot;Separator&quot;&gt;&lt;a href=&quot;#Separator&quot; class=&quot;headerlink&quot; title=&quot;Separator&quot;&gt;&lt;/a&gt;Separator&lt;/h5&gt;&lt;p&gt;在 &lt;code&gt;setupLayout&lt;/code&gt; 中创建的 Separator 都会添加到 &lt;code&gt;separators&lt;/code&gt; 数组中，并作为容器的子视图参与 UI 绘制：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)&lt;span class=&quot;keyword&quot;&gt;addSeparatorLineAt:(CGPoint) &lt;/span&gt;point &lt;span class=&quot;keyword&quot;&gt;isBigFragment:(BOOL) &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;isBigFragment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    UIView *separatorLine = [[UIView alloc] initWithFrame:CGRectMake(point.x, point.y, &lt;span class=&quot;keyword&quot;&gt;self.sheetWidth, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;isBigFragment?bigFragment:smallFragment)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    separatorLine.&lt;span class=&quot;keyword&quot;&gt;backgroundColor &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;self.separatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.actionContainer &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addSubview:separatorLine];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    [&lt;span class=&quot;keyword&quot;&gt;self.separators &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;addObject:separatorLine];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Separator 只是个普通的 &lt;code&gt;UIView&lt;/code&gt;，可以透明也可以有颜色，这取决于调用者的口味。微信样式中按钮之间是有些深色的，可以通过 &lt;code&gt;separatorColor&lt;/code&gt; 属性来设置这个颜色。Separator 的两种尺寸之前提到过，BigFragment 为 8point，位于 Cancel 按钮上下，即使 Cancel 按钮在中间，也可以应付自如。&lt;/p&gt;
&lt;h4 id=&quot;RectCorner&quot;&gt;&lt;a href=&quot;#RectCorner&quot; class=&quot;headerlink&quot; title=&quot;RectCorner&quot;&gt;&lt;/a&gt;RectCorner&lt;/h4&gt;&lt;p&gt;圆角的实现不复杂，但是判断哪里需要处理成圆角很复杂：&lt;strong&gt;哪个 &lt;code&gt;UIView&lt;/code&gt; 的哪个角需要处理成圆角&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我写了个 &lt;code&gt;UIView (TBRectCorner)&lt;/code&gt; 类别方便加圆角，原理是用贝塞尔曲线的 &lt;code&gt;bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:&lt;/code&gt; 方法绘制圆角矩形路径 &lt;code&gt;maskPath&lt;/code&gt;，然后将其 &lt;code&gt;CGPath&lt;/code&gt; 作为 &lt;code&gt;layer.mask&lt;/code&gt; 的路径。用贝塞尔曲线的优点就是可以针对矩形某个单独的角做圆角，而这正是我需要的。我在 &lt;code&gt;UIView (TBRectCorner)&lt;/code&gt; 中以&lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/#Objective-C-Associated-Objects&quot;&gt;关联对象&lt;/a&gt;的方式加了个 &lt;code&gt;tbRectCorner&lt;/code&gt; 属性，用于标记圆角类型（&lt;code&gt;TBRectCorner&lt;/code&gt;）。ActionSheet 中的控件一共有四种圆角类型：顶部圆角、底部圆角、全圆角和无圆角。&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef &lt;span class=&quot;type&quot;&gt;NS_OPTIONS&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;NSUInteger&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;TBRectCorner&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerTop&lt;/span&gt; = 1 &amp;lt;&amp;lt; 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerBottom&lt;/span&gt; = 1 &amp;lt;&amp;lt; 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerNone&lt;/span&gt; = 0,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;TBRectCornerAll&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;TBRectCornerTop&lt;/span&gt;|&lt;span class=&quot;type&quot;&gt;TBRectCornerBottom&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface &lt;span class=&quot;type&quot;&gt;UIView&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;TBRectCorner&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,assign) &lt;span class=&quot;type&quot;&gt;TBRectCorner&lt;/span&gt; tbRectCorner;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)setCornerRadius:(&lt;span class=&quot;type&quot;&gt;CGFloat&lt;/span&gt;) radius;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而判断哪里需要圆角的过程就复杂了，用到了大量的 if-else 判断来修改 &lt;code&gt;tbRectCorner&lt;/code&gt; 属性。这项工作复杂的原因就在于其布局不确定性，加圆角的规则如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;整个容器的边缘都有圆角。容器内部 Separator 为 BigFragment 的上下边缘都有圆角。（Cancel 按钮上下的 Separator 都为 BigFragment）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;message&lt;/code&gt; 如果都为 &lt;code&gt;nil&lt;/code&gt;，也就是容器的 &lt;code&gt;header&lt;/code&gt; 无内容，则容器顶部圆角加在 &lt;code&gt;custom&lt;/code&gt; 顶部。&lt;/li&gt;
&lt;li&gt;如果传入的 &lt;code&gt;customView&lt;/code&gt; 为 &lt;code&gt;nil&lt;/code&gt;，则容器的 &lt;code&gt;custom&lt;/code&gt; 无内容，则容器顶部圆角加在第一个按钮顶部。&lt;/li&gt;
&lt;li&gt;容器底部圆角加在最后一个按钮底部。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体实现代码就不贴了，分散在 &lt;code&gt;setupStyle&lt;/code&gt; 方法的多个位置。&lt;/p&gt;
&lt;h4 id=&quot;setupContainerFrame&quot;&gt;&lt;a href=&quot;#setupContainerFrame&quot; class=&quot;headerlink&quot; title=&quot;setupContainerFrame&quot;&gt;&lt;/a&gt;setupContainerFrame&lt;/h4&gt;&lt;p&gt;&lt;code&gt;show&lt;/code&gt; 方法中的动画会将整个容器从屏幕外右下至上滑动至屏幕底部，动画的终点就是容器最终的 &lt;code&gt;frame&lt;/code&gt;。在计算纵坐标时需要考虑到 iOS7 的状态栏的高度：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setupContainerFrame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.actionContainer.frame = CGRectMake(kContainerLeft, kScreenHeight - self.actionContainer.frame.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; - (!kiOS7Later? &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), self.actionContainer.frame.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt;, self.actionContainer.frame.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;.&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除此之外还用到了几个自定义的宏，都是为了简化代码的：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine kScreenWidth [UIScreen mainScreen]&lt;span class=&quot;selector-class&quot;&gt;.bounds&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.width&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine kScreenHeight [UIScreen mainScreen]&lt;span class=&quot;selector-class&quot;&gt;.bounds&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.size&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.height&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;#def&lt;/span&gt;ine kContainerLeft ((kScreenWidth - self.sheetWidth)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;动画&quot;&gt;&lt;a href=&quot;#动画&quot; class=&quot;headerlink&quot; title=&quot;动画&quot;&gt;&lt;/a&gt;动画&lt;/h3&gt;&lt;p&gt;从 iOS7 开始 UIKit 支持了 Spring 动画，有趣的是 SpriteKit 和 UIDynamic 也是在 iOS7 新加入的。我猜其底层实现应该是公用的。&lt;/p&gt;
&lt;p&gt;我只是简单的支持了弹簧动画，添加了几个属性作为动画参数而已。可能今后会丰富下动画种类，或是提供接口，让调用者传入自定义的动画。&lt;/p&gt;
&lt;p&gt;目前调节动画的参数有三个属性：&lt;code&gt;animationDuration&lt;/code&gt;，&lt;code&gt;animationDampingRatio&lt;/code&gt; 和 &lt;code&gt;animationVelocity&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;close-amp-buttonTapped&quot;&gt;&lt;a href=&quot;#close-amp-buttonTapped&quot; class=&quot;headerlink&quot; title=&quot;close &amp;amp; buttonTapped&quot;&gt;&lt;/a&gt;close &amp;amp; buttonTapped&lt;/h2&gt;&lt;p&gt;用户点击背景或者按钮时，ActionSheet 会执行消失动画，并伴随着 &lt;code&gt;delegate&lt;/code&gt; 的一些回调或是执行 block。这两个方法的实现差不多，仅以 &lt;code&gt;buttonTapped&lt;/code&gt; 为例讲解一下。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)buttonTapped:(TBActionButton *)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; isVisible]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.buttons indexOfObject:sender];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateWithDuration:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.animationDuration delay:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; options:&lt;span class=&quot;built_in&quot;&gt;UIViewAnimationOptionCurveEaseInOut&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.background.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithWhite:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionContainer.frame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(kContainerLeft, kScreenHeight, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionContainer.frame.size.width, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionContainer.frame.size.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里之所以把各种 delegate 调用都放在动画完成后是有原因的：为了支持在回调方法中 show 另一个 actionsheet，系统的 UIActionSheet 的调用时机也是如此。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(actionSheet:willDismissWithButtonIndex:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate actionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; willDismissWithButtonIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.rootViewController = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(actionSheet:clickedButtonAtIndex:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate actionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; clickedButtonAtIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sender.handler) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            __&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt; __&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(TBActionButton *)weakSender = sender;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sender.handler(weakSender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate respondsToSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(actionSheet:didDismissWithButtonIndex:)]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.delegate actionSheet:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; didDismissWithButtonIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.visible = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;动画就不多说了，基本就是 &lt;code&gt;show&lt;/code&gt; 方法中动画的逆动画。其余还有很多 &lt;code&gt;delegate&lt;/code&gt; 回调，注意调用的顺序需要还原 &lt;code&gt;UIActionSheet&lt;/code&gt; 的调用顺序，也不必多说。针对带有 block 的按钮，执行 block 时要避免内存泄露：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;__weak&lt;/span&gt; __typeof(&lt;span class=&quot;type&quot;&gt;TBActionButton&lt;/span&gt; *)weakSender = sender;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;sender&lt;/span&gt;.handler(weakSender);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有就是处理 &lt;code&gt;UIWindow&lt;/code&gt; 的切换和释放 &lt;code&gt;rootViewController&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.window.rootViewController = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.previousKeyWindow makeKeyAndVisible];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只要调用方不再对 ActionSheet 有强引用，&lt;code&gt;window&lt;/code&gt; 就会被释放，不会造成内存泄露。&lt;/p&gt;
&lt;h1 id=&quot;一些细节&quot;&gt;&lt;a href=&quot;#一些细节&quot; class=&quot;headerlink&quot; title=&quot;一些细节&quot;&gt;&lt;/a&gt;一些细节&lt;/h1&gt;&lt;h2 id=&quot;Marco&quot;&gt;&lt;a href=&quot;#Marco&quot; class=&quot;headerlink&quot; title=&quot;Marco&quot;&gt;&lt;/a&gt;Marco&lt;/h2&gt;&lt;p&gt;项目中用到了一些 UIKit 自带的宏，其实它们好多都是使用 &lt;code&gt;__attribute__&lt;/code&gt; 的偷懒方式，目的是告诉编译器一些事情。&lt;/p&gt;
&lt;h3 id=&quot;UI-APPEARANCE-SELECTOR&quot;&gt;&lt;a href=&quot;#UI-APPEARANCE-SELECTOR&quot; class=&quot;headerlink&quot; title=&quot;UI_APPEARANCE_SELECTOR&quot;&gt;&lt;/a&gt;UI_APPEARANCE_SELECTOR&lt;/h3&gt;&lt;p&gt;在声明属性的时候，考虑到方便一个应用内控件的统一风格，使用到了 &lt;code&gt;UI_APPEARANCE_SELECTOR&lt;/code&gt; 宏。在 iOS8 之前 &lt;code&gt;UIAppearance&lt;/code&gt; 不支持 &lt;code&gt;BOOL&lt;/code&gt; 类型，需要用 &lt;code&gt;NSInteger&lt;/code&gt; 替代。所有声明带有 &lt;code&gt;UI_APPEARANCE_SELECTOR&lt;/code&gt; 的属性都在 &lt;code&gt;initialize&lt;/code&gt; 初始化：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (void)initialize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (self != [TBActionSheet class]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TBActionSheet *appearance = [self appearance]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;buttonHeight &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.offsetY = - &lt;span class=&quot;keyword&quot;&gt;bigFragment;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    appearance.tintColor = [UIColor &lt;span class=&quot;keyword&quot;&gt;blackColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    appearance.destructiveButtonColor = [UIColor redColor]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.cancelButtonColor = [UIColor &lt;span class=&quot;keyword&quot;&gt;blackColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;sheetWidth &lt;/span&gt;= MIN(kScreenWidth, kScreenHeight) - &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;backgroundTransparentEnabled &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.&lt;span class=&quot;keyword&quot;&gt;blurEffectEnabled &lt;/span&gt;= YES&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.rectCornerRadius = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.ambientColor = [UIColor colorWithWhite:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;65&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.separatorColor = [UIColor clearColor]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.animationDuration = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.animationDampingRatio = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.animationVelocity = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    appearance.supportedInterfaceOrientations = UIInterfaceOrientationMaskAll&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然我是不建议调用者直接在这里改源码来配置个性化的 ActionSheet ，而是应该使用 &lt;code&gt;UIAppearance&lt;/code&gt; 在外部进行配置，或是针对某个实例的属性做修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UI_APPEARANCE_SELECTOR&lt;/code&gt; 的定义如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__attribute__((&lt;span class=&quot;name&quot;&gt;annotate&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;ui_appearance_selector&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;NS-UNAVAILABLE&quot;&gt;&lt;a href=&quot;#NS-UNAVAILABLE&quot; class=&quot;headerlink&quot; title=&quot;NS_UNAVAILABLE&quot;&gt;&lt;/a&gt;NS_UNAVAILABLE&lt;/h3&gt;&lt;p&gt;有时候自己创建了一个类，但是想禁用一些从父类继承来的方法，就可以使用 &lt;code&gt;NS_UNAVAILABLE&lt;/code&gt; 宏。比如在 &lt;code&gt;TBActionSheet&lt;/code&gt; 类中我禁用了这个初始化方法：&lt;/p&gt;
&lt;figure class=&quot;highlight elm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (instance&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;)initWithFrame:(&lt;span class=&quot;type&quot;&gt;CGRect&lt;/span&gt;)frame &lt;span class=&quot;type&quot;&gt;NS_UNAVAILABLE&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;NS_UNAVAILABLE&lt;/code&gt; 其实有一些替代者，从下面的宏定义可以看出：&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; NS_UNAVAILABLE UNAVAILABLE_ATTRIBUTE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; UNAVAILABLE_ATTRIBUTE __attribute__((unavailable))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; __unavailable	__attribute__((unavailable))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而上面的这些宏都是不含提示信息的，想要带提示信息还是老老实实写 &lt;code&gt;__attribute__&lt;/code&gt; 吧。下面是 &lt;code&gt;TBActionContainer&lt;/code&gt; 的初始化方法声明：&lt;/p&gt;
&lt;figure class=&quot;highlight erlang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(instancetype)&lt;/span&gt;initWithSheet:&lt;span class=&quot;params&quot;&gt;(TBActionSheet *)&lt;/span&gt;actionSheet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(instancetype)&lt;/span&gt;initWithFrame:&lt;span class=&quot;params&quot;&gt;(CGRect)&lt;/span&gt;frame __attribute__&lt;span class=&quot;params&quot;&gt;((unavailable(&lt;span class=&quot;string&quot;&gt;&quot;initWithFrame: not available, please use initWithSheet:&quot;&lt;/span&gt;))&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- &lt;span class=&quot;params&quot;&gt;(instancetype)&lt;/span&gt;init __attribute__&lt;span class=&quot;params&quot;&gt;((unavailable(&lt;span class=&quot;string&quot;&gt;&quot;init not available, please use initWithSheet:&quot;&lt;/span&gt;))&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;NS-ASSUME-NONNULL-BEGIN（-END）&quot;&gt;&lt;a href=&quot;#NS-ASSUME-NONNULL-BEGIN（-END）&quot; class=&quot;headerlink&quot; title=&quot;NS_ASSUME_NONNULL_BEGIN（_END）&quot;&gt;&lt;/a&gt;NS_ASSUME_NONNULL_BEGIN（_END）&lt;/h3&gt;&lt;p&gt;llvm 6.1 为 Objective-C 加入了 Nullability 的新特性后，头文件们一个个都更啰嗦了。可以默认一段代码的属性或参数为非空，针对可能为空的则用 &lt;code&gt;nullable&lt;/code&gt; 修饰。但我们声明的大部分属性或者方法参数都是非空的，大量的 &lt;code&gt;nonnull&lt;/code&gt; 会降低可读性，所以苹果提供了 Audited Regions 宏，也就是 &lt;code&gt;NS_ASSUME_NONNULL_BEGIN&lt;/code&gt; 和 &lt;code&gt;NS_ASSUME_NONNULL_END&lt;/code&gt;。在头文件中这对儿宏之间区域的代码都会被审查，指针都会被默认为是 &lt;code&gt;nonnull&lt;/code&gt;。&lt;code&gt;TBActionSheet&lt;/code&gt; 适配了 Nullability 特性，更多内容可以参考官方的&lt;a href=&quot;https://developer.apple.com/swift/blog/?id=25&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nullability and Objective-C&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;动态配置&quot;&gt;&lt;a href=&quot;#动态配置&quot; class=&quot;headerlink&quot; title=&quot;动态配置&quot;&gt;&lt;/a&gt;动态配置&lt;/h2&gt;&lt;p&gt;iOS 系统的 &lt;code&gt;UIActionSheet&lt;/code&gt; 在展现后就不能做修改了，而我的 &lt;code&gt;TBActionSheet&lt;/code&gt; 可以做到实时动态更新，比如动态添加按钮：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/TBActionSheet/blob/master/images/addButton.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在动态配置 &lt;code&gt;TBActionSheet&lt;/code&gt; 的属性后&lt;strong&gt;必须&lt;/strong&gt;调用以下方法刷新 UI：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[self.actionSheet setupLayout]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[self.actionSheet setupStyle]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[self.actionSheet setupContainerFrame]&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现动态配置，需要有一个还原机制来清理之前的状态。比如容器内有很多子视图，诸如那些 Separator 和 &lt;code&gt;UIVisualEffectView&lt;/code&gt; 对象都是一次性使用的，在布局发生变化后必须清理掉它们，并重新生成一遍。容器内这些没有存储数据的视图都是没必要重用的，只需要清理掉重新创建一遍即可。这样虽然可能会带来性能问题，不过考虑到按钮的数量毕竟有限，所以这些一次性的视图数量并不多。而且重用它们需要修改它们的 frame，需要单独花精力管理它们，带来的成本更大。有时简单粗暴点更好，毕竟动态配置这种场景不多。&lt;/p&gt;
&lt;p&gt;还有就是一些视图背景颜色的还原，每次设置前先将其设为 &lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属性&lt;/h1&gt;&lt;p&gt;&lt;code&gt;UIActionSheet&lt;/code&gt; 中除了 &lt;code&gt;UIActionSheetStyle actionSheetStyle&lt;/code&gt; 属性，其余属性都已实现。因为 &lt;code&gt;TBActionSheet&lt;/code&gt; 的样式可高度个性化定制，所以不再需要 &lt;code&gt;UIActionSheetStyle&lt;/code&gt; 这种枚举了。可以说 &lt;code&gt;TBActionSheet&lt;/code&gt; 在属性上依然『几乎』是 &lt;code&gt;UIActionSheet&lt;/code&gt; 的超集。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TBActionSheet&lt;/code&gt; 的属性实在是太多了，因为它完全是手撸的，太灵活了。但总结起来无非就是『尺寸』、『样式』、『状态』、『内容』、『标记』和『动画&amp;amp;朝向』这几大类。&lt;/p&gt;
&lt;h2 id=&quot;尺寸&quot;&gt;&lt;a href=&quot;#尺寸&quot; class=&quot;headerlink&quot; title=&quot;尺寸&quot;&gt;&lt;/a&gt;尺寸&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  按钮高度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; buttonHeight &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  actionsheet下方的 y 轴位移，向下为正，非负值无效，默认值为 -8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; offsetY &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  sheet 的宽度，也就是按钮宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; sheetWidth &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  矩形圆角半径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; rectCornerRadius &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;样式&quot;&gt;&lt;a href=&quot;#样式&quot; class=&quot;headerlink&quot; title=&quot;样式&quot;&gt;&lt;/a&gt;样式&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  文字颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *tintColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  Destructive 按钮文字颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *destructiveButtonColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  Cancel 按钮文字颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *cancelButtonColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  分割线颜色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *separatorColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  按钮字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; *buttonFont &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  ActionSheet 的环境色&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *ambientColor &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否可见&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;,getter=isVisible) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; visible;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否让 ActionSheet 背景透明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, getter=isBackgroundTransparentEnabled) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; backgroundTransparentEnabled &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否点击背景后关闭 ActionSheet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, getter=isBackgroundTouchClosureEnabled) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; backgroundTouchClosureEnabled &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  是否启用毛玻璃效果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, getter=isBlurEffectEnabled) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; blurEffectEnabled &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)  &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nullable  title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;)  &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; * _Nullable  message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  标题 UILabel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,nullable,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *titleLabel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  Message UILabel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,nullable,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *messageLabel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  自定义视图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;,nullable) &lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *customView;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;标记&quot;&gt;&lt;a href=&quot;#标记&quot; class=&quot;headerlink&quot; title=&quot;标记&quot;&gt;&lt;/a&gt;标记&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *   标记藏于 ActionSheet 下面的 UIWindow&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIWindow&lt;/span&gt; *previousKeyWindow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; cancelButtonIndex;      &lt;span class=&quot;comment&quot;&gt;// if the delegate does not implement -actionSheetCancel:, we pretend this button was clicked on. default is -1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; destructiveButtonIndex; &lt;span class=&quot;comment&quot;&gt;// sets destructive (red) button. -1 means none set. default is -1. ignored if only one button&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; firstOtherButtonIndex;	&lt;span class=&quot;comment&quot;&gt;// -1 if no otherButtonTitles or initWithTitle:... not used&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;动画-amp-朝向&quot;&gt;&lt;a href=&quot;#动画-amp-朝向&quot; class=&quot;headerlink&quot; title=&quot;动画&amp;amp;朝向&quot;&gt;&lt;/a&gt;动画&amp;amp;朝向&lt;/h2&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; numberOfButtons;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  动画持续时长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt; animationDuration &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  动画弹簧效果衰弱比例，值为 1 时无摆动，值越接近 0 摆动越大&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; animationDampingRatio &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  动画弹簧效果初速度。如果动画总距离为 200 点，想让初速度为每秒 100 点，那么将值设为 0.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; animationVelocity &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  支持的朝向&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt; supportedInterfaceOrientations &lt;span class=&quot;built_in&quot;&gt;UI_APPEARANCE_SELECTOR&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;属性存取器&quot;&gt;&lt;a href=&quot;#属性存取器&quot; class=&quot;headerlink&quot; title=&quot;属性存取器&quot;&gt;&lt;/a&gt;属性存取器&lt;/h2&gt;&lt;p&gt;其实属性存取器并不都是必要的，很多 set 方法可以不写，毕竟所有的布局和样式都在最后的 &lt;code&gt;show&lt;/code&gt; 方法中决定。但一些改动不大的轻量级属性修改还是可以接受的，这些属性的 set 方法实现也比较简单。动态配置需要再次调用 &lt;code&gt;setupLayout&lt;/code&gt;、&lt;code&gt;setupStyle&lt;/code&gt; 以及 &lt;code&gt;setupContainerFrame&lt;/code&gt;，而这些轻量级的属性修改则可立即生效，无需再调用那三个方法。&lt;/p&gt;
&lt;p&gt;按钮字体的存取器建立在对 &lt;code&gt;buttons&lt;/code&gt; 数组的遍历上：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)setButtonFont:(UIFont *)&lt;span class=&quot;keyword&quot;&gt;buttonFont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;buttonFont &lt;/span&gt;&amp;amp;&amp;amp; [&lt;span class=&quot;keyword&quot;&gt;self &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;buttonFont] &lt;/span&gt;!= &lt;span class=&quot;keyword&quot;&gt;buttonFont) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (TBActionButton *&lt;span class=&quot;keyword&quot;&gt;btn &lt;/span&gt;in &lt;span class=&quot;keyword&quot;&gt;self.buttons) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;btn.titleLabel.font &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;buttonFont;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (UIFont *)&lt;span class=&quot;keyword&quot;&gt;buttonFont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;keyword&quot;&gt;self.buttons.lastObject.titleLabel.font;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;firstOtherButtonIndex&lt;/code&gt; 是只读属性，它也是遍历 &lt;code&gt;buttons&lt;/code&gt; 数组，知道找到第一个 Default 风格的按钮：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)firstOtherButtonIndex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.buttons.count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.buttons[i].style==TBActionButtonStyleDefault) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Separator 的颜色修改需要更新 &lt;code&gt;separators&lt;/code&gt; 数组所有的元素：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setSeparatorColor:(&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; *)separatorColor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (separatorColor &amp;amp;&amp;amp; separatorColor != _separatorColor) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _separatorColor = separatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *separator &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.separators) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            separator.backgroundColor = separatorColor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ActionSheet 是否可见，取决于窗口及控制器是否存在：&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;BOOL&lt;/span&gt;)isVisible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// action sheet is visible iff it&#39;s associated with a window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !!self.&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; &amp;amp;&amp;amp; self.&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.rootViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;backgroundTouchClosureEnabled&lt;/code&gt; 的更新需要同步到背景 &lt;code&gt;userInteractionEnabled&lt;/code&gt; 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)setBackgroundTouchClosureEnabled:(NSInteger)&lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _backgroundTouchClosureEnabled = &lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;self.background.userInteractionEnabled &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;backgroundTouchClosureEnabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;我也没想到一个简简单单的 ActionSheet 也会写的这么复杂，早知道会这样我真的不敢下手。以至于写完后还没测试就用在了公司的项目中，各种爆 Bug 然后 Debug。同事们各种提意见然后我再去完善。第一次线上版本全部替换成 &lt;code&gt;TBActionSheet&lt;/code&gt; 后出了 Bug，这真的是实习生干的 23333 这锅我背了！&lt;/p&gt;
&lt;p&gt;其实写这个轮子是留下了很多遗憾和不足的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一开始觉得布局很简单，无非就是几个 Button 啊 Label 啊，所以没用自动布局。后面功能越来越多布局开始变得复杂，需要大量计算，想想真是后悔。但再往后动态配置和个性化程度大大提升，发现已经复杂到不适合用自动布局，不知是否有些心安&lt;/li&gt;
&lt;li&gt;系统控件的实现是用 &lt;code&gt;UITableView&lt;/code&gt; 或 &lt;code&gt;UICollectionView&lt;/code&gt; 来实现的，在长按按钮滑动选择的时候，&lt;code&gt;TBActionSheet&lt;/code&gt; 就做不到系统控件那样了。如果重写的话一定要用 Table 啊&lt;/li&gt;
&lt;li&gt;属性名几经修改，接口也有小幅度修改，功能强大但也已经臃肿&lt;/li&gt;
&lt;li&gt;没能做到全功能适配 iOS7，或许是自己太懒了。其实有写过二维变换模拟系统的旋转动画，并进行了复杂的数学坐标推导出变换公式，最后觉得还是效果不满意，并投入太多精力，遂放弃&lt;/li&gt;
&lt;li&gt;当时因为业务忙，写的代码真是乱，现在还在一点点整理。。。说啥都是借口！&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实一开始我也想当把标题党，把文章标题写成『这可能是东半球最牛逼的 ActionSheet』，想想还是算了。我从不求 star 从不求转发，踏实点好😄。&lt;/p&gt;
&lt;p&gt;因为写得比较匆忙，逻辑比较复杂的地方可能描述不清，还请大神们多多提建议和指正。更希望能看到有建设性的 PR，一起将其完善。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;iOS 系统自带的 &lt;code&gt;UIActionSheet&lt;/code&gt; 无法满足开发中高度个性化的 UI 风格和代码风格，所以我决定自己动手丰衣足食，于是 &lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 诞生了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yulingtianxia/TBActionSheet/blob/master/images/demo.gif?raw=true&quot; width=&quot;50%&quot; height=&quot;50%&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github：&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot;&gt;https://github.com/yulingtianxia/TBActionSheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yulingtianxia/TBActionSheet&quot;&gt;&lt;code&gt;TBActionSheet&lt;/code&gt;&lt;/a&gt; 不仅还原了 &lt;code&gt;UIActionSheet&lt;/code&gt; 的几乎所有功能和 API，还在此基础上支持如下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;block 语法&lt;/li&gt;
&lt;li&gt;插入自定义的 Header 视图&lt;/li&gt;
&lt;li&gt;自定义字体、颜色、尺寸、圆角等&lt;/li&gt;
&lt;li&gt;将毛玻璃效果支持到了 iOS7，且可以定义颜色&lt;/li&gt;
&lt;li&gt;支持 Cocoapods 和 Carthage&lt;/li&gt;
&lt;li&gt;支持在 Title 下面设置 Message&lt;/li&gt;
&lt;li&gt;支持点击背景关闭&lt;/li&gt;
&lt;li&gt;可以在显示后动态更新 UI&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C 消息发送与转发机制原理</title>
    <link href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/"/>
    <id>http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/</id>
    <published>2016-06-15T12:12:48.000Z</published>
    <updated>2017-10-08T09:03:28.000Z</updated>
    
    <content type="html">&lt;p&gt;消息发送和转发流程可以概括为：消息发送（Messaging）是 Runtime 通过 selector 快速查找 IMP 的过程，有了函数指针就可以执行对应的方法实现；消息转发（Message Forwarding）是在查找 IMP 失败后执行一系列转发流程的慢速通道，如果不作转发处理，则会打日志和抛出异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文不讲述开发者在消息发送和转发流程中需要做的事，而是讲述原理。能够很好地阅读本文的前提是你对 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 已经有一定的了解，关于什么是消息，Class 的结构，selector、IMP、元类等概念将不再赘述&lt;/strong&gt;。本文用到的源码为 objc4-680 和 CF-1153.18，逆向 CoreFoundation.framework 的系统版本为 macOS 10.11.5，汇编语言架构为 x86_64。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;八面玲珑的-objc-msgSend&quot;&gt;&lt;a href=&quot;#八面玲珑的-objc-msgSend&quot; class=&quot;headerlink&quot; title=&quot;八面玲珑的 objc_msgSend&quot;&gt;&lt;/a&gt;八面玲珑的 objc_msgSend&lt;/h2&gt;&lt;p&gt;此函数是消息发送必经之路，但只要一提 &lt;code&gt;objc_msgSend&lt;/code&gt;，都会说它的伪代码如下或类似的逻辑，反正就是获取 IMP 并调用：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;id objc_msgSend(id self, SEL _cmd, ...) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Class &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;object_getClass&lt;/span&gt;&lt;/span&gt;(self);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  IMP imp = class_getMethodImplementation(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;_cmd);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; imp ? imp(self, _cmd, ...) : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;源码解析&quot;&gt;&lt;a href=&quot;#源码解析&quot; class=&quot;headerlink&quot; title=&quot;源码解析&quot;&gt;&lt;/a&gt;源码解析&lt;/h3&gt;&lt;p&gt;为啥老用伪代码？因为 &lt;code&gt;objc_msgSend&lt;/code&gt; 是用汇编语言写的，针对不同架构有不同的实现。如下为 &lt;code&gt;x86_64&lt;/code&gt; 架构下的源码，可以在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/Messengers.subproj/objc-msg-x86_64.s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-msg-x86_64.s&lt;/a&gt; 文件中找到，关键代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	ENTRY	_objc_msgSend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MESSENGER_START&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NilTest	NORMAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetIsaFast NORMAL		&lt;span class=&quot;comment&quot;&gt;// r11 = self-&amp;gt;isa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CacheLookup NORMAL		&lt;span class=&quot;comment&quot;&gt;// calls IMP on success&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	NilTestSupport	NORMAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetIsaSupport	   NORMAL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// cache miss: go search the method lists&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LCacheMiss:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// isa still in r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MethodTableLookup &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;1, &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;2	&lt;span class=&quot;comment&quot;&gt;// r11 = IMP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cmp	&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11, &lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11		&lt;span class=&quot;comment&quot;&gt;// set eq (nonstret) for forwarding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	jmp	*&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11			&lt;span class=&quot;comment&quot;&gt;// goto *imp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	END_ENTRY	_objc_msgSend&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里面包含一些有意义的宏：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NilTest&lt;/code&gt; 宏，判断被发送消息的对象是否为 &lt;code&gt;nil&lt;/code&gt; 的。如果为 &lt;code&gt;nil&lt;/code&gt;，那就直接返回 &lt;code&gt;nil&lt;/code&gt;。这就是为啥也可以对 &lt;code&gt;nil&lt;/code&gt; 发消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GetIsaFast&lt;/code&gt; 宏可以『快速地』获取到对象的 &lt;code&gt;isa&lt;/code&gt; 指针地址（放到 &lt;code&gt;r11&lt;/code&gt; 寄存器，&lt;code&gt;r10&lt;/code&gt; 会被重写；在 arm 架构上是直接赋值到 &lt;code&gt;r9&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CacheLookup&lt;/code&gt; 这个宏是在类的缓存中查找 selector 对应的 IMP（放到 &lt;code&gt;r10&lt;/code&gt;）并执行。如果缓存没中，那就得到 Class 的方法表中查找了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MethodTableLookup&lt;/code&gt; 宏是重点，负责在缓存没命中时在方法表中负责查找 IMP：&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;.macro&lt;/span&gt; MethodTableLookup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	MESSENGER_END_SLOW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SaveRegisters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// _class_lookupMethodAndLoadCache3(receiver, &lt;span class=&quot;keyword&quot;&gt;selector, &lt;/span&gt;class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;$0&lt;/span&gt;, %&lt;span class=&quot;built_in&quot;&gt;a1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;$1&lt;/span&gt;, %&lt;span class=&quot;built_in&quot;&gt;a2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;%&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;, %&lt;span class=&quot;built_in&quot;&gt;a3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	call	__class_lookupMethodAndLoadCache3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// IMP is now in %rax&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;%rax, %&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RestoreRegisters&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;.endmacro&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码可以看出方法查找 IMP 的工作交给了 OC 中的 &lt;code&gt;_class_lookupMethodAndLoadCache3&lt;/code&gt; 函数，并将 IMP 返回（从 &lt;code&gt;r11&lt;/code&gt; 挪到 &lt;code&gt;rax&lt;/code&gt;）。最后在 &lt;code&gt;objc_msgSend&lt;/code&gt; 中调用 IMP。&lt;/p&gt;
&lt;h3 id=&quot;为什么使用汇编语言&quot;&gt;&lt;a href=&quot;#为什么使用汇编语言&quot; class=&quot;headerlink&quot; title=&quot;为什么使用汇编语言&quot;&gt;&lt;/a&gt;为什么使用汇编语言&lt;/h3&gt;&lt;p&gt;其实在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/Messengers.subproj/objc-msg-x86_64.s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-msg-x86_64.s&lt;/a&gt; 中包含了多个版本的 &lt;code&gt;objc_msgSend&lt;/code&gt; 方法，它们是根据返回值的类型和调用者的类型分别处理的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;objc_msgSendSuper&lt;/code&gt;:向父类发消息，返回值类型为 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objc_msgSend_fpret&lt;/code&gt;:返回值类型为 floating-point，其中包含 &lt;code&gt;objc_msgSend_fp2ret&lt;/code&gt; 入口处理返回值类型为 &lt;code&gt;long double&lt;/code&gt; 的情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objc_msgSend_stret&lt;/code&gt;:返回值为结构体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objc_msgSendSuper_stret&lt;/code&gt;:向父类发消息，返回值类型为结构体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当需要发送消息时，编译器会生成中间代码，根据情况分别调用 &lt;code&gt;objc_msgSend&lt;/code&gt;, &lt;code&gt;objc_msgSend_stret&lt;/code&gt;, &lt;code&gt;objc_msgSendSuper&lt;/code&gt;, 或 &lt;code&gt;objc_msgSendSuper_stret&lt;/code&gt; 其中之一。&lt;/p&gt;
&lt;p&gt;这也是为什么 &lt;code&gt;objc_msgSend&lt;/code&gt; 要用汇编语言而不是 OC、C 或 C++ 语言来实现，因为单独一个方法定义满足不了多种类型返回值，有的方法返回 &lt;code&gt;id&lt;/code&gt;，有的返回 &lt;code&gt;int&lt;/code&gt;。考虑到不同类型参数返回值排列组合映射不同方法签名（method signature）的问题，那 switch 语句得老长了。。。&lt;strong&gt;这些原因可以总结为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Calling_convention&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Calling Convention&lt;/a&gt;，也就是说函数调用者与被调用者必须约定好参数与返回值在不同架构处理器上的存取规则，比如参数是以何种顺序存储在栈上，或是存储在哪些寄存器上。&lt;/strong&gt;除此之外还有其他原因，比如其可变参数用汇编处理起来最方便，因为找到 IMP 地址后参数都在栈上。要是用 C++ 传递可变参数那就悲剧了，prologue 机制会弄乱地址（比如 i386 上为了存储 &lt;code&gt;ebp&lt;/code&gt; 向后移位 4byte），最后还要用 epilogue 打扫战场。而且汇编程序执行效率高，在 Objective-C Runtime 中调用频率较高的函数好多都用汇编写的。&lt;/p&gt;
&lt;h2 id=&quot;使用-lookUpImpOrForward-快速查找-IMP&quot;&gt;&lt;a href=&quot;#使用-lookUpImpOrForward-快速查找-IMP&quot; class=&quot;headerlink&quot; title=&quot;使用 lookUpImpOrForward 快速查找 IMP&quot;&gt;&lt;/a&gt;使用 lookUpImpOrForward 快速查找 IMP&lt;/h2&gt;&lt;p&gt;上一节中说到的 &lt;code&gt;_class_lookupMethodAndLoadCache3&lt;/code&gt; 函数其实只是简单的调用了 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 函数：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP _class_lookupMethodAndLoadCache3(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; obj, SEL sel, Class cls)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lookUpImpOrForward(cls, sel, obj, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                              &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*initialize*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*cache*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*resolver*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 调用时使用缓存参数传入为 &lt;code&gt;NO&lt;/code&gt;，因为之前已经尝试过查找缓存了。&lt;code&gt;IMP lookUpImpOrForward(Class cls, SEL sel, id inst, bool initialize, bool cache, bool resolver)&lt;/code&gt; 实现了一套查找 IMP 的标准路径，也就是在消息转发（Forward）之前的逻辑。&lt;/p&gt;
&lt;h3 id=&quot;优化缓存查找-amp-类的初始化&quot;&gt;&lt;a href=&quot;#优化缓存查找-amp-类的初始化&quot; class=&quot;headerlink&quot; title=&quot;优化缓存查找&amp;amp;类的初始化&quot;&gt;&lt;/a&gt;优化缓存查找&amp;amp;类的初始化&lt;/h3&gt;&lt;p&gt;先对 debug 模式下的 assert 进行 unlock：&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runtimeLock&lt;span class=&quot;selector-class&quot;&gt;.assertUnlocked&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;runtimeLock&lt;/code&gt; 本质上是对 Darwin 提供的线程读写锁 &lt;code&gt;pthread_rwlock_t&lt;/code&gt; 的一层封装，提供了一些便捷的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lookUpImpOrForward&lt;/code&gt; 接着做了如下两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果使用缓存（&lt;code&gt;cache&lt;/code&gt; 参数为 &lt;code&gt;YES&lt;/code&gt;），那就调用 &lt;code&gt;cache_getImp&lt;/code&gt; 方法从缓存查找 IMP。&lt;code&gt;cache_getImp&lt;/code&gt; 是用汇编语言写的，也可以在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/Messengers.subproj/objc-msg-x86_64.s&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc-msg-x86_64.s&lt;/a&gt; 找到，其依然用了之前说过的 &lt;code&gt;CacheLookup&lt;/code&gt; 宏。因为 &lt;code&gt;_class_lookupMethodAndLoadCache3&lt;/code&gt; 调用 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 时 &lt;code&gt;cache&lt;/code&gt; 参数为 &lt;code&gt;NO&lt;/code&gt;，&lt;strong&gt;这步直接略过&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果是第一次用到这个类且 &lt;code&gt;initialize&lt;/code&gt; 参数为 &lt;code&gt;YES&lt;/code&gt;（&lt;code&gt;initialize  &amp;amp;&amp;amp;  !cls-&amp;gt;isInitialized()&lt;/code&gt;），需要进行初始化工作，也就是开辟一个用于读写数据的空间。先对 &lt;code&gt;runtimeLock&lt;/code&gt; 写操作加锁，然后调用 &lt;code&gt;cls&lt;/code&gt; 的 &lt;code&gt;initialize&lt;/code&gt; 方法。如果 &lt;code&gt;sel == initialize&lt;/code&gt; 也没关系，虽然 &lt;code&gt;initialize&lt;/code&gt; 还会被调用一次，但不会起作用啦，因为 &lt;code&gt;cls-&amp;gt;isInitialized()&lt;/code&gt; 已经是 &lt;code&gt;YES&lt;/code&gt; 啦。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;继续在类的继承体系中查找&quot;&gt;&lt;a href=&quot;#继续在类的继承体系中查找&quot; class=&quot;headerlink&quot; title=&quot;继续在类的继承体系中查找&quot;&gt;&lt;/a&gt;继续在类的继承体系中查找&lt;/h3&gt;&lt;p&gt;考虑到运行时类中的方法可能会增加，需要先做读操作加锁，使得方法查找和缓存填充成为原子操作。添加 category 会刷新缓存，之后如果旧数据又被重填到缓存中，category 添加操作就会被忽略掉。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;runtimeLock&lt;span class=&quot;selector-class&quot;&gt;.read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后的逻辑整理如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果 selector 是需要被忽略的垃圾回收用到的方法，则将 IMP 结果设为 &lt;code&gt;_objc_ignored_method&lt;/code&gt;，这是个汇编程序入口，可以理解为一个标记。对此种情况进行缓存填充操作后，跳到第 7 步；否则执行下一步。&lt;/li&gt;
&lt;li&gt;查找当前类中的缓存，跟之前一样，使用 &lt;code&gt;cache_getImp&lt;/code&gt; 汇编程序入口。如果命中缓存获取到了 IMP，则直接跳到第 7 步；否则执行下一步。&lt;/li&gt;
&lt;li&gt;在当前类中的方法列表（method list）中进行查找，也就是根据 selector 查找到 Method 后，获取 Method 中的 IMP（也就是 &lt;code&gt;method_imp&lt;/code&gt; 属性），并填充到缓存中。查找过程比较复杂，会针对已经排序的列表使用二分法查找，未排序的列表则是线性遍历。如果成功查找到 Method 对象，就直接跳到第 7 步；否则执行下一步。&lt;/li&gt;
&lt;li&gt;在继承层级中递归向父类中查找，情况跟上一步类似，也是先查找缓存，缓存没中就查找方法列表。这里跟上一步不同的地方在于缓存策略，有个 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 汇编程序入口作为缓存中消息转发的标记。也就是说如果在缓存中找到了 IMP，但如果发现其内容是 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt;，那就终止在类的继承层级中递归查找，进入下一步；否则跳到第 7 步。&lt;/li&gt;
&lt;li&gt;当传入 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 的参数 &lt;code&gt;resolver&lt;/code&gt; 为 &lt;code&gt;YES&lt;/code&gt; 并且是第一次进入第 5 步时，时进入动态方法解析；否则进入下一步。这步消息转发前的最后一次机会。此时释放读入锁（&lt;code&gt;runtimeLock.unlockRead()&lt;/code&gt;），接着间接地发送 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt; 或 &lt;code&gt;+resolveClassMethod&lt;/code&gt; 消息。这相当于告诉程序员『赶紧用 Runtime 给类里这个 selector 弄个对应的 IMP 吧』，因为此时锁已经 unlock 了所以不会缓存结果，甚至还需要软性地处理缓存过期问题可能带来的错误。这里的业务逻辑稍微复杂些，后面会总结。因为这些工作都是在非线程安全下进行的，完成后需要回到第 1 步再次查找 IMP。&lt;/li&gt;
&lt;li&gt;此时不仅没查找到 IMP，动态方法解析也不奏效，只能将 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 当做 IMP 并写入缓存。这也就是之前第 4 步中为何查找到 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 就表明了要进入消息转发了。&lt;/li&gt;
&lt;li&gt;读操作解锁，并将之前找到的 IMP 返回。（无论是正经 IMP 还是不正经的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt;）这步还偏执地做了一些脑洞略大的 assert，很有趣。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于第 5 步，其实是直接调用 &lt;code&gt;_class_resolveMethod&lt;/code&gt; 函数，在这个函数中实现了复杂的方法解析逻辑。如果 &lt;code&gt;cls&lt;/code&gt; 是元类则会发送  &lt;code&gt;+resolveClassMethod&lt;/code&gt;，然后根据 &lt;code&gt;lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/)&lt;/code&gt; 函数的结果来判断是否发送 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt;；如果不是元类，则只需要发送 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt; 消息。这里调用 &lt;code&gt;+resolveInstanceMethod&lt;/code&gt; 或 &lt;code&gt;+resolveClassMethod&lt;/code&gt; 时再次用到了 &lt;code&gt;objc_msgSend&lt;/code&gt;，而且第三个参数正是传入 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 的那个 &lt;code&gt;sel&lt;/code&gt;。在发送方法解析消息之后还会调用 &lt;code&gt;lookUpImpOrNil(cls, sel, inst, NO/*initialize*/, YES/*cache*/, NO/*resolver*/)&lt;/code&gt; 来判断是否已经添加上 &lt;code&gt;sel&lt;/code&gt; 对应的 IMP 了，打印出结果。&lt;/p&gt;
&lt;p&gt;最后 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 方法也会把真正的 IMP 或者需要消息转发的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 返回，并最终专递到 &lt;code&gt;objc_msgSend&lt;/code&gt; 中。而 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 会在转化成 &lt;code&gt;_objc_msgForward&lt;/code&gt; 或 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt;。这个后面会讲解原理。&lt;/p&gt;
&lt;h3 id=&quot;回顾-objc-msgSend-伪代码&quot;&gt;&lt;a href=&quot;#回顾-objc-msgSend-伪代码&quot; class=&quot;headerlink&quot; title=&quot;回顾 objc_msgSend 伪代码&quot;&gt;&lt;/a&gt;回顾 objc_msgSend 伪代码&lt;/h3&gt;&lt;p&gt;回过头来会发现 &lt;code&gt;objc_msgSend&lt;/code&gt; 的伪代码描述得很传神啊，因为&lt;code&gt;class_getMethodImplementation&lt;/code&gt; 的实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP class_getMethodImplementation(Class cls, SEL sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!cls  ||  !sel) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    imp = lookUpImpOrNil(cls, sel, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*initialize*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*cache*/&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*resolver*/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Translate forwarding function to C-callable external version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!imp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _objc_msgForward;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; imp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;lookUpImpOrNil&lt;/code&gt; 函数获取不到 IMP 时就返回 &lt;code&gt;_objc_msgForward&lt;/code&gt;，后面会讲到它。&lt;code&gt;lookUpImpOrNil&lt;/code&gt; 跟 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 的功能很相似，只是将 &lt;code&gt;lookUpImpOrForward&lt;/code&gt; 实现中的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 替换成了 &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;IMP lookUpImpOrNil(Class cls, SEL sel, id &lt;span class=&quot;keyword&quot;&gt;inst, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   &lt;span class=&quot;keyword&quot;&gt;bool &lt;/span&gt;initialize, &lt;span class=&quot;keyword&quot;&gt;bool &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;cache, &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool &lt;/span&gt;resolver)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp = lookUpImpOrForward(cls, sel, &lt;span class=&quot;keyword&quot;&gt;inst, &lt;/span&gt;initialize, &lt;span class=&quot;keyword&quot;&gt;cache, &lt;/span&gt;resolver)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (imp == _objc_msgForward_impcache) return nil&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else return imp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;lookUpImpOrNil&lt;/code&gt; 方法可以查找到 selector 对应的 IMP 或是 &lt;code&gt;nil&lt;/code&gt;，所以如果不考虑返回值类型为结构体的情况，用那几行伪代码来表示复杂的汇编实现还是挺恰当的。&lt;/p&gt;
&lt;h2 id=&quot;forwarding-中路漫漫的消息转发&quot;&gt;&lt;a href=&quot;#forwarding-中路漫漫的消息转发&quot; class=&quot;headerlink&quot; title=&quot;forwarding 中路漫漫的消息转发&quot;&gt;&lt;/a&gt;&lt;strong&gt;forwarding&lt;/strong&gt; 中路漫漫的消息转发&lt;/h2&gt;&lt;h3 id=&quot;objc-msgForward-impcache-的转换&quot;&gt;&lt;a href=&quot;#objc-msgForward-impcache-的转换&quot; class=&quot;headerlink&quot; title=&quot;objc_msgForward_impcache 的转换&quot;&gt;&lt;/a&gt;objc_msgForward_impcache 的转换&lt;/h3&gt;&lt;p&gt;&lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 只是个内部的函数指针，只存储于上节提到的类的方法缓存中，需要被转化为 &lt;code&gt;_objc_msgForward&lt;/code&gt; 和 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 才能被外部调用。但在 &lt;del&gt;Mac OS X&lt;/del&gt; macOS 10.6 及更早版本的 libobjc.A.dylib 中是不能直接调用的，况且我们根本不会直接用到它。带 &lt;code&gt;stret&lt;/code&gt; 后缀的函数依旧是返回值为结构体的版本。&lt;/p&gt;
&lt;p&gt;上一节最后讲到如果没找到 IMP，就会将 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 返回到 &lt;code&gt;objc_msgSend&lt;/code&gt; 函数，而正是因为它是用汇编语言写的，所以将内部使用的 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 转化成外部可调用的 &lt;code&gt;_objc_msgForward&lt;/code&gt; 或 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 也是由汇编代码来完成。实现原理很简单，就是增加个静态入口 &lt;code&gt;__objc_msgForward_impcache&lt;/code&gt;，然后根据此时 CPU 的状态寄存器的内容来决定转换成哪个。如果是 &lt;code&gt;NE&lt;/code&gt;(Not Equal) 则转换成 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt;，反之是 &lt;code&gt;EQ&lt;/code&gt;(Equal) 则转换成 &lt;code&gt;_objc_msgForward&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;jne	&lt;/span&gt;__objc_msgForward_stret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;jmp	&lt;/span&gt;__objc_msgForward&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为何根据状态寄存器的值来判断转换成哪个函数指针呢？回过头来看看 &lt;code&gt;objc_msgSend&lt;/code&gt; 中调用完 &lt;code&gt;MethodTableLookup&lt;/code&gt; 之后干了什么：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MethodTableLookup %a1, %a2	// r11 = IMP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmp	%r11, %r11		// set e&lt;span class=&quot;string&quot;&gt;q (nonstret)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; forwarding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp	*%r11			// &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; *imp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再看看返回值为结构体的 &lt;code&gt;objc_msgSend_stret&lt;/code&gt; 这里的逻辑：&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MethodTableLookup &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;2, &lt;span class=&quot;built_in&quot;&gt;%a&lt;/span&gt;3	&lt;span class=&quot;comment&quot;&gt;// r11 = IMP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test	&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11, &lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11		&lt;span class=&quot;comment&quot;&gt;// set ne (stret) for forward; r11!=0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jmp	*&lt;span class=&quot;built_in&quot;&gt;%r&lt;/span&gt;11			&lt;span class=&quot;comment&quot;&gt;// goto *imp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;稍微懂汇编的人一眼就看明白了，不懂的看注释也懂了，我就不墨迹了。现在总算是把消息转发前的逻辑绕回来构成闭环了。&lt;/p&gt;
&lt;p&gt;上一节中提到 &lt;code&gt;class_getMethodImplementation&lt;/code&gt; 函数的实现，在查找不到 IMP 时返回 &lt;code&gt;_objc_msgForward&lt;/code&gt;，而 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 正好对应着 &lt;code&gt;class_getMethodImplementation_stret&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;IMP&lt;/span&gt; class_getMethodImplementation_stret(Class cls, &lt;span class=&quot;keyword&quot;&gt;SEL &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IMP imp = class_getMethodImplementation(cls, &lt;span class=&quot;keyword&quot;&gt;sel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    // Translate forwarding &lt;span class=&quot;meta&quot;&gt;function&lt;/span&gt; to &lt;span class=&quot;keyword&quot;&gt;struct-returning &lt;/span&gt;version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;if&lt;/span&gt; (imp == (IMP)&amp;amp;_objc_msgForward &lt;span class=&quot;comment&quot;&gt;/* not _internal! */&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (IMP)&amp;amp;_objc_msgForward_stret&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return imp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说 &lt;code&gt;_objc_msgForward*&lt;/code&gt; 系列本质都是函数指针，都用汇编语言实现，都可以与 IMP 类型的值作比较。&lt;code&gt;_objc_msgForward&lt;/code&gt; 和 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 声明在 &lt;a href=&quot;https://github.com/opensource-apple/objc4/blob/master/runtime/message.h&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;message.h&lt;/a&gt; 文件中。&lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 在早期版本的 Runtime 中叫做 &lt;code&gt;_objc_msgForward_internal&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;objc-msgForward-也只是个入口&quot;&gt;&lt;a href=&quot;#objc-msgForward-也只是个入口&quot; class=&quot;headerlink&quot; title=&quot;objc_msgForward 也只是个入口&quot;&gt;&lt;/a&gt;objc_msgForward 也只是个入口&lt;/h3&gt;&lt;p&gt;从汇编源码可以很容易看出 &lt;strong&gt;&lt;code&gt;_objc_msgForward&lt;/code&gt; 和 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt; 会分别调用 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 和 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ENTRY&lt;/span&gt;	__objc_msgForward&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Non-&lt;span class=&quot;keyword&quot;&gt;stret &lt;/span&gt;version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;__objc_forward_handler(%rip), %&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;jmp&lt;/span&gt;	*%&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;END_ENTRY&lt;/span&gt;	__objc_msgForward&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ENTRY&lt;/span&gt;	__objc_msgForward_stret&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// &lt;span class=&quot;keyword&quot;&gt;Struct-return &lt;/span&gt;version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;movq	&lt;/span&gt;__objc_forward_stret_handler(%rip), %&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;jmp&lt;/span&gt;	*%&lt;span class=&quot;built_in&quot;&gt;r11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;END_ENTRY&lt;/span&gt;	__objc_msgForward_stret&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个 handler 函数的区别从字面上就能看出来，不再赘述。&lt;/p&gt;
&lt;p&gt;也就是说，消息转发过程是现将 &lt;code&gt;_objc_msgForward_impcache&lt;/code&gt; 强转成 &lt;code&gt;_objc_msgForward&lt;/code&gt; 或 &lt;code&gt;_objc_msgForward_stret&lt;/code&gt;，再分别调用 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 或 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;objc-setForwardHandler-设置了消息转发的回调&quot;&gt;&lt;a href=&quot;#objc-setForwardHandler-设置了消息转发的回调&quot; class=&quot;headerlink&quot; title=&quot;objc_setForwardHandler 设置了消息转发的回调&quot;&gt;&lt;/a&gt;objc_setForwardHandler 设置了消息转发的回调&lt;/h3&gt;&lt;p&gt;在 Objective-C 2.0 之前，默认的 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 或 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt; 都是 &lt;code&gt;nil&lt;/code&gt;，而新版本的默认实现是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Default forward handler halts the process.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__attribute__((noreturn)) &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_defaultForwardHandler(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_fatal(&lt;span class=&quot;string&quot;&gt;&quot;%c[%s %s]: unrecognized selector sent to instance %p &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&quot;(no message forward handler is installed)&quot;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                class_isMetaClass(object_getClass(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)) ? &lt;span class=&quot;string&quot;&gt;&#39;+&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                object_getClassName(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;), sel_getName(sel), &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *_objc_forward_handler = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)objc_defaultForwardHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#if SUPPORT_STRET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; stret &amp;#123; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;]; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__attribute__((noreturn)) &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; stret &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_defaultForwardStretHandler(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, SEL sel)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_defaultForwardHandler(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, sel);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *_objc_forward_stret_handler = (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;*)objc_defaultForwardStretHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;objc_defaultForwardHandler&lt;/code&gt; 中的 &lt;code&gt;_objc_fatal&lt;/code&gt; 作用就是打日志并调用 &lt;code&gt;__builtin_trap()&lt;/code&gt; 触发 crash，可以看到我们最熟悉的那句 “unrecognized selector sent to instance” 日志。&lt;code&gt;__builtin_trap()&lt;/code&gt; 在杀掉进程的同时还能生成日志，比调用 &lt;code&gt;exit()&lt;/code&gt; 更好。&lt;code&gt;objc_defaultForwardStretHandler&lt;/code&gt; 就是装模作样搞个形式主义，把 &lt;code&gt;objc_defaultForwardHandler&lt;/code&gt; 包了一层。&lt;code&gt;__attribute__((noreturn))&lt;/code&gt;  属性通知编译器函数从不返回值，当遇到类似函数需要返回值而却不可能运行到返回值处就已经退出来的情况，该属性可以避免出现错误信息。这里正适合此属性，因为要求返回结构体哒。&lt;/p&gt;
&lt;p&gt;因为默认的 Handler 干的事儿就是打日志触发 crash，我们想要实现消息转发，就需要替换掉 Handler 并赋值给 &lt;code&gt;_objc_forward_handler&lt;/code&gt; 或 &lt;code&gt;_objc_forward_handler_stret&lt;/code&gt;，赋值的过程就需要用到 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 函数，实现也是简单粗暴，就是赋值啊：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;objc_setForwardHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fwd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *fwd_stret)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_forward_handler = fwd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;if&lt;/span&gt; SUPPORT_STRET&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _objc_forward_stret_handler = fwd_stret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;逆向工程助力刨根问底&quot;&gt;&lt;a href=&quot;#逆向工程助力刨根问底&quot; class=&quot;headerlink&quot; title=&quot;逆向工程助力刨根问底&quot;&gt;&lt;/a&gt;逆向工程助力刨根问底&lt;/h3&gt;&lt;p&gt;重头戏在于对 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 的调用，以及之后的消息转发调用栈。这回不是在 Objective-C Runtime （libobjc.dylib）中啦，而是在 Core Foundation（CoreFoundation.framework）中。虽然 CF 是开源的，但有意思的是苹果故意在开源的代码中删除了在 &lt;a href=&quot;https://github.com/opensource-apple/CF/blob/master/CFRuntime.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CFRuntime.c&lt;/a&gt; 文件 &lt;code&gt;__CFInitialize()&lt;/code&gt; 中调用 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 的代码。&lt;code&gt;__CFInitialize()&lt;/code&gt; 函数是在 CF runtime 连接到进程时初始化调用的。从反编译得到的汇编代码中可以很容易跟 C 源码对比出来，我用红色标出了同一段代码的差异。&lt;/p&gt;
&lt;p&gt;汇编语言还是比较好理解的，红色标出的那三个指令就是把 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 作为参数调用 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 方法（那么之前那两个 DefaultHandler 卵用都没有咯，反正不出意外会被 CF 替换掉）：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MessageForward/QQ20160614-1@2x.png&quot; alt=&quot;反编译后的 __CFInitialize() 汇编代码&quot;&gt;&lt;/p&gt;
&lt;p&gt;然而在源码中对应的代码却被删掉啦：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MessageForward/QQ20160614-2@2x.png&quot; alt=&quot;苹果提供的 __CFInitialize() 函数源码&quot;&gt;&lt;/p&gt;
&lt;p&gt;在早期版本的 CF 源码中，还是可以看到 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 的声明的，但是不会有实现源码，也没有对 &lt;code&gt;objc_setForwardHandler&lt;/code&gt; 的调用。这些细节从函数调用栈中无法看出，只能逆向工程看汇编指令。但从函数调用栈可以看出 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 这两个 Forward Handler 做了啥：&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2016-06-14 12:50:15.385 MessageForward[67364:7174239] -[MFObject sendMessage]: unrecognized selector sent to&lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;0x1006001a0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2016-06-14 12:50:15.387 MessageForward[67364:7174239] *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;-[MFObject sendMessage]: unrecognized selector sent to&lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;0x1006001a0&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*** First&lt;span class=&quot;built_in&quot;&gt; throw &lt;/span&gt;call stack:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	0   CoreFoundation                      0x00007fff8fa554f2 __exceptionPreprocess + 178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	1   libobjc.A.dylib                     0x00007fff98396f7e objc_exception_throw + 48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	2   CoreFoundation                      0x00007fff8fabf1ad -[NSObject(NSObject) doesNotRecognizeSelector:] + 205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	3   CoreFoundation                      0x00007fff8f9c5571 ___forwarding___ + 1009&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	4   CoreFoundation                      0x00007fff8f9c50f8 _CF_forwarding_prep_0 + 120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	5   MessageForward                      0x0000000100000f1f main + 79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	6   libdyld.dylib                       0x00007fff8bc2c5ad start + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	7   ???                                 0x0000000000000001 0x0 + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;libc++abi.dylib: terminating with uncaught exception of type NSException&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个日志场景熟悉得不能再熟悉了，可以看出 &lt;code&gt;_CF_forwarding_prep_0&lt;/code&gt; 函数调用了 &lt;code&gt;___forwarding___&lt;/code&gt; 函数，接着又调用了 &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 方法，最后抛出异常。&lt;strong&gt;但是靠这些是无法说服看客的，还得靠逆向工程反编译后再反汇编成伪代码来一探究竟，刨根问底。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 函数都调用了 &lt;code&gt;___forwarding___&lt;/code&gt;，只是传入参数不同。&lt;code&gt;___forwarding___&lt;/code&gt; 有两个参数，第一个参数为将要被转发消息的栈指针（可以简单理解成 IMP），第二个参数标记是否返回结构体。&lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 第二个参数传入 &lt;code&gt;0&lt;/code&gt;，&lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 传入的是 &lt;code&gt;1&lt;/code&gt;，从函数名都能看得出来。下面是这两个函数的伪代码：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __CF_forwarding_prep_0(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg0, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg3, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg4, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg5) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = ____forwarding___(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123; // 转发结果不为空，将内容返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123; // 转发结果为空，调用 objc_msgSend(id self, SEL _cmd,...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt; = *(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = objc_msgSend(&lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ___forwarding_prep_1___(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg0, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg2, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg3, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg4, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arg5) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = ____forwarding___(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x1&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;// 转发结果不为空，将内容返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else &amp;#123;// 转发结果为空，调用 objc_msgSend_stret(void * st_addr, id self, SEL _cmd, ...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt; = *(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt; = *(&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt; = *&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = objc_msgSend_stret(&lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;x86_64&lt;/code&gt; 架构中，&lt;code&gt;rax&lt;/code&gt; 寄存器一般是作为返回值，&lt;code&gt;rsp&lt;/code&gt; 寄存器是栈指针。在调用 &lt;code&gt;objc_msgSend&lt;/code&gt; 函数时，参数 &lt;code&gt;arg0(self), arg1(_cmd), arg2, arg3, arg4, arg5&lt;/code&gt; 分别使用寄存器 &lt;code&gt;rdi, rsi, rdx, rcx, r8, r9&lt;/code&gt; 的值。在调用 &lt;code&gt;objc_msgSend_stret&lt;/code&gt; 时第一个参数为 &lt;code&gt;st_addr&lt;/code&gt;，其余参数依次后移。为了能够打包出 &lt;code&gt;NSInvocation&lt;/code&gt; 实例并传入后续的 &lt;code&gt;forwardInvocation:&lt;/code&gt; 方法，在调用 &lt;code&gt;___forwarding___&lt;/code&gt; 函数之前会先将所有参数压入栈中。因为寄存器 &lt;code&gt;rsp&lt;/code&gt; 为栈指针指向栈顶，所以 &lt;code&gt;rsp&lt;/code&gt; 的内容就是 &lt;code&gt;self&lt;/code&gt; 啦，因为 &lt;code&gt;x86_64&lt;/code&gt; 是小端，栈增长方向是由高地址到低地址，所以从栈顶往下移动一个指针需要&lt;strong&gt;加&lt;/strong&gt; &lt;code&gt;0x8（64bit）&lt;/code&gt;。而将参数入栈的顺序是从后往前的，也就是说 &lt;code&gt;arg0&lt;/code&gt; 是最后一个入栈的，位于栈顶：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt; __CF_forwarding_prep_0:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085080&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;push&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;rbp&lt;/span&gt;                                         &lt;span class=&quot;comment&quot;&gt;; XREF=___CFInitialize+138&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085081&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rbp&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085084&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xd0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;000000000008508b         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0xb0&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0000000000085093&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0xa0&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;000000000008509c         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x90&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850a5         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850ae         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x70&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850b4         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x60&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850ba         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x50&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850c0         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x40&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850c6         &lt;span class=&quot;keyword&quot;&gt;movq&lt;/span&gt;       &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x30&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;xmm0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850cc         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x28&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;r9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850d1         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x20&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;r8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850d6         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x18&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rcx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850&lt;span class=&quot;built_in&quot;&gt;db&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x10&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rdx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850e0         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0x8&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850e5         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;qword&lt;/span&gt; [&lt;span class=&quot;built_in&quot;&gt;ss&lt;/span&gt;:&lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;], &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850e9         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rdi&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;rsp&lt;/span&gt;                                    &lt;span class=&quot;comment&quot;&gt;; argument #1 for method ____forwarding___&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850ec         &lt;span class=&quot;keyword&quot;&gt;mov&lt;/span&gt;        &lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;                                    &lt;span class=&quot;comment&quot;&gt;; argument #2 for method ____forwarding___&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;00000000000850f3         &lt;span class=&quot;keyword&quot;&gt;call&lt;/span&gt;       ____forwarding___&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;消息转发的逻辑几乎都写在 &lt;code&gt;___forwarding___&lt;/code&gt; 函数中了，实现比较复杂，反编译出的伪代码也不是很直观。我对 &lt;a href=&quot;http://arigrant.com/blog/2013/12/13/a-selector-left-unhandled&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;arigrant.com&lt;/a&gt; 的结果完善如下：&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int __forwarding__(&lt;span class=&quot;name&quot;&gt;void&lt;/span&gt; *frameStackPointer, int isStret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id receiver = *(&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt; *)frameStackPointer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SEL sel = *(&lt;span class=&quot;name&quot;&gt;SEL&lt;/span&gt; *)(frameStackPointer + 8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const char *selName = sel_getName(&lt;span class=&quot;name&quot;&gt;sel&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Class receiverClass = object_getClass(&lt;span class=&quot;name&quot;&gt;receiver&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 调用 forwardingTargetForSelector:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;class_respondsToSelector&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;receiverClass&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;forwardingTargetForSelector&lt;/span&gt;:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id forwardingTarget = [receiver forwardingTargetForSelector&lt;span class=&quot;symbol&quot;&gt;:sel&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;name&quot;&gt;forwardingTarget&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; forwarding != receiver) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	if (&lt;span class=&quot;name&quot;&gt;isStret&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		int ret&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		objc_msgSend_stret(&lt;span class=&quot;name&quot;&gt;&amp;amp;ret&lt;/span&gt;,forwardingTarget, sel, ...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		return ret&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      return objc_msgSend(&lt;span class=&quot;name&quot;&gt;forwardingTarget&lt;/span&gt;, sel, ...)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 僵尸对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const char *className = class_getName(receiverClass);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  const char *zombiePrefix = &lt;span class=&quot;string&quot;&gt;&quot;_NSZombie_&quot;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  size_t prefixLen = strlen(&lt;span class=&quot;name&quot;&gt;zombiePrefix&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;; // 0xa&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;strncmp&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;className&lt;/span&gt;, zombiePrefix, prefixLen) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFLog(&lt;span class=&quot;name&quot;&gt;kCFLogLevelError&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          @&lt;span class=&quot;string&quot;&gt;&quot;*** -[%s %s]: message sent to deallocated instance %p&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          className + prefixLen,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          selName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          receiver)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;breakpoint-interrupt&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 调用 methodSignatureForSelector 获取方法签名后再调用 forwardInvocation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;class_respondsToSelector&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;receiverClass&lt;/span&gt;, @selector(&lt;span class=&quot;name&quot;&gt;methodSignatureForSelector&lt;/span&gt;:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSMethodSignature *methodSignature = [receiver methodSignatureForSelector:sel];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (methodSignature) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      BOOL signatureIsStret = [methodSignature _frameDescriptor]-&amp;gt;returnArgInfo.flags.isStruct;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (signatureIsStret != isStret) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CFLog(kCFLogLevelWarning ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              @&quot;*** NSForwarding: warning: method signature and compiler disagree on struct-return-edness of &#39;%s&#39;.  Signature thinks it does%s return a struct, and compiler thinks it does%s.&lt;span class=&quot;string&quot;&gt;&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              selName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              signatureIsStret ? &quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; : not,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              isStret ? &quot;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; : not);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if (class_respondsToSelector(receiverClass, @selector(forwardInvocation:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NSInvocation *invocation = [NSInvocation _invocationWithMethodSignature:methodSignature frame:frameStackPointer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [receiver forwardInvocation:invocation];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        void *returnValue = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [invocation getReturnValue:&amp;amp;value];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return returnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CFLog(kCFLogLevelWarning ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              @&quot;&lt;/span&gt;*** NSForwarding: warning: object %p of class &#39;%s&#39; does not implement forwardInvocation: -- dropping message&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              receiver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              className);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SEL *registeredSel = sel_getUid(&lt;span class=&quot;name&quot;&gt;selName&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // selector 是否已经在 Runtime 注册过&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  if (&lt;span class=&quot;name&quot;&gt;sel&lt;/span&gt; != registeredSel) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFLog(&lt;span class=&quot;name&quot;&gt;kCFLogLevelWarning&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          @&lt;span class=&quot;string&quot;&gt;&quot;*** NSForwarding: warning: selector (%p) for message &#39;%s&#39; does not match selector known to Objective C runtime (%p)-- abort&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          sel,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          selName,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          registeredSel)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; // doesNotRecognizeSelector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  else if (&lt;span class=&quot;name&quot;&gt;class_respondsToSelector&lt;/span&gt;(&lt;span class=&quot;name&quot;&gt;receiverClass&lt;/span&gt;,@selector(&lt;span class=&quot;name&quot;&gt;doesNotRecognizeSelector&lt;/span&gt;:))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [receiver doesNotRecognizeSelector&lt;span class=&quot;symbol&quot;&gt;:sel&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CFLog(&lt;span class=&quot;name&quot;&gt;kCFLogLevelWarning&lt;/span&gt; ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          @&lt;span class=&quot;string&quot;&gt;&quot;*** NSForwarding: warning: object %p of class &#39;%s&#39; does not implement doesNotRecognizeSelector: -- abort&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          receiver,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          className)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // The point of no return.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  kill(&lt;span class=&quot;name&quot;&gt;getpid&lt;/span&gt;(), &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这么一大坨代码就是整个消息转发路径的逻辑，概括如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先调用 &lt;code&gt;forwardingTargetForSelector&lt;/code&gt; 方法获取新的 target 作为 receiver 重新执行 selector，如果返回的内容不合法（为 &lt;code&gt;nil&lt;/code&gt; 或者跟旧 receiver 一样），那就进入第二步。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;methodSignatureForSelector&lt;/code&gt; 获取方法签名后，判断返回类型信息是否正确，再调用 &lt;code&gt;forwardInvocation&lt;/code&gt; 执行 &lt;code&gt;NSInvocation&lt;/code&gt; 对象，并将结果返回。如果对象没实现 &lt;code&gt;methodSignatureForSelector&lt;/code&gt; 方法，进入第三步。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 之前其实还有个判断 selector 在 Runtime 中是否注册过的逻辑，但在我们正常发消息的时候不会出此问题。但如果手动创建一个 &lt;code&gt;NSInvocation&lt;/code&gt; 对象并调用 &lt;code&gt;invoke&lt;/code&gt;，并将第二个参数设置成一个不存在的 selector，那就会导致这个问题，并输入日志 “does not match selector known to Objective C runtime”。较真儿的读者可能会有疑问：何这段逻辑判断干脆用不到却还存在着？难道除了 &lt;code&gt;__CF_forwarding_prep_0&lt;/code&gt; 和 &lt;code&gt;___forwarding_prep_1___&lt;/code&gt; 函数还有其他函数也调用 &lt;code&gt;___forwarding___&lt;/code&gt; 么？莫非消息转发还有其他路径？其实并不是！原因是 &lt;code&gt;___forwarding___&lt;/code&gt; 调用了 &lt;code&gt;___invoking___&lt;/code&gt; 函数，所以上面的伪代码直接把 &lt;code&gt;___invoking___&lt;/code&gt; 函数的逻辑也『翻译』过来了。除了 &lt;code&gt;___forwarding___&lt;/code&gt; 函数，以下方法也会调用&lt;code&gt;___invoking___&lt;/code&gt; 函数:&lt;/p&gt;
&lt;figure class=&quot;highlight haml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-&lt;span class=&quot;ruby&quot;&gt;[NSInvocation invoke]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;[NSInvocation &lt;span class=&quot;symbol&quot;&gt;invokeUsingIMP:&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;[NSInvocation invokeSuper]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 方法其实在 libobj.A.dylib 中已经废弃了，而是在 CF 框架中实现，而且也不是开源的。从函数调用栈可以发现 &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 之后会抛出异常，而 Runtime 中废弃的实现只是打日志后直接杀掉进程（&lt;code&gt;__builtin_trap()&lt;/code&gt;）。下面是 CF 中实现的伪代码：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; -[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; doesNotRecognizeSelector:](&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * _cmd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * arg2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r14 = ___&lt;span class=&quot;built_in&quot;&gt;CFFullMethodName&lt;/span&gt;([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;built_in&quot;&gt;CFLog&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0x3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to instance %p&quot;&lt;/span&gt;, r14, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, r8, r9, stack[&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rbx = _&lt;span class=&quot;built_in&quot;&gt;CFMakeCollectable&lt;/span&gt;(_&lt;span class=&quot;built_in&quot;&gt;CFStringCreateWithFormat&lt;/span&gt;(___k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorSystemDefault&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to instance %p&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(int8_t *)___&lt;span class=&quot;built_in&quot;&gt;CFOASafe&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ___&lt;span class=&quot;built_in&quot;&gt;CFRecordAllocationEvent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = _objc_rootAutorelease(rbx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = [&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; exceptionWithName:&lt;span class=&quot;string&quot;&gt;@&quot;NSInvalidArgumentException&quot;&lt;/span&gt; reason:rax userInfo:&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_exception_throw(rax);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; +[&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; doesNotRecognizeSelector:](&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * _cmd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * arg2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    r14 = ___&lt;span class=&quot;built_in&quot;&gt;CFFullMethodName&lt;/span&gt;([&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; class], &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, arg2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _&lt;span class=&quot;built_in&quot;&gt;CFLog&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0x3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to class %p&quot;&lt;/span&gt;, r14, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, r8, r9, stack[&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rbx = _&lt;span class=&quot;built_in&quot;&gt;CFMakeCollectable&lt;/span&gt;(_&lt;span class=&quot;built_in&quot;&gt;CFStringCreateWithFormat&lt;/span&gt;(___k&lt;span class=&quot;built_in&quot;&gt;CFAllocatorSystemDefault&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;@&quot;%@: unrecognized selector sent to class %p&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (*(int8_t *)___&lt;span class=&quot;built_in&quot;&gt;CFOASafe&lt;/span&gt; != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ___&lt;span class=&quot;built_in&quot;&gt;CFRecordAllocationEvent&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = _objc_rootAutorelease(rbx);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rax = [&lt;span class=&quot;built_in&quot;&gt;NSException&lt;/span&gt; exceptionWithName:&lt;span class=&quot;string&quot;&gt;@&quot;NSInvalidArgumentException&quot;&lt;/span&gt; reason:rax userInfo:&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    objc_exception_throw(rax);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也就是说我们可以 override &lt;code&gt;doesNotRecognizeSelector&lt;/code&gt; 或者捕获其抛出的异常。在这里还是大有文章可做的。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;我将整个实现流程绘制出来，过滤了一些不会进入的分支路径和跟主题无关的细节：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/MessageForward/消息发送与转发路径流程图.jpg&quot; alt=&quot;消息发送与转发路径流程图&quot;&gt; &lt;/p&gt;
&lt;p&gt;介于国内关于这块知识的好多文章描述不够准确和详细，或是对消息转发的原理描述理解不够深刻，或是侧重贴源码而欠思考，所以我做了一个比较全面详细的讲解。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://arigrant.com/blog/2014/2/12/why-objcmsgsend-must-be-written-in-assembly&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Why objc_msgSend Must be Written in Assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arigrant.com/blog/2013/12/13/a-selector-left-unhandled&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hmmm, What’s that Selector?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.zhengdong.me/2013/07/18/a-look-under-the-hood-of-objc-msgsend/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Look Under the Hood of objc_msgSend()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arigrant.com/blog/2014/2/18/chisels-print-invocation-command&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Printing Objective-C Invocations in LLDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;消息发送和转发流程可以概括为：消息发送（Messaging）是 Runtime 通过 selector 快速查找 IMP 的过程，有了函数指针就可以执行对应的方法实现；消息转发（Message Forwarding）是在查找 IMP 失败后执行一系列转发流程的慢速通道，如果不作转发处理，则会打日志和抛出异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文不讲述开发者在消息发送和转发流程中需要做的事，而是讲述原理。能够很好地阅读本文的前提是你对 &lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot;&gt;Objective-C Runtime&lt;/a&gt; 已经有一定的了解，关于什么是消息，Class 的结构，selector、IMP、元类等概念将不再赘述&lt;/strong&gt;。本文用到的源码为 objc4-680 和 CF-1153.18，逆向 CoreFoundation.framework 的系统版本为 macOS 10.11.5，汇编语言架构为 x86_64。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://yulingtianxia.com/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="http://yulingtianxia.com/tags/Runtime/"/>
    
      <category term="Message Forwarding" scheme="http://yulingtianxia.com/tags/Message-Forwarding/"/>
    
      <category term="Messaging" scheme="http://yulingtianxia.com/tags/Messaging/"/>
    
  </entry>
  
  <entry>
    <title>让你的微信不再被人撤回消息</title>
    <link href="http://yulingtianxia.com/blog/2016/05/06/Let-your-WeChat-for-Mac-never-revoke-messages/"/>
    <id>http://yulingtianxia.com/blog/2016/05/06/Let-your-WeChat-for-Mac-never-revoke-messages/</id>
    <published>2016-05-06T10:24:04.000Z</published>
    <updated>2016-08-27T03:30:16.000Z</updated>
    
    <content type="html">&lt;p&gt;处女座强迫症最讨厌别人发消息后撤回了，尤其是发的图片还没看清就被撤了，或者还没来得及看的消息就已经被撤回了。最近逆向工程很火，所以我也简单的逆向了一把微信 for Mac &amp;amp; iOS。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;为什么不对-iOS-动刀-Mac-和-iOS-双管齐下&quot;&gt;&lt;a href=&quot;#为什么不对-iOS-动刀-Mac-和-iOS-双管齐下&quot; class=&quot;headerlink&quot; title=&quot;为什么不对 iOS 动刀 Mac 和 iOS 双管齐下&quot;&gt;&lt;/a&gt;&lt;del&gt;为什么不对 iOS 动刀&lt;/del&gt; Mac 和 iOS 双管齐下&lt;/h1&gt;&lt;p&gt;&lt;del&gt;iOS 上的微信 APP 不一定始终在前台运行着，如果别人在撤回消息时微信在后台甚至手机锁屏、断网，这时很可能没有调用撤回消息的方法，甚至当微信重新返回到前台时，从服务器根本不会接到原来消息的数据，而是只收到了一条『撤回』指令。基于以上猜测，我决定对微信 for Mac 下手，毕竟电脑上的微信只要开着就一直接收消息，Mac 版微信不会跑到后台。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;PS：后来有人说 Web 版微信本来就不会撤回消息。。。可惜我从没用过；发送和撤回消息时 iOS 微信即使没运行，在之后接收服务器消息时依然会接到原消息内容。。。好吧是我高估了微信。。。&lt;/p&gt;
&lt;p&gt;20160701 Update：&lt;/p&gt;
&lt;p&gt;今天在家无聊顺手也吧 iOS 的微信搞定了，只是比 Mac 的稍微麻烦一点罢了。&lt;/p&gt;
&lt;h1 id=&quot;脑洞和胆子都要大&quot;&gt;&lt;a href=&quot;#脑洞和胆子都要大&quot; class=&quot;headerlink&quot; title=&quot;脑洞和胆子都要大&quot;&gt;&lt;/a&gt;脑洞和胆子都要大&lt;/h1&gt;&lt;p&gt;之前看的一些逆向的教程里，感觉前期工作都是装软件配环境，噼里啪啦命令一顿敲，整的挺玄乎，其实都是用人家现成儿的工具做些事情，美其名曰『站在巨人的肩膀上』，这里不再赘述。在我看来第一个真正意义上有难度的事情就是一个字儿：『猜』！&lt;/p&gt;
&lt;p&gt;想要凭 dump 出的头文件里面的一堆函数名类名来猜出想要动手脚的地方，的确是个技术活儿。不仅考验脑洞，有时候还得运气好。把应用程序中的微信拖到 Hopper 中，搜下 “revoke”。这不，我一下子就猜出在哪个方法里面处理撤回消息逻辑的了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-findfuntion@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我凭借直觉，认为 &lt;code&gt;-[MessageService onRevokeMsg:]&lt;/code&gt; 就是我们要找的方法。事实也证明我是对的，一次成功！先看看这个方法的伪代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-pseudocode@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;伪代码里面包含着好多层复杂的 &lt;code&gt;if&lt;/code&gt; 判断逻辑，想必是这里复杂的业务逻辑让微信的同事无比抓狂，不要怕，我们不想让后面的事情发生，直接来个 &lt;code&gt;return&lt;/code&gt; 就万事大吉！按快捷键 『option+A』 或者选择 Hopper 菜单栏的 『Modify -&amp;gt; Assemble Instruction…』来修改第一行汇编语句：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-revokemsg@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能觉得这里直接 &lt;code&gt;return&lt;/code&gt; 掉是不是胆子也太大了，其实我还是看了函数里这坨代码的。那么多的 &lt;code&gt;if&lt;/code&gt; 判断伴随着的是各种出错场景下的数据上报，真正核心业务逻辑也就是下面这坨：&lt;/p&gt;
&lt;figure class=&quot;highlight x86asm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; = [[MessageData alloc] initWithMsgType:&lt;span class=&quot;number&quot;&gt;0x2710&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; isSendFromSelf]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rsi&lt;/span&gt; = @selector(toUsrName)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (LOBYTE(&lt;span class=&quot;built_in&quot;&gt;rax&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; toUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setFromUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; fromUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setToUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; toUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setFromUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; fromUsrName] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setToUsrName:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setMsgStatus:&lt;span class=&quot;number&quot;&gt;0x4&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setMsgContent:var_58]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; setMsgCreateTime:LODWORD([&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt; msgCreateTime])]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r15&lt;/span&gt; AddLocalMsg:var_50 msgData:&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; = [[NSArray arrayWithObject:&lt;span class=&quot;built_in&quot;&gt;r13&lt;/span&gt;] retain]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r15&lt;/span&gt; DelMsg:var_50 msgList:&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; isDelAll:&lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;r15&lt;/span&gt; = *objc_release&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;rbx&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;r12&lt;/span&gt; release]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码先是判断下撤回消息的人是不是自己，然后分情况更新 UI，最后生成并更新数据。既然没有啥重要操作，那就放心地忽略吧哈哈。&lt;/p&gt;
&lt;p&gt;现在需要将修改后的汇编重新生成新的可执行文件。选择 Hopper 菜单里的 『File -&amp;gt; Produce New Executable…』 后点 Yes：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineeringwechat-NewExecutable@2x.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后将生成的可执行文件替换到 &lt;code&gt;/Applications/WeChat.app/Contents/MacOS/WeChat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;唯一让我不解的是无需对新的 &lt;code&gt;WeChat&lt;/code&gt; 可执行文件进行代码签名微信依然可以正常运行。我是第一次玩逆向，还请前辈大神们指教。做了一系列撤回消息的尝试后，手机上面显示撤回，但 Mac 版微信的消息依然还在。一次猜中，成功！&lt;/p&gt;
&lt;h1 id=&quot;iOS-要稍微折腾一些&quot;&gt;&lt;a href=&quot;#iOS-要稍微折腾一些&quot; class=&quot;headerlink&quot; title=&quot;iOS 要稍微折腾一些&quot;&gt;&lt;/a&gt;iOS 要稍微折腾一些&lt;/h1&gt;&lt;p&gt;前提是有一个已经砸壳的 ipa，要么自己在越狱机中用 dumpdecrypted 砸壳，或者干脆从第三方工具下一个已经砸壳的（也就是给越狱机安装的）。我一开始从同步助手下的有点问题，后来从PP助手下的。&lt;/p&gt;
&lt;p&gt;有了被砸壳的 ipa 就可以继续了，解压后找到里面的 WeChat.app ，注意用 &lt;code&gt;codesign -dvvv WeChat.app&lt;/code&gt; 验证下签名。正版的 app 签名是腾讯的。。。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步&lt;/strong&gt;，猜，嗯，是 &lt;code&gt;-[CMessageMgr onRevokeMsg:]&lt;/code&gt; 这个方法。类名换了而已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;，改汇编代码。这里需要改的是 Thumb 指令集。其实它是较新的 ARM 处理器的一种模式。我们比较关心的是各种指令的含义，尤其是如何从 Thumb 切换回 ARM，没错，就是用 &lt;code&gt;bx&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/WeChatReverseEngineering/wechat-ios.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这有一个&lt;a href=&quot;http://infocenter.arm.com/help/topic/com.arm.doc.qrc0006ec/QRC0006_UAL16.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Thumb® 16 位指令集快速参考卡&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后还是跟之前一样替换生成的可执行文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步&lt;/strong&gt;，签名！建议先阅读 &lt;a href=&quot;http://objccn.io/issue-17-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码签名探析&lt;/a&gt;，了解下授权机制 (Entitlements) 和配置文件 (Provisioning)。这一步的前提是拥有一个合法证书，个人或企业都可以！&lt;/p&gt;
&lt;p&gt;先随便新建个工程(我的叫 testUIImage，昨晚研究 UIImage 时建的)，一定要用证书签名，别选 None。。。target 架构选对（自己手机），编译后生成了个 ipa 文件。我们要的就是它里面的签名信息。&lt;/p&gt;
&lt;p&gt;先用 &lt;code&gt;ldid&lt;/code&gt; 工具在桌面上生成个授权文件（Entitlements.plist）：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ldid -e &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Library/&lt;/span&gt;Developer&lt;span class=&quot;regexp&quot;&gt;/Xcode/&lt;/span&gt;DerivedData&lt;span class=&quot;regexp&quot;&gt;/testUIImage-aoqcifvynorulecqtwqqugleuktf/&lt;/span&gt;Build&lt;span class=&quot;regexp&quot;&gt;/Products/&lt;/span&gt;Debug-iphoneos&lt;span class=&quot;regexp&quot;&gt;/testUIImage.app/&lt;/span&gt;testUIImage &amp;gt; ~&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;Entitlements.plist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;PS：我是用 &lt;code&gt;homebrew&lt;/code&gt; 安装的 &lt;code&gt;ldid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后把 testUIImage.app 中的配置文件 (Provisioning) &lt;strong&gt;embedded.mobileprovision&lt;/strong&gt; 复制粘贴到我们的 WeChat.app 中。（右键显示包内容都会吧）&lt;/p&gt;
&lt;p&gt;最后用 &lt;code&gt;codesign&lt;/code&gt; 命令对 WeChat.app 签名，注意替换为你自己的证书『常用名称』：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;codesign -f -s &lt;span class=&quot;string&quot;&gt;&quot;iPhone Developer: xiaoyu yang (XXXXXXXXX)&quot;&lt;/span&gt; --entitlements &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;Entitlements.plist &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;微信_v6.&lt;span class=&quot;number&quot;&gt;3.22&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Payload/&lt;/span&gt;WeChat.app&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;第四步&lt;/strong&gt;，也是最后一步，打包新的 WeChat.ipa：&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xcrun -sdk iphoneos PackageApplication -v &lt;span class=&quot;regexp&quot;&gt;/Users/y&lt;/span&gt;angxiaoyu&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;微信_v6.&lt;span class=&quot;number&quot;&gt;3.22&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/Payload/&lt;/span&gt;WeChat.app  -o ~&lt;span class=&quot;regexp&quot;&gt;/Desktop/&lt;/span&gt;WeChat.ipa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在可以把新的 WeChat.ipa 安装到自己的手机上啦！&lt;/p&gt;
&lt;p&gt;验证了下退出微信杀掉进程后，对方发消息并撤回，进入微信后依然可以收到撤回的消息。excited！&lt;/p&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;其实逆向工程是门很有趣的学问，而任何学问都是入门简单深入难。本例看似容易，其实如果面对更加复杂的环境下，光靠我那点儿可怜的汇编知识肯定是不够的。如果是对 iOS 上的 APP 进行逆向，实则准备工作要麻烦得多。真正掌握了底层的原理和基础知识才是硬道理！&lt;/p&gt;
&lt;p&gt;其实是利用 Security 框架在 app 内部验证签名防止被人修改的，当然在 Mac 上我们最方便的还是用 &lt;code&gt;codesign&lt;/code&gt; 命令啦。苹果提供了&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Security/Reference/CodeSigningRef/index.html#//apple_ref/doc/uid/TP40008151-CH2-SW27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;代码签名服务的文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老子终于也当了回标题党！啊哈！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;处女座强迫症最讨厌别人发消息后撤回了，尤其是发的图片还没看清就被撤了，或者还没来得及看的消息就已经被撤回了。最近逆向工程很火，所以我也简单的逆向了一把微信 for Mac &amp;amp; iOS。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yulingtianxia.com/tags/iOS/"/>
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Reverse Engineering" scheme="http://yulingtianxia.com/tags/Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title>Find Convex Hull with Graham Scan &amp; Swift</title>
    <link href="http://yulingtianxia.com/blog/2016/04/28/Find-Convex-Hull-with-Graham-Scan-Swift/"/>
    <id>http://yulingtianxia.com/blog/2016/04/28/Find-Convex-Hull-with-Graham-Scan-Swift/</id>
    <published>2016-04-28T14:37:16.000Z</published>
    <updated>2016-08-27T03:30:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;凸包(Convex hull)&lt;/a&gt; 是一个数学上的概念，在二维平面上可以想象成用一个橡皮筋套住一堆钉在平面上的钉子。本文讲述如何使用 Swift 实现 &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graham scan&lt;/a&gt; 算法来寻找二维平面点集上的凸包。工程源码 Github：&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/yulingtianxia/Algorithm-Experiment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/d/de/ConvexHull.svg&quot; alt=&quot;By Maksim (original); en:User:Pbroks3 (redraw), via Wikimedia Commons&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhull/convexhull.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;简单粗暴的想法&quot;&gt;&lt;a href=&quot;#简单粗暴的想法&quot; class=&quot;headerlink&quot; title=&quot;简单粗暴的想法&quot;&gt;&lt;/a&gt;简单粗暴的想法&lt;/h1&gt;&lt;p&gt;直观上去看可以理解为『找出最外围的点』，进而把问题转化为『剔除凸多边形内部的点』，进而简化为『剔除任意三角形内的点』。PS：&lt;strong&gt;三角形&lt;/strong&gt;指的是由点集内任意三个不相同的点构成的三角形，以下不再赘述定义，直接以&lt;strong&gt;三角形&lt;/strong&gt;代指。&lt;/p&gt;
&lt;p&gt;下面需要做的是遍历所有三角形的排列组合，找出三角形上或内部的点，并剔除，因为它肯定不是凸包的顶点。&lt;/p&gt;
&lt;p&gt;如何判断一个点 &lt;code&gt;P&lt;/code&gt; 是否在三角形 &lt;code&gt;ABC&lt;/code&gt; 里面呢？&lt;/p&gt;
&lt;p&gt;很简单！如果点 &lt;code&gt;P&lt;/code&gt; 在三角形 &lt;code&gt;ABC&lt;/code&gt; 内，点 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt; 肯定在直线 &lt;code&gt;BC&lt;/code&gt; 的同一侧，点 &lt;code&gt;B&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt; 也肯定在直线 &lt;code&gt;AC&lt;/code&gt; 同一侧，点 &lt;code&gt;C&lt;/code&gt; 和 &lt;code&gt;P&lt;/code&gt; 必定也在直线 &lt;code&gt;AB&lt;/code&gt; 同一侧！&lt;/p&gt;
&lt;p&gt;果然够简单粗暴！&lt;/p&gt;
&lt;p&gt;假设直线 &lt;code&gt;BC&lt;/code&gt; 方程为 &lt;code&gt;ax + by + c = 0&lt;/code&gt;,如果点 &lt;code&gt;P(Xp,Yp)&lt;/code&gt; 在直线 &lt;code&gt;BC&lt;/code&gt; 上，则有 &lt;code&gt;a·Xp + b·Yp + c = 0&lt;/code&gt;；如果点 &lt;code&gt;P(Xp,Yp)&lt;/code&gt; 与点 &lt;code&gt;A(Xa,Ya)&lt;/code&gt; 在直线 &lt;code&gt;BC&lt;/code&gt; 同一侧，则有 &lt;code&gt;(a·Xp + b·Yp + c)(a·Xa + b·Ya + c) &amp;gt; 0&lt;/code&gt;。为了不被吐槽拿初中数学忽悠人，还是快速上代码吧：&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func calculatePoint(pointP:CGPoint,onLine &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;:(pointA:CGPoint,pointB:CGPoint)) -&amp;gt; CGFloat &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (pointP.y - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.y) * (&lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointB.x - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.x) - (&lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointB.y - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.y) * (pointP.x - &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt;.pointA.x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func checkPoint(P:CGPoint,inTriangle &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;:(A:CGPoint,B:CGPoint,C:CGPoint)) -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var Pp = calculatePoint(P, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let AB = Pp == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||Pp * calculatePoint(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !AB&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Pp = calculatePoint(P, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let AC = Pp == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||Pp * calculatePoint(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !AC&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Pp = calculatePoint(P, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let BC = Pp == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;||Pp * calculatePoint(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.A, onLine: (&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.C,&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.B)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AB &amp;amp;&amp;amp; AC &amp;amp;&amp;amp; BC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;calculatePoint: onLine:&lt;/code&gt; 函数的作用是将点坐标代入直线方程式并返回计算结果；&lt;code&gt;checkPoint: inTriangle:&lt;/code&gt; 函数的作用是判断某点是否在三角形上或内部。&lt;/p&gt;
&lt;p&gt;在开始暴力遍历所有的三角形组合并剔除不符合要求的点之前，我想再声明一个命题：『X 轴和 Y 轴的极值点肯定是凸包顶点』。也就是说如果一个点的 X 坐标最大，那么它肯定是凸包顶点。这个命题像是废话，用反证法其实也很容易证明：假如 &lt;code&gt;Y&lt;/code&gt; 值最大的点 &lt;code&gt;P&lt;/code&gt; 不是凸包顶点，那么必然处于某个三角形 &lt;code&gt;ABC&lt;/code&gt; 内，并且 &lt;code&gt;ABC&lt;/code&gt; 三个点的 &lt;code&gt;Y&lt;/code&gt; 值都比 &lt;code&gt;P&lt;/code&gt; 小，假设 &lt;code&gt;A&lt;/code&gt; 点为三角形 &lt;code&gt;ABC&lt;/code&gt; 中 &lt;code&gt;Y&lt;/code&gt; 值最小的点，则 &lt;code&gt;P&lt;/code&gt; 点和 &lt;code&gt;A&lt;/code&gt; 点必然处于直线 &lt;code&gt;BC&lt;/code&gt; 两侧，矛盾。命题得证。&lt;/p&gt;
&lt;p&gt;PS：这里注意我们想要的结果仅仅是&lt;strong&gt;凸包顶点&lt;/strong&gt;，有些点可能位于两个相邻的凸包顶点连线上，这样的点只能算作&lt;strong&gt;凸包上的点&lt;/strong&gt;，它们与&lt;strong&gt;凸包内的点&lt;/strong&gt;一样需要被剔除。&lt;/p&gt;
&lt;p&gt;我们最终输出的结果希望是逆时针顺序输出的，比如下图中的凸包顶点输出顺序应为：&lt;code&gt;A,B,C,D,E,F,G,H&lt;/code&gt;，其中 &lt;code&gt;A&lt;/code&gt; 点和 &lt;code&gt;D&lt;/code&gt; 点分别为 X 最小的点和 X 最大的点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhullQQ20160428-0@2x.png&quot; alt=&quot;随机生成50个点集的凸包&quot;&gt;&lt;/p&gt;
&lt;p&gt;有两种方案可以按照逆时针顺序输出结果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;以 &lt;code&gt;A&lt;/code&gt; 点为中心，向量 &lt;code&gt;DA&lt;/code&gt; 方向做射线逆时针扫描，按照扫描到点的顺序输出即可，直至 360° 扫描完毕。&lt;/li&gt;
&lt;li&gt;将直线 &lt;code&gt;AD&lt;/code&gt; 上方的点集 &lt;code&gt;Su&lt;/code&gt; 按照 X 值从大到小排列，下方的点集 &lt;code&gt;Sd&lt;/code&gt; 按照 X 值从小到大排列，最后输出顺序为：&lt;code&gt;A，Sd，D，Su&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很明显，第二种方案计算量小并且实现简单。&lt;/p&gt;
&lt;p&gt;但受到方案 1 的启发，我们可以将暴力遍历的时间复杂度减少一层。将 &lt;code&gt;A&lt;/code&gt; 点与其他凸包顶点连上虚线：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhull/divideintotriangles@2x.png&quot; alt=&quot;以 A 点将凸包划分成几个三角形&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说可以把 &lt;code&gt;A&lt;/code&gt; 点作为公共点来遍历三角形。因为 &lt;code&gt;A&lt;/code&gt; 点肯定不会被剔除，并且上图中以 &lt;code&gt;A&lt;/code&gt; 点为公共点的三角形已经覆盖了所有的点，不用担心会有遗漏。于是三角形的一个顶点已经确定下来了，只需遍历生成另两个顶点和一个需要判定是否在三角形内的点，四层循环嵌套降为三层！&lt;/p&gt;
&lt;p&gt;献上核心算法的 Swift 代码：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func generateConvexHull(inout &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;:[PointView])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       point.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.count &amp;lt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; minXPoint = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; maxXPoint = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       minXPoint = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x &amp;lt; minXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x ? point : minXPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       maxXPoint = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x &amp;gt; maxXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.x ? point : maxXPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; point1 = minXPoint;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point2 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !point2.isConvexHullNode || point2 == point1 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point3 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !point3.isConvexHullNode || point3 == point1 || point3 == point2 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point4 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !point4.isConvexHullNode || point4 == point1 || point4 == point2 || point4 == point3 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; checkPoint(point4.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, inTriangle: (point2.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,point3.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,point1.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   point4.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   continue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; su = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.filter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       calculatePoint($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, onLine: (minXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,maxXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; sl = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.filter &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       calculatePoint($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, onLine: (minXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;,maxXPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   su = su.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x &amp;gt; ($&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   sl = sl.&lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ($&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x &amp;lt; ($&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; as CGPoint).x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; result = [minXPoint]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   result += sl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   result.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(maxXPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   result += su&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; = result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这么暴力的算法复杂度也是高的惊人，为 &lt;code&gt;O(N^3)&lt;/code&gt;！&lt;strong&gt;想必此时已经有不少已经脱了裤子的同学想问博主为什么要给自己看这些！&lt;/strong&gt;说好的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Graham scan&lt;/a&gt;算法呢？其实这部分『前戏』很重要，绝不是为了凑篇幅，一些重要概念对后面的正题理解有很大帮助，比如下面要介绍的 &lt;code&gt;PointView&lt;/code&gt; 类（卧槽表碧莲啊还来！）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PointView&lt;/code&gt; 是算法演示程序中用于绘制和存储二维点坐标信息的类，它不仅存储坐标，还维护了状态 &lt;code&gt;isConvexHullNode&lt;/code&gt;，并根据状态值是否为凸包顶点来改变 UI（红色的点为凸包顶点，紫色为非凸包顶点）。此外 &lt;code&gt;PointView&lt;/code&gt; 还需要处理鼠标拖拽事件。这部分比较简单，就不上代码了。&lt;/p&gt;
&lt;h1 id=&quot;Graham-Scan&quot;&gt;&lt;a href=&quot;#Graham-Scan&quot; class=&quot;headerlink&quot; title=&quot;Graham Scan&quot;&gt;&lt;/a&gt;Graham Scan&lt;/h1&gt;&lt;p&gt;当沿着凸包逆时针漫游时，你会发现总是在『向左拐』；反之则是『向右拐』。&lt;/p&gt;
&lt;p&gt;还记得之前说的以 &lt;code&gt;A&lt;/code&gt; 点为中心逆时针扫描所有点的方案吧？将所有除 &lt;code&gt;A&lt;/code&gt; 以外的点按照这个扫描顺序进行排列。然后在此基础上遍历并剔除『不向左拐』的点，最后输出的点集正好是按顺序排列好的。&lt;/p&gt;
&lt;p&gt;PS:判断 &lt;code&gt;P1P2P3&lt;/code&gt; 在 &lt;code&gt;P2&lt;/code&gt; 拐弯方向公式：&lt;code&gt;(p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x)&lt;/code&gt;，如果其结果为 &lt;code&gt;0&lt;/code&gt;，这三个点是共线的，如果其结果为正，这三个点是向左拐的，否则，它是向右拐的。&lt;/p&gt;
&lt;p&gt;为了方便计算，通常选择 Y 值最小的点作为 &lt;code&gt;A&lt;/code&gt; 点（Y 值一样就选最右边的点），其余的点就都落在第一、二象限。&lt;/p&gt;
&lt;p&gt;下图来自维基百科，但是漫游方向是&lt;strong&gt;顺时针&lt;/strong&gt;的，也就是说要剔除&lt;strong&gt;不向右拐&lt;/strong&gt;的点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/1/1b/Graham_scan.png&quot; alt=&quot;via Wikimedia Commons&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;P&lt;/code&gt; 为原点的极坐标下按照极角大小构造顺时针排序的数组：&lt;code&gt;[A,B,C,D]&lt;/code&gt;，计算极角的函数实现如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;calculatePolarAngle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(origin:CGPoint, target:CGPoint)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; trans = (x: target.x - origin.x, y: target.y - origin.y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; angle = atan(&lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;(trans.y) / &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;(trans.x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; trans &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle + &lt;span class=&quot;type&quot;&gt;M_PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle + &lt;span class=&quot;type&quot;&gt;M_PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (x,y) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; angle + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;type&quot;&gt;M_PI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着就是遍历按极角排序好的数组。先将 &lt;code&gt;P&lt;/code&gt; 点和 &lt;code&gt;A&lt;/code&gt; 点 push 进栈，然后检查 &lt;code&gt;PAB&lt;/code&gt; 是否不向右拐，因为在 &lt;code&gt;A&lt;/code&gt; 点右拐所以将 &lt;code&gt;B&lt;/code&gt; 点 push 进栈，然后继续检查 &lt;code&gt;C&lt;/code&gt; 点。可以看出在 &lt;code&gt;C&lt;/code&gt; 点处 &lt;code&gt;BCD&lt;/code&gt; 向左拐了，于是 &lt;code&gt;C&lt;/code&gt; 点被剔除，栈 pop 出 &lt;code&gt;C&lt;/code&gt;。然后检查 &lt;code&gt;ABD&lt;/code&gt; 处是否符合要求，结果是符合要求的，于是将 &lt;code&gt;D&lt;/code&gt; 点 push 进栈。&lt;/p&gt;
&lt;p&gt;也就是说遍历数组时始终判断栈顶元素处拐弯方向是否符合要求：方向符合要求则将当前遍历的点 push 进栈，否则将栈顶元素 pop，并继续判断栈顶元素处拐弯是否符合要求，直到符合要求为止。（如若栈元素个数小于 &lt;code&gt;3&lt;/code&gt;，则不再 pop）&lt;/p&gt;
&lt;p&gt;最后的实现算法 Swift 代码如下（逆时针漫游）&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;func generateConvexHull(inout &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;: [PointView]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       point.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.count &amp;lt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; minYPoint = &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; minIndex = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (index,point) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.enumerate() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (minIndex,minYPoint) = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.y &amp;lt; minYPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;.y ? (index,point) : (minIndex,minYPoint)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.removeAtIndex(minIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.sortInPlace &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; calculatePolarAngle(minYPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, target: $&lt;span class=&quot;number&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;) &amp;lt; calculatePolarAngle(minYPoint.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;, target: $&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; stack = [minYPoint]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; restPoints = [PointView]()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   stack.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..&amp;lt;&lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt;.count] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       func checkTurnsRight() -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; p1 = stack[stack.count-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;].&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; p2 = stack.&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;!.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; p3 = point.&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; checkTurnsRight() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           stack.&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;?.isConvexHullNode = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           restPoints.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(stack.&lt;span class=&quot;built_in&quot;&gt;last&lt;/span&gt;!)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           stack.removeLast()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; stack.count &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       stack.&lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;points&lt;/span&gt; = stack + restPoints&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Graham Scan 的时间复杂度是 &lt;code&gt;O(nlogn)&lt;/code&gt;，而且只适用于二维平面。算法导论上也讲到了包裹法（Jarvis步进法）和分治法，时间复杂度都是 &lt;code&gt;O(nlogn)&lt;/code&gt;。我的&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;那个工程&lt;/a&gt;里也有&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment/blob/master/ConvexHull/ConvexHull/DivideAndConquer.swift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分治法的 Swift 实现&lt;/a&gt;。如果拓展到多维空间，我觉得使用 Swift 并不是一个很好的实现语言，Matlab 再适合不过了。&lt;/p&gt;
&lt;h1 id=&quot;后记&quot;&gt;&lt;a href=&quot;#后记&quot; class=&quot;headerlink&quot; title=&quot;后记&quot;&gt;&lt;/a&gt;后记&lt;/h1&gt;&lt;p&gt;博主江郎才尽竟然拿学校的某次算法实验充数尼玛坑爹呢这是！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot;&gt;凸包(Convex hull)&lt;/a&gt; 是一个数学上的概念，在二维平面上可以想象成用一个橡皮筋套住一堆钉在平面上的钉子。本文讲述如何使用 Swift 实现 &lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot;&gt;Graham scan&lt;/a&gt; 算法来寻找二维平面点集上的凸包。工程源码 Github：&lt;a href=&quot;https://github.com/yulingtianxia/Algorithm-Experiment&quot;&gt;https://github.com/yulingtianxia/Algorithm-Experiment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/d/de/ConvexHull.svg&quot; alt=&quot;By Maksim (original); en:User:Pbroks3 (redraw), via Wikimedia Commons&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7ni3rk.com1.z0.glb.clouddn.com/convexhull/convexhull.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yulingtianxia.com/tags/Swift/"/>
    
      <category term="macOS" scheme="http://yulingtianxia.com/tags/macOS/"/>
    
      <category term="Algorithm" scheme="http://yulingtianxia.com/tags/Algorithm/"/>
    
  </entry>
  
</feed>
